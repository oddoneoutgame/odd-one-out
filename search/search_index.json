{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>Welcome to the new home for the documentation of the Dmgz Android code base</li> <li>The site is very much still a work in progress </li> <li>If you're brand new, head on over to our Onboarding section</li> </ul>"},{"location":"administrative/","title":"Disney Streaming Android","text":"<p>Welcome to Disney Streaming Android! This section will be the go to destination for all things dealing with the administrative side of things:</p> <ul> <li>Org Chart &amp; Workstreams</li> <li>Backlog of Townhall Recordings</li> <li>Councils</li> <li>Release Processes - TODO</li> </ul>"},{"location":"administrative/org/","title":"Disney Streaming Android Organization","text":"<p>Below, you can find the current org chart of the Disney Streaming Android team as well as the current team structure.</p> Org ChartWorkstreams <p></p> <p></p> <ul> <li>View the doc here.</li> <li>View the wiki page here.</li> </ul>"},{"location":"administrative/townhall/","title":"Disney Streaming Android Town Hall Meetings","text":"<p>The Disney Streaming Android team meets twice a month on Tuesdays at 11am ET to give presentations and general updates for the status of the team. Below, you can find a history of the slides and recordings (where available).</p>"},{"location":"administrative/townhall/#2023","title":"2023","text":"2023-01 <ul> <li>2023-01-03<ul> <li>Topics:<ul> <li>Welcome to the New Year!</li> <li>Modern Android Development talk - Michael Yotive</li> </ul> </li> <li>Presentation</li> <li>Google Drive Recording</li> <li>Zoom Recording</li> </ul> </li> </ul>"},{"location":"administrative/townhall/#2022","title":"2022","text":"2022-12 <ul> <li>2022-12-20<ul> <li>Topics:<ul> <li>Ariel celebration</li> <li>Props!</li> </ul> </li> <li>Presentation</li> <li>Google Drive Recording</li> </ul> </li> </ul> 2022-11 <ul> <li>2022-11-22<ul> <li>Topics:<ul> <li>Ariel Commerce Phase2 demo</li> <li>Project Atlantis Demo</li> <li>Cynthia chat</li> </ul> </li> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> <li>2022-11-08<ul> <li>Topics:<ul> <li>Cynthia's first day!</li> <li>New colleague, Lorenzo Bogoni!</li> </ul> </li> <li>Presentation</li> <li>Did not record...</li> </ul> </li> </ul> 2022-10 <ul> <li> <p>2022-10-25</p> <ul> <li>Topics:<ul> <li>Hulu Classic Overview</li> <li>Project Atlantis Overview</li> <li>Announced the Jedi Trials and Jedi Academy Projects.</li> </ul> </li> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> <li> <p>2022-10-11</p> <ul> <li>Topics:<ul> <li>Wyko - Tech Lead</li> <li>Welcome Anusha again</li> <li>Cynthia Maxwell - New VP</li> <li>Recharge Day - Team Calendar</li> <li>Return To Office Week</li> <li>Kyber Refined tl;dr</li> <li>shopDisney - video by Team Edna</li> <li>Project Ariel: Phase 1 - live presentation by Team Mandalorian</li> <li>Grace Hopper Recap  - live presentation by Grace Jang</li> </ul> </li> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> </ul> 2022-09 <ul> <li> <p>2022-09-27</p> <ul> <li>Topics:<ul> <li>Dancing with the Stars launch success!</li> <li>Identity Unification release postponed.</li> <li>Clarizen Deprecation</li> <li>TPM Promotions! Congrats Anne &amp; Erik!</li> <li>Welcoming Anusha to the team!</li> <li>Remco's departure - Part 2</li> <li>DroidCon Recap - Part 2 featuring Floris Bonenkamp &amp; Trever Thomas</li> </ul> </li> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> <li> <p>2022-09-13</p> <ul> <li>Topics:<ul> <li>Remco's departure</li> <li>Promotions!</li> <li>End of Year Reviews</li> <li>D+ Day success</li> </ul> </li> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> </ul> 2022-08 <ul> <li> <p>2022-08-30</p> <ul> <li>Topics:<ul> <li>Disney Streaming's participation in the Returnship program. Welcoming Anusha Sarvothama to the team on 2022-09-26!</li> <li>DMED Props introduced. This is a use-it or lose-it type program where every month, you receive \"Props\" to give to your colleagues! Note: US Only at the time of this writing.</li> <li>Dancing with the Star (DWTS) demo</li> <li>New Player UI Demo.</li> </ul> </li> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> <li> <p>2022-08-02</p> <ul> <li>Topics:<ul> <li>Hulu's Google Play Billing demo. The feature was launched in the previous week.</li> <li>Team Mandalorian's demo on the Unified identity.</li> <li>Design Systems Library explanation.</li> </ul> </li> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> </ul> 2022-07 <ul> <li> <p>2022-07-19</p> <ul> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> </ul> </li> <li> <p>2022-07-05 - Cancelled.</p> </li> </ul> 2022-06 <ul> <li>2022-06-07<ul> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> <li>Other resources<ul> <li>RFC Proposal Doc</li> </ul> </li> </ul> </li> </ul> 2022-05 <ul> <li>2022-05-24<ul> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> <li>Other Resources<ul> <li>Hiring Council Slack Channel</li> <li>Onboarding Council Slack Channel</li> <li>Tech Council Slack Channel</li> </ul> </li> </ul> </li> </ul> 2022-04 <ul> <li>2022-04-26<ul> <li>Presentation</li> <li>Zoom Recording</li> <li>Google Drive Recording</li> <li>Tech Driven Initiative Doc discussed.</li> </ul> </li> <li>2022-04-12<ul> <li>Presentation</li> <li>Recording</li> <li>Other resources:<ul> <li>Hello FEDx Introduction Presentations</li> <li>Grace Hopper 2022 Calls for Participation</li> <li>List of Android Conferences</li> </ul> </li> </ul> </li> </ul> 2022-03 <ul> <li>2022-03-29<ul> <li>Presentation</li> <li>No recording</li> </ul> </li> </ul>"},{"location":"administrative/townhall/#previous-presentations","title":"Previous Presentations","text":"<p>Additionally recorded presentations can be found in the D+ Android Devs Presentations Google Doc.</p>"},{"location":"administrative/councils/","title":"Disney Streaming Android Councils","text":"<p>Disney Streaming Android Councils are a set of councils that consist of Android team members that are responsible for creating and maintaining standards and processes in their respective domain areas. The goal of the councils is to provide a mechanism for feedback, as well as allow for a small, controlled group to make decisions that are acted on by the entire team.</p>"},{"location":"administrative/councils/#councils","title":"Councils","text":"<p>There are three Councils that we operate:</p> <ul> <li>Hiring Council</li> <li>Onboarding Council</li> <li>Tech Council</li> </ul>"},{"location":"administrative/councils/#council-expectations","title":"Council Expectations","text":"<p>Each individual council has unique expectations that you can find on their respective pages. Below, you can find the set of expectations that apply to all of them:</p> <ul> <li>Dedicate approximately 2-3 hours per week to responsibilities.</li> <li>Attend regularly scheduled meetings. Work with members of the council to determine meeting times. This includes planning meetings as well as office hours.</li> <li>Work with TPM\u2019s to prioritize work on Dmgz while maintaining responsibilities for the council.</li> </ul>"},{"location":"administrative/councils/#joining-a-council","title":"Joining a Council","text":"<p>Unfortunately, council space is limited as each council has up to 6 members. This is intentional in order to keep the groups small and focused. If you would like to join a council, reach out to your manager and let them know of your interest. When a spot opens up, we will assign new members to the councils based on who is interested.</p> <p>In order to facilitate more involvement, each council will hold regularly scheduled Office Hour sessions. These will be 30-60 minute sessions that are open to the entire team where feedback and input from non-council members can be addressed.</p>"},{"location":"administrative/councils/hiring/","title":"Hiring Council","text":"<ul> <li>Welcome to the Disney Streaming Android Hiring Council. This council is meant to meet and define the process and procedures for the hiring processes within the team, in both the United States and across Europe</li> <li>You can join in on any discussions in the open slack channel, <code>#ds-android-hiring-council</code></li> <li>Hiring Council Office hours are the first meeting of every month. Come ask questions, give suggestion, feedback, etc.</li> <li>Meeting invite details:<ul> <li>Every other Tuesday at:<ul> <li>9:00 AM PT</li> <li>12:00 PM EST</li> <li>18:00 AMS</li> </ul> </li> <li>Join the meeting here</li> <li>Every other week the Hiring Council has a region based only meeting (US vs EU)</li> </ul> </li> <li>Past meeting notes</li> </ul>"},{"location":"administrative/councils/hiring/#responsibilities","title":"Responsibilities","text":"<ul> <li>Create &amp; maintain a set of projects for candidates to complete during the interview process.</li> <li>Create &amp; maintain Job Descriptions that will be provided to HR &amp; recruiting and seen by candidates.</li> <li>Gather/curate the list of questions for each round of interviews.</li> <li>Be aware of industry standards and adjust accordingly.</li> <li>Meet regularly with the various hiring managers &amp; interviewers to gather feedback.</li> <li>Meet with new hires to discuss the hiring process and gather feedback.</li> <li>Determine a list of criteria for which candidates should be evaluted on.</li> <li>Partner with recruitment for internal company initiatives, such as Grace Hopper, AfroTech and Returnship</li> <li>Define the process by which the TPMs, hiring managers and leads decide where a candidate can/should be placed.</li> <li>Create and maintain a process for pre-briefing managers &amp; de-briefing managers on a candidate.</li> <li>Take steps to learn about and put a focus on diversity and inclusion in the hiring process.</li> <li>Work with TPMs and Workstream leads to identify candidate position needs. This will decide which levels we should request to hire from recruitment.</li> </ul>"},{"location":"administrative/councils/hiring/#current-members","title":"Current Members","text":"<ul> <li>Selcan Guner</li> <li>Manuel Montalvo</li> <li>Dion Segijn</li> <li>Gabriel Zandavalle</li> </ul>"},{"location":"administrative/councils/hiring/#goals","title":"Goals","text":"<p>Defining high level goals for the Hiring Council to agree on will help align us when making decisions</p> <ul> <li>Empathy for the Candidate - Prioritizing empathy for the candidate is a a great way to make sure each candidate is having a positive experience</li> <li>Consistency - Interviews can be a bit dynamic based on the skills of the candidate, and who is conducting the interview. To ensure each candidate have similar rates of success in our interview process, valuing some consistency is important</li> <li>Evaluating Skills - Attempting to accurately evaluate the skills of a candidate is a top priority. Techincal skills, soft skills, cultural fit, etc.</li> <li>Empathy for the Interviewer - Having a cumbersome hiring proces is a great way to increase interviewer burnout. It will also make it more difficult to have team members want to conduct interviews, or even spark a desire to get involved</li> <li>Keeping the experience of the interviewer in mind is beneficial to us</li> </ul>"},{"location":"administrative/councils/hiring/eu_process/","title":"EU Hiring Process","text":"<p>This is the current process in the EU for hiring. Over time this will be updated and adjusted based on feedback, how interviews go, etc.</p> <p></p>"},{"location":"administrative/councils/hiring/eu_process/#recruiter-phone-screen","title":"Recruiter Phone Screen","text":"<ul> <li>Interviewer - Recruiter</li> <li>Length - ? minutes</li> <li>Format<ul> <li>Position and requirements explained</li> <li>Provides high level details about the interview process and how best to prepare for it</li> </ul> </li> <li>Post Recruiter Phone Screen steps<ul> <li>Recruiter sends candidate resumes to Hiring Managers to inspect</li> <li>Hiring Managers create a shortlist of candidates</li> <li>Recruiter schedules interviews</li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/eu_process/#todo-add-other-steps-here","title":"TODO Add other steps here","text":""},{"location":"administrative/councils/hiring/expectations/","title":"Candidate Expectations by Level","text":"<p>Candidates are not necessarily expected to cover every item in this list, as it is meant to be a rough guideline</p>"},{"location":"administrative/councils/hiring/expectations/#p1-associate","title":"P1 - Associate","text":"<ul> <li>Cultural fit</li> <li>Proficient in english</li> <li>Programming experience</li> <li>Relevant education</li> <li>Basic understanding of SCRUM</li> <li>Basic understanding of development processes</li> <li>Basic understanding of version control</li> </ul>"},{"location":"administrative/councils/hiring/expectations/#p2-mid-level","title":"P2 - Mid-level","text":"<ul> <li>P1 expectations listed above</li> <li>Professional experience with Android development</li> <li>Up to date on recent developments in the field<ul> <li>Libraries</li> <li>Architecture trends</li> <li>Android developments</li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/expectations/#p3-senior","title":"P3 - Senior","text":"<ul> <li>P2 expectations listed above</li> <li>Professional experience as a Senior or Lead on a smaller team<ul> <li>Demonstrates ownership and, or, being a domain expert in an area</li> <li>Promote team expectations and platform best practices</li> <li>Has experience mentoring others</li> </ul> </li> <li>Experience with large scale apps (user count and codebase size)</li> <li>Nice to haves<ul> <li>Experience with different flavors and form factors<ul> <li>Amazon Fire</li> <li>Tablet</li> <li>TV</li> <li>Chromebook</li> <li>AOSP</li> </ul> </li> <li>Experience with video / streaming</li> <li>Experience working on a geo distributed team</li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/expectations/#p4-lead","title":"P4 - Lead","text":"<p>TODO</p>"},{"location":"administrative/councils/hiring/us_process/","title":"US Hiring Process","text":"<p>This is the current process in the US for hiring. Over time this will be updated and adjusted based on feedback, how interviews go, etc.</p> <p></p>"},{"location":"administrative/councils/hiring/us_process/#recruiter-phone-screen","title":"Recruiter Phone Screen","text":"<ul> <li>Interviewer - Recruiter</li> <li>Length - 30 minutes</li> <li>Format<ul> <li>Prescribed questions provided by Android team</li> <li>Position and requirements explained</li> <li>Provides high level details about the interview process and how best to prepare for it</li> </ul> </li> <li>Post Recruiter Phone Screen steps<ul> <li>Recruiter sends candidate resumes to Hiring Managers to inspect</li> <li>Hiring Managers create a shortlist of candidates</li> <li>Recruiter schedules interviews</li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/us_process/#manager-phone-screen","title":"Manager Phone Screen","text":"<ul> <li>Interviewer - Hiring Manager</li> <li>Length - 1 hour</li> <li>Format<ul> <li>Evalute Resume</li> <li>Sell the position to the candidate</li> <li>Cultural fit</li> <li>Technical challenge<ul> <li>P1 - Coding excercise</li> <li>P2+ - Code review</li> </ul> </li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/us_process/#technical-interview","title":"Technical Interview","text":"<ul> <li>Interviewers - Two P2+ engineers</li> <li>Length - 1 hour</li> <li>Format<ul> <li>Greet the candidate and inform them of the format of the interview</li> <li>Everyone does a quick introduction</li> <li>Conversational question / answer format with resume questions, technical questions, architecture questions, design questions, etc.</li> <li>Last ~10 minutes - candidate asks questions</li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/us_process/#pair-programming","title":"Pair Programming","text":"<ul> <li>Interviewer - Two P2+ engineers</li> <li>Length - 1 hour and 30 minutes</li> <li>Format<ul> <li>Greet the candidate and inform them of the format of the interview</li> <li>Everyone does a quick introduction</li> <li>Collaborative coding session, getting feedback and suggestions from interviewers</li> <li>All available resources allowed (Google, Stack Overflow, Android docs, etc.)</li> <li>Interviewers can start with resume questions, etc.</li> <li>Coding Session</li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/us_process/#tpm-interview","title":"TPM Interview","text":"<ul> <li>Interviewer - Android TPM</li> <li>Length - 30 minutes</li> <li>Format<ul> <li>Covers agile processes and team fit</li> </ul> </li> </ul>"},{"location":"administrative/councils/hiring/us_process/#director-interview","title":"Director Interview","text":"<ul> <li>Interviewer - Aaron Rietschlin or Balaji Rathinasekaran</li> <li>Length - 30 minutes</li> <li>Format<ul> <li>TODO</li> </ul> </li> </ul>"},{"location":"administrative/councils/onboarding/","title":"Onboarding Council","text":"<ul> <li>Welcome to the Disney Streaming Android Onboarding Council. This council is meant to meet and define the process for which we will onboard newly hired team members</li> <li>You can join in on any discussions in the open slack channel - <code>#ds-android-onboarding-council</code></li> <li>Onboarding Council Office hours are the first meeting of every month. Come ask questions, give suggestion, feedback, etc.</li> <li>Meeting invite details:<ul> <li>Every Wednesday at:<ul> <li>10:00 AM PT</li> <li>1:00 PM EST</li> <li>17:00 AMS</li> </ul> </li> <li>Join the meeting here</li> <li>Meeting ID: 919 2069 2703</li> </ul> </li> <li>Past meeting notes</li> </ul>"},{"location":"administrative/councils/onboarding/#responsibilities","title":"Responsibilities","text":"<ul> <li>Decide the process for which we will onboard new members</li> <li>Create and maintain a collection of sample applications that can be used for onboarding purposes</li> <li>Work with the Hiring council to understand the placement of the new team member</li> <li>Create and curate a list of presentations that is offered during the onboarding process</li> </ul>"},{"location":"administrative/councils/onboarding/#current-members","title":"Current Members","text":"<ul> <li>Taylor Case</li> <li>Vicki Hwang</li> <li>Kisik Kim</li> <li>Bala Rathinasekaran</li> </ul>"},{"location":"administrative/councils/onboarding/#additional-resources","title":"Additional Resources","text":"<ul> <li>High level Android Onboarding Proposal plan</li> <li>New Hire Onboarding Checklist</li> <li>New Hire Onboarding Process</li> </ul>"},{"location":"administrative/councils/tech/","title":"Tech Council","text":"<p>Welcome to the Disney Streaming Android Tech Council. This council is meant to meet and define the architecture and technical approach within the Disney Streaming Android team. This team will be centered around our platform team, Team Tesseract. You can join in on any discussions in the open slack channel, <code>#ds-android-tech-council</code>.</p> <p>View meeting notes here.</p>"},{"location":"administrative/councils/tech/#responsibilities","title":"Responsibilities","text":"<ul> <li>Decide which technologies can and should be used in the application as well as decide on when to deprecate and remove current technologies.</li> <li>Create and maintain an evolving coding style that fits our project, as well as stays up to date with modern practices.</li> <li>Establish and maintain a process for feature audits</li> <li>Maintain and prioritize a list of active TDIs</li> <li>Create and curate a list of presentations that are relevant to the core functionality of the codebase.</li> <li>Work with the leadership on curating a list of presentations to deliver to the rest of the Android team at our regular bi-weekly all-hands.</li> <li>Define process and expectations for library management and release</li> <li>Create a process for which feedback from the entire team can be considered.</li> <li>Sync regularly with Workstream Leads to gather feedback.</li> <li>Meet periodically during Android Developer Preview stages to assist to identify required changes as well as new features we could potentially take advantage of.</li> </ul>"},{"location":"administrative/councils/tech/#process","title":"Process","text":"<ul> <li>5 Members (centered around Team Tesseract)</li> <li>Meet on a regular basis. Starting with once per week.</li> <li>Hold office hours with non-council members on a regular cadence, ideally once per week.<ul> <li>The goal here is to provide an additional space for willing engineers to open discussions on technology.</li> </ul> </li> </ul>"},{"location":"administrative/councils/tech/#current-members","title":"Current Members","text":"<ul> <li>Eli Dangerfield</li> <li>Francisco Visintini</li> <li>John Hogan</li> <li>Remco Mokveld</li> <li>Wyko Rijnsburger</li> </ul>"},{"location":"administrative/rfc/","title":"RFC (Request for Comments)","text":"<p>An RFC is a document describing a change in our codebase.</p>"},{"location":"administrative/rfc/#why","title":"Why?","text":"<ul> <li>Provide a way for developers to get feedback on ideas and suggestions before implementation.</li> <li>Ensure that cross-team changes can be discussed and reviewed by all interested parties.</li> <li>Provide a historical overview of changes within the codebase.</li> </ul>"},{"location":"administrative/rfc/#when","title":"When?","text":"<p>RFCs should be submitted when making significant changes in the code base that impact multiple teams. For example:</p> <ul> <li>Migrating from RxJava to Coroutines.</li> <li>Changing the view architecture from MVVM to MVP.</li> </ul> <p>We do not want to slow down regular development on the app. Most changes to our codebase do not require one, such as:</p> <ul> <li>Changes impacting only a single feature team.</li> <li>Changes that do not take a lot of time to implement. In these cases, you can simply submit a PR with the change and request a review from @android-fed.</li> </ul> <p>Although not required, RFCs for single team changes are still welcome and a nice way to get input and feedback from the rest of the engineers.</p>"},{"location":"administrative/rfc/#how","title":"How?","text":"<p>RFCs are submitted as PRs to this repo (<code>dmgz-docs</code>) so the proposal can be discussed using threaded comments. This allows for concurrent discussions on different points.</p> <ul> <li>Copy and rename the docs/administrative/rfc/template into the docs/administrative/rfc folder.</li> <li>Complete the template. Feel free to modify the template to fit your proposal.</li> <li>Add your proposal to the navigation under RFCs in mkdocs.yml.</li> <li>Submit a PR.</li> <li>Request a review from @android-fed.</li> <li>Get at least two approvals.</li> <li>Merge and start implementation.</li> </ul> <p>For inspiration, take a look at the existing RFCs in the rfc folder.</p> <p>If you are:</p> <ul> <li>Unsure if an RFC needs to be written</li> <li>Would like some help with writing one</li> <li>Would like to discuss your proposal before submitting an RFC</li> </ul> <p>Please contact the tech-council! You can reach the council on Slack in #ds-android-tech-council or by joining one of the office hours.</p>"},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/","title":"Jarvis Transforms Management","text":""},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/#why","title":"Why?","text":""},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/#todays-situation","title":"Today's situation","text":"<p>In the current situation there are two different flavors for Jarvis.</p> <ul> <li><code>dev</code> flavor<ul> <li>Used internally by developers on QA team</li> <li>does not require a passcode</li> <li>loads the config from https://appconfigs.disney-plus.net/dmgz/qa/transformations/all.json</li> </ul> </li> <li><code>partner</code> flavor<ul> <li>fetches https://appconfigs.disney-plus.net/dmgz/qa/jarvis/PasscodeMap.json on first start</li> <li>requests the user to input a passcode</li> <li>then fetches the transforms from the filename that matches that passcode</li> </ul> </li> </ul>"},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/#why-does-this-need-to-change","title":"Why does this need to change?","text":"<p>On the one hand we want it to be easy to add jarvis toggles for development purposes, on the other hand we may sometimes be working on new features which are partners are legally not allowed to know about, or maybe in some cases some partners are allowed to know about it but not all.</p> <p>The current approach isn't very secure since all passcodes are exposed in the plaintext endpoint that's accessible without authentication. When someone from Amazon sees that the Jarvis app loads https://appconfigs.disney-plus.net/dmgz/qa/jarvis/PasscodeMap.json which contains the JSON below, and when they enter the password <code>DS+AZ*partner</code> that we provided to them which then loads https://appconfigs.disney-plus.net/dmgz/qa/transformations/amazon.json, you don't need to be a genius to try and load https://appconfigs.disney-plus.net/dmgz/qa/transformations/all.json.</p> <pre><code>{\n  \"dssDEVpass*\" : \"all\",\n  \"DisneyPartner!\" : \"partner\",\n  \"qe,Access\" : \"qe\",\n  \"D+G*partner\" : \"google\",\n  \"DS+S*partner\" : \"sony\",\n  \"DS+AZ*partner\" : \"amazon\",\n  \"DS+SHCAY*partner\" : \"sharp\",\n  \"DS+T*partner\" : \"hisense\",\n  \"DS+MT*partner\" : \"mediatek\"\n}\n</code></pre> <p>Additionally it is quite cumbersome to manage partner configs at this point since we copy-paste transforms over from one partner to the other when needed.</p>"},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/#what","title":"What?","text":"<p>This RFC proposes to introduce a script that helps with the management and security of Jarvis transforms.</p>"},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/#how","title":"How?","text":"<p>Similar to the changes that were recently done to the prod configs to prevent us to have to edit many files for dictionary pins, we can apply the same for Jarvis transforms. See the original PR here for more detail on that.</p> <p>That way, instead of managing many partner files we could have a central list of transforms and for each transform make it possible to define what partners it should be available for.</p> <p>We can increase the security by, instead of writing the output to a file that has a plain name (like <code>amazon.json</code>) the file name could be something like a <code>sha256</code> hash of the passcode. In the \"partner source config\" we'd define partner names and their matching passcodes and the script that generates outputs writes the output for each partner.</p> <p>The Jarvis app can also apply the same hash function to the passcode that the partner entered when constructing the url to load. If the passcode is wrong the file will not exist and the CDN will respond with a 403 response.</p> <p>An example of the source file could be as follows. Note that we could also decide to create multiple source files and group transforms per feature/workstream but we can start with a single one.</p> <pre><code>{\n  \"variants\": [\n    {\"name\": \"internal\", \"passcode\": \"t34gbf%\"},\n    {\"name\": \"amazon\", \"passcode\": \"dab35\"}\n  ],\n  \"transformGroups\":[\n    {\n      \"name\": \"Playback\",\n      \"transforms\": [\n        {\n          \"name\": \"Enable Atmos\",\n          \"variants\": [\"all\"],\n          \"path\": \"playbackCapabilities.atmos\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"Enable Dolby Vision\",\n          \"variants\": [\"internal\"],\n          \"path\": \"playbackCapabilities.hdrTypes\",\n          \"value\": [\"dolbyVision\"]\n        },\n        {\n          \"name\": \"Enable HDR10\",\n          \"variants\": [\"amazon\"],\n          \"path\": \"playbackCapabilities.hdrTypes\",\n          \"value\": [\"HDR10\"]\n        }\n      ]\n    }\n  ] \n}\n</code></pre> <p>The script would produce two different files in <code>outputs/transformations</code>. One for dev builds (we'd hardcode the password in those builds) and one for Amazon. The dev variant would have the Dolby Vision and the Dolby Atmos toggle, while the one for Amazon would have the Atmos and HDR10 toggle.</p>"},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/#impact","title":"Impact","text":"<ul> <li>This would impact all engineers on the team since everyone adds jarvis transforms. With likely a bit of extra impact on Team Bender for the partner stuff.</li> </ul>"},{"location":"administrative/rfc/2022_06_20_jarvis_transform_management/#additional-notes","title":"Additional notes","text":"<ul> <li>To avoid bloating the UI we could also include a the application packageName in the hash. That way we could specify that a transform is only relevant for D+, S+ and/or Hulu.</li> <li>Since the urls of transforms now become hash values it would be nice to have a bookmarkable \"index\" page which links to all the generated files, including the name of the variant to make it easy to find, for example, the transform file that is served for Amazon.</li> <li>Maybe it would be nice to not have to specify <code>\"variants\": [\"internal\"]</code> if a transform is only intended for internal use and make that the default if no variants array is specified.</li> <li>Considering that this is a breaking change we should try to start off in a backward compatible manner and ensure that partners are notified of the upcoming change before we make it breaking.</li> <li>We could likely use the deep link functionality of transforms to direct the user to a new place to download the updated Jarvis app</li> </ul>"},{"location":"administrative/rfc/2022_07_27_project_akela/","title":"Project Akela RFC","text":"<p>Just like in the Jungle Book, [Akela] is here to help you make important decisions.</p> <p></p>"},{"location":"administrative/rfc/2022_07_27_project_akela/#why","title":"Why?","text":"<p>At this point we have a lot of <code>if (buildInfo.project == DISNEY)</code> type of checks, and although most of them are within a feature's configuration file, it is not enforced.</p> <p>This can become very tricky with New Hulu coming up these kinds of checks outside of config defaults should be considered an anti-pattern.</p> <p>Additionally the way that we currently provide configuration defaults are quite varying across the board, it would be nice to make that more of a recognizable pattern and standardize what kind of inputs result in a specific configuration value to be used.</p>"},{"location":"administrative/rfc/2022_07_27_project_akela/#what","title":"What?","text":"<p>This RFC proposes introducing a new API that simplifies the decision process of configuration defaults and eventually makes it impossible to make decisions based on the \"current app\" or \"current device\" without that value being overridable through the remote config.</p> <p>The general idea is to introduce a mechanism that allows you to provide values if certain conditions are true, and ultimately come up with a default value if none of them are true. The actual evaluation of whether the condition is true is considered an implementation detail of <code>Akela</code>.</p> <p>An example usage of this API could be as follows:</p> <pre><code>class AtmosConfig(private val akela: Akela) {\n    fun isAtmosEnabled(): Boolean {\n        return akela.seekAdviceOn&lt;Boolean&gt;(\"playbackCapabilities\", \"atmosEnabled\")\n            .defaultWhen(isRoProductDeviceOneOf(setOf(\"deviceA\", \"deviceB\"))) { true }\n            .defaultWhen(isTv and isAmazon) { true }\n            .defaultWhen(isRoProductDevice(\"darcy\") and isBuildTimeAtLeast(1579314970000L)) { true }\n            .defaultWhen(isRoProductDevice(\"foster\") and isBuildTimeAtLeast(1579312304000L)) { true }\n            .getOrDefault(false)\n    }\n}\n</code></pre> <p>The <code>defaultWhen</code> method takes two arguments, the first is an expression and the second one is a value provider.</p> <p>At runtime, when the method is called it would evaluate expressions in the order that they were added and when one is evaluated to <code>true</code> the method will return that value.</p>"},{"location":"administrative/rfc/2022_07_27_project_akela/#per-projectmarketplatform-defaults","title":"Per Project/Market/Platform defaults","text":"<p>The approach above does still allow something very similar to the current <code>if (DISNEY) .. else ...</code> issue logic like you can see below.</p> <pre><code>val groupWatchEnabled: Boolean\n    get() = akela.seekAdviceOn&lt;Boolean&gt;(\"groupWatch\", \"enabled\")\n        .defaultWhen(isDisney) { true }\n        .getOrDefault(false)\n</code></pre> <p>However, the major difference is that (eventually) all decisions that are based on the \"targeted app\" can be overridden in config for another app.</p> <p>Additionally, for cases where we are sure that different values need to be used for each of the different target apps we can define a convenience method that would require a lambda to be specified for each partner.</p>"},{"location":"administrative/rfc/2022_07_27_project_akela/#how","title":"How?","text":""},{"location":"administrative/rfc/2022_07_27_project_akela/#public-api","title":"Public API","text":"<p>The proposed public API would consist of an API to build expressions and an API that builds \"Advice\". An example of the latter one, that supports the usages mentioned above, could be something like the interface below.</p> <pre><code>interface Akela {\n\n    fun &lt;T&gt; seekAdviceOn(featureGroup: String, topic: String): AdviceBuilder&lt;T&gt;\n\n    interface AdviceBuilder&lt;T&gt; {\n\n        fun defaultWhen(expression: AkelaExpression, value: AdviceProvider&lt;T&gt;): AdviceBuilder&lt;T&gt;\n\n        fun getOrDefault(defaultProvider: AdviceProvider&lt;T&gt;): T\n\n        fun getOrDefault(defaultValue: T): T\n    }\n\n    fun interface AdviceProvider&lt;T&gt; {\n        fun get(): T\n    }\n}\n</code></pre>"},{"location":"administrative/rfc/2022_07_27_project_akela/#evaluation-of-expressions","title":"Evaluation of expressions","text":"<p>For the merging of remote config overrides we already build a set of tags that allow targeting specific device, this API design is using the same principle on that to be able to unify the way that we do remote override and local defaults.</p> <p>Using <code>operator</code>and <code>infix</code> functions in Kotlin we can write the expressions used above using the following APIs.</p> <pre><code>fun interface AkelaExpression {\n    fun evaluate(tags: Set&lt;String&gt;): Boolean\n}\n\ninfix fun AkelaExpression.or(other: AkelaExpression) = AkelaExpression { this@or.evaluate(it) || other.evaluate(it) }\n\ninfix fun AkelaExpression.and(other: AkelaExpression) = AkelaExpression { this@and.evaluate(it) &amp;&amp; other.evaluate(it) }\n\noperator fun AkelaExpression.not() = AkelaExpression { !this@not.evaluate(it) }\n\ndata class TagExpression(val value: String) : AkelaExpression {\n    override fun evaluate(tags: Set&lt;String&gt;): Boolean = tags.contains(value)\n}\n\nval isGoogle = TagExpression(value = \"MARKET_GOOGLE\")\nval isAmazon = TagExpression(value = \"MARKET_AMAZON\")\n\nval isDisney = TagExpression(value = \"PROJECT_DISNEY\")\nval isHulu = TagExpression(value = \"PROJECT_HULU\")\nval isStar = TagExpression(value = \"PROJECT_STAR\")\n\nval isPartner = TagExpression(value = \"PARTNER_DEVICE\")\nfun isPartner(name: String) = TagExpression(\"PARTNER_$name\")\n\nfun isPurchaseCountry(code: String) = TagExpression(\"PURCHASE_COUNTRY_$code\")\n</code></pre> <p>The implementation of the <code>Akela</code> interface will be the one that knows about the current session/device tags and invoke the <code>AkelaExpression.evaluate(Set&lt;String&gt;): Boolean</code> method to determine if a default value is applicable.</p>"},{"location":"administrative/rfc/2022_07_27_project_akela/#impact","title":"Impact","text":"<p>If we're going forward with this, the <code>AppConfigMap</code> interface and a bunch of fields on <code>BuildConfig</code> and <code>DeviceInfo</code>would be deprecated so replacing all of those invocations will be quite a lot of work. On the other hand this new API should be easily usable in new features/code.</p>"},{"location":"administrative/rfc/2022_07_28_new_type_safe_dictionaries_api/","title":"Access strings through a new type-safe Dictionaries API","text":""},{"location":"administrative/rfc/2022_07_28_new_type_safe_dictionaries_api/#why","title":"Why?","text":"<p>There are a few things about our current dictionaries approach related to how we retrieve string values that can be improved.</p> <ul> <li> <p>We currently use string resources generated by the DictionaryResourceKeysGenerator. This causes dictionaries in   Disney+ to contain strings that are not present in the Star+ or Hulu and vice versa, leading to having some string   keys removed or missing and hence, confusion.</p> </li> <li> <p>We don't have a single entry point for obtaining a string which sometimes causes unexpected behaviour or errors in the   app. We currently have <code>optionalString</code>, <code>string</code>, <code>withResourceKey().string()</code>   or <code>withResourceKey().optionalString()</code>.</p> </li> <li> <p>It is error-prone since it allows us to request a string by passing a key in the form of a string with as many   replacements as we want. Errors while performing this might not be easy to notice and changes across dictionaries can   go unseen.</p> </li> </ul>"},{"location":"administrative/rfc/2022_07_28_new_type_safe_dictionaries_api/#what","title":"What?","text":"<p>The main idea behind this solution is to create new type-safe API exposing a <code>Dictionaries</code> class that will provide direct access to string values without having to pass keys as resourceIds or strings. This direct access will happen by exposing either read-only variables or functions to request for the values of these keys, depending on whether the value of that key requires runtime replacements or not. The functions will those replacements already as parameters in their signature.</p> <p>All of this, also gives us the possibility of referencing dictionary keys of different apps (D+/S+/Hulu) and keys that are only available on a limited set of apps/platforms in a safe way.</p> <p>Finally, with some lint checks and custom attributes, we could get rid of the generated string resources for dictionary keys completely which gives us:</p> <ol> <li>Less confusion</li> <li>Faster Builds</li> <li>Smaller APKs</li> </ol> <p>These lint checks and attributes will allow us to reference strings directly from xml files safely by giving error/warning/info highlights that will help developers to know:</p> <ol> <li>When a string key - dictionary combination is non-existent giving the developer more info on which dictionary    actually contains that string key (Error)</li> <li>When a string key doesn't exist in any app dictionary (Error)</li> <li>When something is missing (namespace declaration or some mandatory attribute) (Error)</li> <li>When a key that is being referenced through xml contains replacements (Warning)</li> </ol> <p>An example of how the usage of this solution would look like vs what we use to have could be:</p> <ul> <li>Before (without replacements)</li> </ul> <pre><code>return when {\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        stringDictionary.string(R.string.promo_imax_header),\n        \"...\"\n    )\n}\n\n// OR\n\nreturn when {\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        withResourceKey(\"application\").string(\"promo_imax_header\"),\n        \"...\"\n    )\n}\n</code></pre> <ul> <li>After (without replacements)</li> </ul> <pre><code>return when {\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        dictionaries.application.promo_imax_header,\n        \"...\"\n    )\n}\n</code></pre> <ul> <li>Before (with replacements)</li> </ul> <pre><code>return when {\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        stringDictionary.string(\n            R.string.promo_imax_header,\n            mapOf(\"someReplacementKey\" to \"someReplacementValue\")\n        ),\n        \"...\"\n    )\n}\n\n// OR\n\nreturn when {\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        withResourceKey(\"application\").string(\n            \"promo_imax_header\",\n            mapOf(\"someReplacementKey\" to \"someReplacementValue\")\n        ),\n        \"...\"\n    )\n}\n</code></pre> <ul> <li>After (with replacements)</li> </ul> <pre><code>return when {\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        dictionaries.application.promo_imax_header(someReplacementKey = \"someReplacementValue\"),\n        \"...\"\n    )\n}\n</code></pre>"},{"location":"administrative/rfc/2022_07_28_new_type_safe_dictionaries_api/#how","title":"How?","text":"<p>The solution proposed to fix this issues consists in different parts:</p> <p>1- Get rid of our current <code>DictionaryResourceKeysGenerator</code> hence also getting rid of all our <code>...dictionary_keys.xml</code> files. Replace this for a new kotlin script in charge of retrieving and saving the dictionary entries for each one of our dictionaries merging all the project and platforms into single files. For example (<code>application_dictionary_entries.json</code>), an idea for this is:</p> <pre><code>[\n  {\n    \"metadata_series_detail\": {\n      \"placeholders\": [\n        \"time\",\n        \"hours\"\n      ],\n      \"partners\": [\n        \"disney\",\n        \"star\",\n        \"hulu\"\n      ],\n      \"platforms\": [\n        \"android-tv\",\n        \"android\"\n      ]\n    },\n    \"btn_retry\": {\n      \"...\": \"...\"\n    },\n    \"...\": {\n      \"...\": \"...\"\n    }\n  }\n]\n</code></pre> <p>This way we will have a single source of truth of all the keys for a certain dictionary with their respective replacements needed to form the actual string without any distinction between projects (hulu, disney, star) or device (tv, mobile).</p> <p>2- Introduce a new Dictionaries interface and AllDictionaries class which will hold instances of each one of our dictionaries (application, sdk-errors, etc...). This dictionaries will have a <code>getString</code> method that will at the end use our LazyDictionary instances to retrieve the values. For example:</p> <pre><code>interface Dictionaries {\n\n    fun interface Dictionary {\n        fun getString(key: String, replacements: Map&lt;String, Any?&gt;): String\n    }\n\n    val accessibility: AccessibilityDictionary\n    val application: ApplicationDictionary\n    // etc...\n\n    fun interface AccessibilityDictionary : Dictionary\n    fun interface ApplicationDictionary : Dictionary\n    // etc...\n}\n</code></pre> <pre><code>class AllDictionaries @Inject constructor(\n    private val dictionaryLoadingCheck: DictionaryLoadingCheck,\n    private val stateProvider: DictionariesState.Provider,\n    private val resources: Resources,\n    private val sentryWrapper: SentryWrapper\n) : Dictionaries {\n\n    private val lazyAccessibility: LazyDictionaryV3 = createLazyDictionary(\"accessibility\")\n    private val lazyApplication: LazyDictionaryV3 = createLazyDictionary(\"application\")\n    // etc...  \n\n    override val accessibility = Dictionaries.AccessibilityDictionary { key, replacements -&gt;\n        lazyAccessibility.string(key, replacements)\n    }\n\n    override val application = Dictionaries.ApplicationDictionary { key, replacements -&gt;\n        lazyApplication.string(key, replacements)\n    }\n    // etc...\n\n    private fun createLazyDictionary(resourceKey: String) {\n        return LazyDictionaryV3(\n            stateProvider,\n            dictionaryLoadingCheck,\n            FallbackDictionary(resources),\n            resourceKey,\n            sentryWrapper,\n            resources\n        )\n    }\n}\n</code></pre> <p>3- Create a new gradle plugin+task that will read from our dictionaries json files and generate kotlin files containing extension functions/val that will resolve into the actual strings. This will make the access to strings across the app easier and intuitive. The return type will be a String for those keys that are present for every app, and optional for those that appear in certain apps. For example, one of this generated files could look like:</p> <pre><code>val Dictionaries.ApplicationDictionary.account_change_password_header: String\n    get() = getString(\"account_change_password_header\", emptyMap())\n\nval Dictionaries.ApplicationDictionary.account_create_password_title: String\n    get() = getString(\"account_create_password_title\", emptyMap())\n\n/**\n * account_createpassword_title key is only present in: Hulu and Star\n */\nval Dictionaries.ApplicationDictionary.account_createpassword_title: String?\n    get() = getString(\"account_createpassword_title\", emptyMap())\n\nval Dictionaries.ApplicationDictionary.account_details: String\n    get() = getString(\"account_details\", emptyMap())\n\n/**\n * account_disney_visa_rewards_offer key is only present in: Disney\n */\nfun Dictionaries.ApplicationDictionary.account_disney_visa_rewards_offer(\n    DATE: String,\n    PRICE_DURATION: String,\n): String? = getString(\n    \"account_disney_visa_rewards_offer\", mapOf(\n        \"DATE\" to DATE,\n        \"PRICE/DURATION\" to PRICE_DURATION,\n    )\n)\n\nval Dictionaries.ApplicationDictionary.account_email_placeholder: String\n    get() = getString(\"account_email_placeholder\", emptyMap())\n\nfun Dictionaries.ApplicationDictionary.account_free_trial_duration(\n    DATE: String,\n) = getString(\n    \"account_free_trial_duration\", mapOf(\n        \"DATE\" to DATE,\n    )\n)\n</code></pre> <p>Using the kotlin <code>inline</code> modifier for the previous generated properties and function has 1 pros and a few neutral considerations:</p> <ul> <li>Pros:<ul> <li>Since the compiler will get rid of these and replace their calls with the actual code on site, it will make it   harder for outer people to sneak-peak newly introduced dictionary keys (preventing them to discover new features).</li> </ul> </li> <li>Neutral:<ul> <li>There might be only a minimal runtime benefit on inlining these since we are not using lambdas.</li> <li>Using inline functions and/or properties might make the final generated code to grow bigger. In our case since we   don't repeat the usage of keys too much across our codebase, it shouldn't be an issue.</li> </ul> </li> <li>Cons:<ul> <li>No actual big cons for our codebase.</li> </ul> </li> </ul> <p>To sum up this step of the <code>how</code>, a usage example of these auto-generated keys (If we take the <code>DetailPromoLabelPresenter</code> <code>getPromoLabel</code> method return statement) would look like the following:</p> <p>Without replacements:</p> <pre><code>return when {\n    promoLabelTitle != null -&gt;\n        detailPromoLabelItemFactory.create(promoLabelTitle, promoMessage.promoLabelDisclaimer)\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        dictionaries.application.promo_imax_header,\n        \"...\"\n    )\n    else -&gt; null\n}\n</code></pre> <p>With replacements:</p> <pre><code>return when {\n    promoLabelTitle != null -&gt;\n        detailPromoLabelItemFactory.create(promoLabelTitle, promoMessage.promoLabelDisclaimer)\n    promoLabelState.isImaxAvailable -&gt; detailPromoLabelItemFactory.create(\n        dictionaries.application.promo_imax_header(\"fake replacement\", 2),\n        \"...\"\n    )\n    else -&gt; null\n}\n</code></pre> <p>4- Currently we use a custom implementation of the BaseActivity LayoutInflaterWrapper in order to get the correct dictionary values from the keys used in our xml layout files. This happens by getting the text attribute values (for android:text, app:hint or app:queryHint for example) from different View types (TextView, SearchView, ImageView, etc...) and using our current dictionary implementation to retrieve them. It looks like this:</p> <pre><code>private fun applyLayoutAttributes(\n    context: Context,\n    attrs: AttributeSet,\n    view: View\n) {\n    when (view) {\n        is AppCompatImageView -&gt; applyImageViewAttributes(context, attrs, view)\n        is SearchView -&gt; context.withStyledAttributes(attrs, searchViewAttributes) {\n            val dictionary = getDictionary(typedArray = this, index = 1)\n            val resourceId = getResourceId(queryHintAttribute, defaultAttributeValue)\n            if (resourceId != defaultAttributeValue) {\n                view.queryHint = dictionary.string(resourceId)\n            }\n        }\n        is StandardButton -&gt; context.withStyledAttributes(attrs, standardButtonAttributes) {\n            val dictionary = getDictionary(typedArray = this, index = 2)\n            val textResourceId = getResourceId(0, defaultAttributeValue)\n            if (textResourceId != defaultAttributeValue) {\n                view.text = dictionary.string(textResourceId)\n            }\n            val contentDescriptionId = getResourceId(1, defaultAttributeValue)\n            if (contentDescriptionId != defaultAttributeValue) {\n                view.contentDescription = dictionary.string(contentDescriptionId)\n            }\n        }\n        \"...\" -&gt; {}\n    }\n}\n</code></pre> <p>In order to make our new approach to work with this, we need to:</p> <ul> <li>adapt our current <code>ConfigStringsLayoutInflater</code> and xml usage of strings by adding 2 new attributes to a   new<code>dictionaries</code> namespace: <code>dictionary</code> and <code>dictionaryKey</code>, discouraging the use of the normal text attributes.</li> <li>Start consuming those attributes instead of the old ones within our <code>ConfigStringsLayoutInflater</code> to retrieve strings   with the new <code>dictionaries</code> API.</li> </ul> <p>This is how it would look like in a xml:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          xmlns:dictionaries=\"http://schemas.android.com/apk/res/android\"\n          android:id=\"@+id/about_section_title\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"40dp\"\n          android:gravity=\"start|center_vertical\"\n          dictionaries:dictionary=\"application\"\n          dictionaries:dictionaryKey=\"button_blabla\"\n          style=\"@style/TypeRamp.BodyCopy.Headline\"/&gt;\n</code></pre> <p>5- Add the Lint checks previously mentioned in the <code>What</code> section.</p> <p>6- So far the <code>how</code> section has taking into account our current string placeholder implementation (That being: <code>${someReplacement}</code>). Considering the fact that ICU will soon be released, we need to adapt all of this approach to consider the ICU plural form and ICU placeholders instead of our legacy ones. That means that we will need to start supporting icu placeholders: <code>{someReplacement}</code>, and plural forms: <code>The film won {n, plural, =0 {no awards} one {# award} other {# awards}}</code></p> <p>7- Distribute the workload of migrating from the legacy way of retrieving strings to this new one across the feature teams.</p>"},{"location":"administrative/rfc/2022_07_28_new_type_safe_dictionaries_api/#impact","title":"Impact","text":"<p>This will impact all the parts of our app that are currently using our dictionaries. It's good to clarify that the impact of this approach is low in the sense that it can coexist with our previous approach, not forcing developers to make big breaking changes in a short period.</p>"},{"location":"administrative/rfc/2022_07_28_new_type_safe_dictionaries_api/#more-infoinsights","title":"More info/insights","text":"<p>A draft PR has already been created for this, feel free to check it out. It is not definitive nor final (it was barely a first approach) but it can also give some more informative and clear view of the idea behind this proposal</p>"},{"location":"administrative/rfc/build_benchmarks_ci/","title":"Run Build Benchmarks on CI","text":""},{"location":"administrative/rfc/build_benchmarks_ci/#why","title":"Why?","text":"<ul> <li>Build benchmarks are an important tool to keep build times as low as possible. When doing a change that could impact build times, we want to know what the impact is.</li> <li>Benchmarks are problematic to run locally. They take up your local machine's resources for several hours, making it impossible to do other development work while the benchmark is running. By moving the benchmarks to CI, developers are free to continue with other work.</li> <li>We hope this will lower the barrier to run build benchmarks. This should improve the rate at which we're able to upgrade libraries/dependencies.</li> </ul>"},{"location":"administrative/rfc/build_benchmarks_ci/#what","title":"What?","text":"<p>Add a GitHub action workflow for that runs the existing build benchmark scenarios When adding the <code>benchmark</code> label on a PR.</p>"},{"location":"administrative/rfc/build_benchmarks_ci/#how","title":"How?","text":"<ul> <li>Request GH actions runners for the Android repository.</li> <li>Add a workflow that runs the benchmark on labeling.</li> <li>Output the result of the benchmark as a PR comment.</li> <li>Add documentation on how to run the benchmarks on CI.</li> </ul>"},{"location":"administrative/rfc/build_benchmarks_ci/#impact","title":"Impact","text":"<p>This change should not impact the app or any existing proces. The option of running local benchmarks will still exist.</p>"},{"location":"administrative/rfc/build_logic_revamp/","title":"Gradle build logic revamp","text":""},{"location":"administrative/rfc/build_logic_revamp/#why","title":"Why?","text":""},{"location":"administrative/rfc/build_logic_revamp/#trigger","title":"Trigger","text":"<p>We love Kotlin, it's a popular language and most folks working with Android would rather use Kotlin as opposed to Java or Groovy. It's fair to assume that the same sentiment extends to people working on build logic and scripts as well.</p> <p>An initiative the tech council is working on is to start using Kotlin in build logic: ANDROID-3589</p> <p>We currently have build logic scattered between couple of places and couple of languages:</p> <ul> <li>Build script in Groovy that mainly live in our <code>gradle</code> top level directory in the project</li> <li>Custom Gradle plugins and tasks that mainly live in <code>buildSrc</code> that is a mix of Groovy/Java</li> </ul> <p>The main concern with starting to use Kotlin in those build scripts is the performance hit that comes from compiling Kotlin there, you can refer to: Github issue for comparison in performance</p>"},{"location":"administrative/rfc/build_logic_revamp/#problem-statement","title":"Problem statement","text":"<p>While investigating the initiative, I came to the conclusion that we should re-adjust our definition of the problem to more accurately capture its essence.</p> <ul> <li>Gradle scripts are very powerful which can lead to misuse and complications to the build logic</li> <li>Depending on Gradle scripting leads to degrading performance:</li> <li>The more scripts that has to be parsed and executed at runtime, the slower the build and the more demanding it becomes</li> <li>Kotlin will only make this much worse</li> <li>Decoupling build logic from our project, just like we do with any feature module</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#what","title":"What?","text":"<p>The solution I am proposing has a very simple idea at its core.</p> <p>Move away from scripting as much as possible in our build logic.</p> <p>High level overview of the solution:</p> <ul> <li>Move all of our build logic to custom Gradle plugins, tasks and extensions that can be written in Kotlin</li> <li>Centralize our build logic in an external project that can be consumed by other projects (mainly our app). This project will be consumed as a dependency rather than just being thrown on the compilation path like buildSrc.</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#how-does-solve-the-problem","title":"How does solve the problem?","text":""},{"location":"administrative/rfc/build_logic_revamp/#kotlin","title":"Kotlin","text":"<ul> <li>We can use Kotlin everywhere</li> <li>We can write our custom plugins, tasks and extensions as pure Kotlin classes in our new build logic project. Even better, we can write tests for them</li> <li>We can also write Kotlin in all of the Gradle scripts. In the build logic project and all other projects</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#performance","title":"Performance","text":"<p>Build logic project</p> <ul> <li>The performance of Kotlin DSL in this project might be a bit slower than Groovy's</li> <li>This will only impact people working on build logic and won't affect any developers working on the main app modules</li> <li>However, this project will be very lightweight, so the performance difference will be almost negligible</li> <li>If this ever becomes a problem, we can split up the build logic project to multiple sub-project</li> <li>Overall, this will a huge improvement for people working on build logic. Since they will be working with a much smaller project compared to the main app project</li> </ul> <p>Main app modules</p> <ul> <li>Those modules would consume the build logic module as a binary dependency</li> <li>The consumption would be much faster than buildSrc</li> <li>The scripts of those project would be written in Kotlin but since those scripts would be very lightweight and simple it would be very performant. Since the huge chunks of complexity has been moved out of those scripts</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#how","title":"How?","text":"<p>In this section, I will try to provide a high level plan for how this can be executed; however, I won't be diving deep in implementation details unless it's needed.</p>"},{"location":"administrative/rfc/build_logic_revamp/#phase-1-setup-build-logic-project","title":"Phase 1: Setup build logic project","text":"<ul> <li>Create module(s) for build logic project. This project can still live inside our Dmgz repo but will be a standalone project</li> <li>Publish this module to internal artifactory</li> <li>Consume this module as an included build. This would be consumed as artifact; however we can enable an option for it to be consumed directly from the project only to enable build logic maintainers to quickly test their work</li> <li>At this point, it might as well be empty, but the infra would be there</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#phase-2-gathering-requirements","title":"Phase 2: Gathering requirements","text":"<ul> <li>Investigate and list all of the Gradle functionalities we need. Those can include functionalities provided by our included Gradle scripts. This also includes things like Java lang config...etc</li> <li>This phase allows us to go in parallel mode</li> <li>First path is to start with migrating logic to an external module rather than buildSrc</li> <li>Second path is to start creating new setup with plugins and extensions to lay the foundation of Kotlin DSL usage in app modules</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#phase-2-a-simple-gradle-migration","title":"Phase 2-A: Simple Gradle migration","text":"<ul> <li>Just moving all of our common Gradle setup to the previously created external build module</li> <li>As little changes as possible, still in Groovy bs as convention plugins</li> <li>Heavily use this setup for testing performance impact of using included builds vs <code>buildSrc</code></li> <li>Find gaps and problems with approach vs <code>buildSrc</code></li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#phase-2-b-design-new-gradle-api","title":"Phase 2-B: Design new Gradle API","text":"<ul> <li>Based on the input gathered in phase 2, we can design a high level API for our build logic</li> <li>Our API design needs to cover all the functionality we need as either a plugin or extension</li> <li>This design will be specific with guidelines for developers on how to configure their modules</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#phase-3-removing-buildsrc","title":"Phase 3: Removing <code>buildSrc</code>","text":"<ul> <li>After phase 2-A is complete</li> <li>At this point we will be ready to remove <code>buildSrc</code> completely</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#phase-4-implement-the-new-gradle-api","title":"Phase 4: Implement the new Gradle API","text":"<ul> <li>Here we implement a concrete API that was planned in phase 2-A</li> <li>This is when it's appropriate to implement this logic in Kotlin with proper testing</li> <li>This API becomes the main gate for developers to consume Gradle build logic</li> <li>This will be mainly a handful of Gradle convention plugins and custom extensions that allow developers to easily configure their modules</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#phase-5-migrate-app-and-feature-modules-to-new-gradle-api","title":"Phase 5: Migrate app and feature modules to new Gradle API","text":"<ul> <li>Migrate all app and feature modules to new Gradle API</li> <li>Migrate modules to use Kotlin DSL instead of Groovy</li> </ul>"},{"location":"administrative/rfc/build_logic_revamp/#impact","title":"Impact","text":"<p>The overall project is likely to touch every single module we have by the time it is completed.</p> <ul> <li>The incremental nature of the plan will allow us to evaluate and test our progress</li> <li>The nature of the plan allows us to continue to work and evolve our project naturally without the need for any freezes</li> <li>The nature of the plan leaves the project in a workable/better state at each phase which will allow us to spread the execution of the plan to different instants of time if needed. No need for this to happen immediately one after the other</li> </ul>"},{"location":"administrative/rfc/collection_architecture/","title":"Collection Architecture Refactor","text":""},{"location":"administrative/rfc/collection_architecture/#why","title":"Why?","text":"<p>The current implementation of collections is based on the <code>CollectionViewModel</code> which extends the <code>ReactiveViewModel</code>. The usage of the <code>ReactiveViewModel</code> does not fit in the current UI Architecture approach anymore. This proposal is to create a new <code>CollectionViewModel</code> implementation that extends the <code>androidx.lifecycle.ViewModel</code> and provides a state stream.</p> <p>The current setup works with huge master <code>AbstractCollectionHiltFragment</code> &amp; <code>CollectionFragmentHelper</code> class that contains most of the UI logic. This is something that doesn't fit in the current UI Architecture anymore and should be moved to smaller presenter implementations with each its own responsibility.</p> <p>Another problem of the current setup is related to the nested collection approach which is used for movie, series, sport, league &amp; team collection pages. The UI for this collection page is based on the available screen width. So for mobile, there is a button filter on top of the page to select the desired sub collection, while for the tablet &amp; STB a screen width tab bar is used to select a sub collection. It has been set up as 2 different fragments because it didn't completely work with the current UI architecture. The problem here is that the user might end up with the wrong fragment after resizing the app window on for example FreeFrom or Chromebook devices.</p>"},{"location":"administrative/rfc/collection_architecture/#what","title":"What?","text":"<p>This proposal is based on the new UI Architecture that is described here.</p>"},{"location":"administrative/rfc/collection_architecture/#feature-flag","title":"Feature flag","text":"<p>There will be a feature flag to enable the new architecture on fragment level. That allows us to work on the refactor in different teams (or even a pair of programmers).</p> <p>Sample code</p> <pre><code>class CollectionArchitectureRefactorConfig() {\n\n    private val enabledMap = mapOf(\n        \"brand\" to true,\n        \"espn\" to false,\n        \"home\" to true,\n    )\n\n    fun isEnabled(featureName: String): Boolean = enabledMap.getOrDefault(featureName, false)\n}\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#collectionviewmodel","title":"CollectionViewModel","text":"<p>Implementation of <code>androidx.lifecycle.ViewModel</code> that is responsible for managing the data for the <code>CollectionPresenter</code>.</p> <p>Responsibilities</p> <ul> <li>Observing state stream of <code>CollectionRepository</code> for the main collection and an additional state stream of <code>CollectionRepository</code> for the selected sub collection.<ul> <li>Subscribe to <code>CollectionContentInteractor.subCollectionIdentifierSubject</code> to get notified when the user selects a different <code>CollectionAsset</code> by clicking on either a tab in the tab layout or filter button to load a different sub collection.</li> <li>Instances of the <code>CollectionRepository</code> should be obtained from the <code>RepositoryHolder</code>.  </li> </ul> </li> <li>Combining the main collection and optional sub collection data and map it to <code>CollectionViewModel.State</code>.</li> <li>Handle errors with <code>ErrorMapper</code>?.</li> </ul> <p>Sample code</p> <pre><code>/**\n * @property collection is the main [Collection].\n * @property subCollectionIdentifier is optional the [CollectionIdentifier] in case of a sub\n * collection is available.\n * @property subCollection is the optional [Collection] in case of a sub collection is available.\n * @property isOffline\n * @property isLoading\n * @property error\n */\ndata class State(\n    val collection: Collection,\n    val subCollection: Collection?,\n    val isOffline: Boolean,\n    val isLoading: Boolean,\n    val error: Throwable?,\n    val configuration: Configuration,\n) {\n    val subCollectionIdentifier: CollectionIdentifier?\n        get() = subCollection?.collectionGroup?.collectionIdentifier\n}\n\n\n/**\n * Configurable options for displaying the collection.\n */\ndata class Configuration(\n    val displayContentRestrictedItemWhenEmpty: Boolean // This could be based on a new AppConfig property instead of based on checking Fragment type. \n    // Add any other relevant configurations for displaying the collection.\n)\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#collectionrepository","title":"CollectionRepository","text":"<p>The main responsibility of the <code>CollectionRepository</code> is to provide the <code>Collection</code> where <code>ContentSets</code> and <code>LiveNow</code> data have been updated.</p> <p>Responsibilities</p> <ul> <li>It provides a state stream that combines the data from <code>DehydratedCollectionRepository</code>, <code>ContentSetRepository</code> and <code>LiveNowStateProvider</code>.<ul> <li>Instances of the <code>DehydratedCollectionRepository</code> and <code>ContentSetRepository</code> should be obtained from the <code>RepositoryHolder</code>.</li> </ul> </li> <li>It emits a state with the <code>Collection</code> object where the <code>ContentSet</code>s and <code>LiveNow</code> data have been updated.<ul> <li>Each <code>Collection</code> should be updated with <code>ContentSet</code> data by calling the <code>Collection.copyWithContentSets</code> method.</li> <li>Each <code>ContentSet</code> in the <code>Collection</code> should be updated with <code>LiveNow</code> data by calling the <code>ContentSet.copyWithLiveNow</code> method.</li> </ul> </li> <li>Implement logic that resolves required ContentSets before emitting the State with the updated collection.<ul> <li>The requirements for content sets are specified by <code>CollectionRequestConfig</code> as <code>resolveSetTypes</code> and <code>numSetsRequired</code>. See the <code>shouldResolveSet</code> and <code>ensureMinimumNumberOfSets</code> methods in the legacy <code>CollectionsRepositoryImpl</code> implementation.</li> </ul> </li> <li>Implement <code>ContentSetAvailabilityHint</code> to hide ReferenceSets that most-likely have no content. This is to prevent the user from seeing placeholder for a split second. Note that the request to load the <code>ContentSet</code> should be made anyway to ensure there still is no content.<ul> <li>The filtering is currently done by the <code>CollectionItemsFactory</code> implementation.</li> <li>The additional request to load content for the hidden ReferenceSet is being done by the <code>loadNoContentExpectedSets</code> method in the <code>CollectionViewModel</code> implementation.</li> </ul> </li> <li>Implement logic to filter out <code>ContentSet</code>s when these are empty. This is currently done by the <code>CollectionItemsFactory</code> implementation.</li> <li>Observing collection / set invalidation streams of <code>CollectionInvalidator</code> class and obtain related repositories to request a refresh of data. Some examples:<ul> <li>After watching any content, the <code>ContinueWatchingSet</code> needs to be refreshed.</li> <li>After adding / removing assets from the watchlist, the <code>WatchlistSet</code> needs to be refreshed.</li> </ul> </li> </ul>"},{"location":"administrative/rfc/collection_architecture/#dehydratedcollectionrepository","title":"DehydratedCollectionRepository","text":"<p>The main responsibility of the <code>DehydratedCollectionRepository</code> is to provide the dehydrated <code>Collection</code> for given <code>collectionIdentifier</code>. Unsupported sets will be filtered out and style / type overrides will be applied to the collection.</p> <p>Responsibilities</p> <ul> <li>Providing a state stream with the dehydrated <code>Collection</code> for given <code>collectionIdentifier</code>.<ul> <li>Inject <code>CollectionsRemoteDataSource</code> to load the actual content. This class is responsible for selecting the desired request (<code>collectionBySlug</code> or <code>collectionByGroupId</code>).</li> </ul> </li> <li>Implement <code>ContainerStyleAllowList</code> to filters out unsupported containers before emitting <code>Collection</code> to the <code>CollectionRepository</code>.</li> <li>Implement <code>ContainerOverrides</code> to apply container style / type overrides before emitting <code>Collection</code> to the <code>CollectionRepository</code>.</li> <li>Implement <code>CollectionCache</code> to cache objects / requests.</li> </ul> <p>Sample code</p> <pre><code>interface DehydratedCollectionRepository {\n\n    val stateOnceAndStream: Flowable&lt;State&gt;\n\n    fun refresh(): Completable\n\n    data class State(\n        val collection: Collection,\n        val loading: Boolean = false,\n        val error: Throwable? = null,\n    )\n}\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#contentsetrepository","title":"ContentSetRepository","text":"<p>The <code>ContentSetRepository</code> is used to load the initial ContentSet for given <code>setId</code> and handle <code>ContentSet</code> pagination requests. It will provide a state stream that emits a state with latest <code>ContentSet</code>, <code>loading</code> and <code>error</code>. The <code>setId</code> will be used as constructor parameter, so there will be <code>ContentSetRepository</code> instance per <code>setId</code>.</p> <p>Responsibilities</p> <ul> <li>Responsible for loading <code>ContentSet</code> for initial load &amp; pagination request when supported for set.<ul> <li>Inject <code>RemoteContentSetDataSource</code> to load the actual content. This class is responsible for selecting the desired request (<code>getSet</code> or <code>getCWSet</code>).</li> <li>Previously the <code>Collection.isPagingSupported</code> was used to check if a pagination request is enabled for set. Since it's using the <code>Collection.contentClass</code> here and collection is not available here, this probably needs to be split up into collection and set level checks.</li> </ul> </li> </ul> <p>Sample code</p> <pre><code>interface ContentSetRepository {\n\n    val stateOnceAndStream: Flowable&lt;State&gt;\n\n    fun loadNextPage(): Completable\n\n    fun refresh(): Completable\n\n    data class State(\n        val contentSet: ContentSet?,\n        val loading: Boolean = false,\n        val error: Throwable? = null,\n    )\n}\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#repositoryholder","title":"RepositoryHolder","text":"<p>The <code>RepositoryHolder</code> is used to hold the <code>CollectionRepository</code>, <code>DehydratedCollectionRepository</code> and <code>ContentSetRepository</code> instances. It would be a scoped instance, the presenter/groupie items would be able to inject it, obtain the ContentSetRepository for the Set they are displaying, and call the methods like loadMore and refresh. This would decouple the Collections from Sets in the ViewModel/Domain layer already and you avoid the pass-through stuff where a CollectionRepository shares responsibility in loading more data of the Set.</p> <p>Responsibilities</p> <ul> <li>The repositories mentioned above should be accessible via a scoped RepositoryHolder instance.</li> <li>The <code>ContentSetRepository</code> instance could be obtained to request next page of set from presenter/groupie item layer.</li> </ul> <p>Sample code</p> <pre><code>interface RepositoryHolder {\n\n    fun getOrCreateContentSetRepository(setId: String): ContentSetRepository\n\n    fun getOrCreateCollectionRepository(collectionIdentifier: CollectionIdentifier): CollectionRepository\n}\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#featurexcollectionfragment","title":"FeatureXCollectionFragment","text":"<p>Implementation of <code>androidx.fragment.app.Fragment</code> that holds the reference to FeatureXCollectionLifecycleObserver.</p> <p>Responsibilities</p> <ul> <li>Register <code>FeatureXCollectionLifecycleObserver</code> to fragments view lifecycle.</li> <li>Capture <code>KeyEvent</code>s by implementing <code>OnKeyDownHandler</code> and pass <code>KeyEvent</code> to <code>CollectionViewFocusHelper</code>.</li> <li>Keep as clean as possible.</li> </ul> <p>Sample code</p> <pre><code>@AndroidEntryPoint\nclass SampleCollectionFragment : Fragment(R.layout.fragment_sample_collection) {\n\n    @Inject\n    lateinit var lifecycleObserver: Provider&lt;SampleCollectionLifecycleObserver&gt;\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewLifecycleOwner.lifecycle.addObserver(lifecycleObserver.get())\n    }\n}\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#featurexcollectionlifecycleobserver","title":"FeatureXCollectionLifecycleObserver","text":"<p>Implementation of <code>DefaultLifecycleObserver</code> that works as bridge between the <code>CollectionViewModel</code> and <code>FeeatureXPresenter</code> by passing state updates to the presenter.</p> <p>Responsibilities</p> <ul> <li>Responsible for observing the CollectionViewModel state and passing state to the feature FeatureXCollectionPresenter.</li> </ul> <p>Sample code</p> <pre><code>class SampleCollectionLifecycleObserver @Inject constructor(\n    private val viewModel: CollectionViewModel,\n    private val presenter: SampleCollectionPresenter,\n    private val rxSchedulers: RxSchedulers,\n) : DefaultLifecycleObserver {\n\n    override fun onStart(owner: LifecycleOwner) {\n        viewModel.stateOnceAndStream\n            .observeOn(rxSchedulers.mainThread)\n            .autoDisposable(owner.scope(Lifecycle.Event.ON_STOP))\n            .subscribe(\n                { state -&gt; presenter.bind(state) },\n                { Timber.e(it) }\n            )\n    }\n}\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#featurexcollectionpresenter","title":"FeatureXCollectionPresenter","text":"<p>Presenter class to handle view logic for this feature specifically.</p> <p>Responsibilities</p> <ul> <li>Create the <code>ViewBinding</code> reference for fragments layout.</li> <li>Create the <code>CollectionPresenter</code> instance with the required views and configurable options.</li> <li>Pass <code>CollectionViewModel.State</code> to a CollectionPresenter to handle common presenter logic.</li> <li>Process <code>CollectionViewModel.State</code> and handle view logic specifically to this feature.</li> </ul> <p>Sample code</p> <pre><code>class SampleCollectionPresenter @Inject constructor(\n    private val fragment: Fragment,\n    private val collectionPresenterFactory: CollectionPresenter.Factory,\n) {\n\n    private val binding = FragmentSampleCollectionBinding.bind(fragment.requireView())\n    private val collectionPresenter = collectionPresenterFactory.create(\n        fragment.viewLifecycleOwner,\n        CollectionPresenter.View(binding.collectionRecyclerView),\n        CollectionPresenter.Config(RecyclerViewSnapScrollHelper.SnapType.Center)\n    )\n\n    fun bind(state: CollectionViewModel.State) {\n        collectionPresenter.bind(state)\n        // Handle presenter logic specific to this feature here\n    }\n}\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#collectionpresenter","title":"CollectionPresenter","text":"<p>The <code>CollectionPresenter</code> is the presenter implementation that contains common presenter logic. The main responsibility is to map <code>CollectionViewModel.State</code> to Groupie items with CollectionItemsFactory and bind these to the adapter for the collection <code>RecyclerView</code>.</p> <p>To be more flexible in what needs to be handled in the <code>CollectionPresenter</code>, it's possible to provide specific <code>View</code>s via the <code>CollectionPresenter.View</code> data class and other configurable options via the <code>CollectionPresenter.Config</code> class.</p> <p>Responsibilities</p> <ul> <li>Set up defaults for given views.<ul> <li>Set adapter to <code>collectionRecyclerView</code>.</li> <li>Nullify <code>itemAnimator</code> to disable default <code>RecyclerView</code> animations that could lead to conflicting View animations.</li> <li>Set <code>FocusTag</code>s like <code>FocusTag.RootCollectionRecyclerView</code>.</li> <li>See <code>CollectionFragmentHelper</code> for the current setup.</li> </ul> </li> <li>Bind groupie items to RecyclerViews adapter. This could be:<ul> <li>Any container groupie item provided by the CollectionItemsFactory.</li> <li>Loading state while loading the collection data. This is currently handled as part of fragments layout, a new groupie item needs to be created.</li> <li>Empty state in case there are no items to show. This is currently handled as part of fragments layout, a new groupie item needs to be created.</li> <li><code>ErrorItem</code> in case an error occurred, this should be provided by the <code>ErrorStateFactory</code>.</li> <li><code>ContentRestrictedItem</code> in case content is restricted and <code>Config.displayContentRestrictedItemWhenEmpty</code> is true. This should be disabled for home &amp; watchlist.</li> </ul> </li> <li>Announce a11y page name when collection title is available. See <code>A11yPageNameAnnouncer</code>.</li> <li>Handle fragment / content transition with <code>FragmentTransitionPresenter</code>.</li> <li>Handle focus for focus navigation based devices like STB.<ul> <li>Request initial focus after fragment / content transition is done. In most cases, this will be the most top left tile. In case of a tabbed collection, the first tab should be selected.</li> <li>Restore last focused view with <code>LastFocusedViewHelper</code>.</li> </ul> </li> <li>Integrate <code>RecyclerViewStateHandler</code> to save / restore RecyclerView state.</li> <li>Integrate <code>RecyclerViewSnapScrollHelper</code> to setup scroll behavior.</li> </ul> <p>Sample code</p> <pre><code>/**\n * Implementation of [CollectionPresenter] that is responsible for handling common view logic on collection pages.\n */\nclass CollectionPresenterImpl @AssistedInject constructor(\n    private val adapter: GroupAdapter&lt;GroupieViewHolder&gt;,\n    private val collectionItemsFactory: CollectionItemsFactory,\n    private val recyclerViewSnapScrollHelper: RecyclerViewSnapScrollHelper,\n    @Assisted private val viewLifecycleOwner: LifecycleOwner,\n    @Assisted private val view: CollectionPresenter.View,\n) : CollectionPresenter {\n\n    init {\n        view.collectionRecyclerView.adapter = adapter\n        view.collectionItemDecorations.forEach { decoration -&gt;\n            view.collectionRecyclerView.addItemDecoration(decoration) \n        }\n        recyclerViewSnapScrollHelper.init(\n            viewLifecycleOwner,\n            view.collectionRecyclerView,\n            view.collectionSnapType\n        )\n    }\n\n    override fun bind(state: CollectionViewModel.State) {\n        val items = collectionItemsFactory.createItems(state.collection)\n        adapter.update(items)\n    }\n}\n</code></pre> <pre><code>/**\n * Views references for [CollectionPresenter].\n * @property collectionRecyclerView is the main [RecyclerView] to show collection content, loading or empty state.\n * @property collectionSnapType [RecyclerViewSnapScrollHelper.SnapType] to define scroll behavior.\n * @property collectionItemDecorations is a List of [RecyclerView.ItemDecoration] that will be added to the [collectionRecyclerView].\n */\ndata class View(\n    val collectionRecyclerView: RecyclerView,\n    val collectionSnapType: RecyclerViewSnapScrollHelper.SnapType? = null,\n    val collectionItemDecorations: List&lt;RecyclerView.ItemDecoration&gt;? = null,\n)\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#collectionitemsfactory","title":"CollectionItemsFactory","text":"<p>The <code>CollectionItemsFactory</code> is responsible for mapping the <code>Container</code> / <code>Asset</code> objects from given <code>collection</code> or <code>subCollection</code> into groupie items. This will be exactly the same as what we have right now.</p>"},{"location":"administrative/rfc/collection_architecture/#todos-and-other-subjects-to-take-care-of","title":"TODOs and other subjects to take care of","text":"<ul> <li>Use <code>Set</code> instead of <code>Container</code> to resolve ContentSet. It seems like <code>Container</code> is currently required because of the <code>mapVariables</code> method that takes the <code>style</code>. By passing <code>Set</code> and <code>style</code> individually, it might be simpler to resolve the ContentSet as we don't have to copy the <code>Container</code> instance with latest <code>Set</code> anymore.</li> <li>Find out how to implement analytics.</li> <li>Find out how to implement brand / heroInteractive VideoArt playback with this new approach. Check if <code>AssetTransitionHandler</code> &amp; <code>AssetVideoArtHandler</code> could be re-used.</li> <li>Find out how to implement <code>OfflineViewModel</code> with the retry logic. Current <code>OfflineViewModel</code> still uses the deprecated <code>ReactiveViewModel</code> and may need to be re-implemented.</li> <li>All collection fragments use a <code>CollectionIdentifier</code> as input for the <code>CollectionRepository</code> to load a specific collection. It'd be nice to have something like a <code>CollectionArguments</code> data class that can be parsed into a arguments bundle to keep fragment creation the same for all instances.</li> </ul>"},{"location":"administrative/rfc/collection_architecture/#samplecollectionfragment","title":"SampleCollectionFragment","text":"<p>To be able to make progress on the new CollectionViewModel implementation without touching the current setup, it would be helpful to create at least 2 different sample collection fragments that supports a basic &amp; nested collection setup.</p> <p>The idea is to start with the simple setup as <code>SampleCollectionFragment</code>. The Fragment implementation would live in a new feature module named <code>features:sampleCollection</code>. The <code>SampleCollectionFragment</code> should be accessible for debug builds only, which could be managed by adding the <code>features:sampleCollection</code> dependency as <code>debugImplementation</code> project. A <code>SampleCollectionDeeplinkHandler</code> with a custom deeplink schema could be used to open the fragment. The <code>features:sampleCollection</code> module would have dependencies on at least the <code>features:collectionsApi</code> to have access to the new <code>CollectionViewModel</code>, <code>CollectionPresenter</code> and so on.</p> <p>The following adb deeplink command could be used to navigate to the SampleCollectionFragment.</p> <pre><code>adb shell am start -W -a android.intent.action.VIEW -d https://starplus.com/app/sample-collection\nadb shell am start -W -a android.intent.action.VIEW -d https://disneyplus.com/app/sample-collection\n</code></pre>"},{"location":"administrative/rfc/collection_architecture/#use-cases","title":"Use cases","text":""},{"location":"administrative/rfc/collection_architecture/#abstractcollectionhiltfragment","title":"AbstractCollectionHiltFragment","text":"<p>The <code>AbstractCollectionHiltFragment</code> is an abstract Fragment implementation that is used by mainly all collection related fragments. It is still driven by the old app architecture which is based on the <code>ReactiveViewModel</code>. With this refactor, we're gonna switch over to new architecture based on a is driven by <code>androidx.lifecycle.ViewModel</code>.</p> <p>Summing up the different subclasses of the <code>AbstractCollectionHiltFragment</code> with each its own specialities:</p> <p>AllSportsPageFragment</p> <ul> <li>No specialities</li> </ul> <p>BrandFragment</p> <ul> <li>taking background, logo, videoart (tv only) from collection to show as header.</li> </ul> <p>CollectionTabFilterFragment / CollectionTabbedFragment</p> <ul> <li>Content API delivers a collection where the first container has <code>tabs</code> as style.<ul> <li>Selecting a tab will trigger a new collection request for <code>collectionIdentifier</code> that is provided by active tab.</li> </ul> </li> </ul> <p>DiscoverFragment</p> <ul> <li>No specialities</li> </ul> <p>EditorialFragment</p> <ul> <li>taking background, logo, videoart (tv only) from collection to show as header.</li> </ul> <p>LandingPageFragment</p> <ul> <li>Content API delivers one huge collection response. Each set in the response represents a tab filter.<ul> <li>Selecting a tab will filter the collection response and show active set as content.</li> </ul> </li> </ul> <p>OriginalsPageFragment</p> <ul> <li>taking logo from collection to show as header.</li> </ul> <p>SimpleCollectionFragment</p> <ul> <li>No specialities</li> </ul> <p>SportsHomeFragment</p> <ul> <li>No specialities</li> </ul> <p>SuperEventFragment</p> <ul> <li>No specialities</li> </ul> <p>TeamPageFragment</p> <ul> <li>No specialities</li> </ul> <p>WatchlistFragment</p> <ul> <li>Using a <code>CollectionFilter.ContentIdsFilter</code> to filter out recently removed assets as local fallback. However, I'm not sure if this is still needed.</li> </ul>"},{"location":"administrative/rfc/collection_architecture/#other-usages-legacy-collectionviewmodel","title":"Other usages legacy CollectionViewModel","text":"<p>The <code>CollectionViewModel</code> is mostly used by the <code>AbstractCollectionHiltFragment</code>, but there is more use cases to migrate to the new <code>CollectionViewModel</code>, like the search screen and the choose avatar screen.</p> <p>Search</p> <ul> <li>The <code>SearchViewModel</code> is more or less a copy of the legacy <code>CollectionViewModel</code> with some added functionality to handle search results and suggestions. The <code>SearchViewModel</code> is still using the deprecated <code>ReactiveViewModel</code> and needs to be migrated as well.</li> <li>We need to find out whether we can use the new <code>CollectionViewModel</code> or <code>CollectionRepository</code> as replacement.</li> </ul> <p>Choose avatar</p> <ul> <li>The <code>AvatarCollectionFetcher</code> is implemented in the <code>ChooseAvatarViewModel</code> which uses the legacy <code>CollectionViewModel</code> under the hood.</li> <li>We need to find out whether we can use the new <code>CollectionViewModel</code> or <code>CollectionRepository</code> as replacement.</li> </ul>"},{"location":"administrative/rfc/collection_architecture/#acceptance-criteria","title":"Acceptance criteria","text":"<ul> <li>Support different UI setups based on Androids resource qualifier. Right now, we have 2 different Fragment implementations for the tabbed collections. With the new setup, this should be the same fragment + ViewModel that could switch between UI after resizing the window.</li> <li>The loading, empty &amp; content restricted state should be provided as Groupie items. This is the responsibility of the <code>CollectionPresenter</code>.</li> <li>More TBD.</li> </ul>"},{"location":"administrative/rfc/collection_architecture/#out-of-scope","title":"Out-of-scope","text":"<p>Despite the fact that it would be great to opportunity to include Kotlin Coroutines, this refactor will have that much impact already that it might be wise to leave Kotlin Coroutines out-of-scope.</p>"},{"location":"administrative/rfc/collection_architecture/#how","title":"How?","text":"<ol> <li>Create <code>features:sampleCollection</code> module for debug builds only.<ol> <li>Add <code>SampleCollectionFragment</code> with setup for development purposes. See SampleCollectionFragment for responsibilities.</li> <li>Add dependency on <code>features:collectionsApi</code> for access to the new <code>CollectionViewModel</code>.</li> <li>Add dependency on <code>features:deeplinkApi</code> to create a custom <code>DeeplinkHandler</code> to open the <code>SampleCollectionFragment</code>.</li> <li>Add support for loading &amp; error state.</li> </ol> </li> <li>Add <code>CollectionViewModel</code>  and relevant implementations to <code>feature:collections</code>/<code>feature:collectionsApi</code> modules.<ol> <li>See CollectionViewModel for responsibilities.</li> <li>See CollectionRepository for responsibilities.</li> <li>See DehydratedCollectionRepository for responsibilities.</li> <li>See ContentSetRepository for responsibilities.</li> <li>See RepositoryHolder for responsibilities.</li> <li>See CollectionPresenter for responsibilities.</li> <li>Use <code>CollectionLog</code> to provide all relevant logging.</li> <li>Add unit test coverage for all implementations.</li> </ol> </li> <li>Create feature module for each of the collection pages. It might be possible to start working on this together with the previous step. It might be good to start with a nested &amp; basic approach on the same to be able to gather feedback in an early stage.<ol> <li>Add dependency on <code>features:collectionsApi</code> for access to the new <code>CollectionViewModel</code>.</li> <li>Create feature flag per collection page and keep disabled by default.</li> </ol> </li> <li>Create markdown file with documentation about the new setup.</li> </ol>"},{"location":"administrative/rfc/collection_architecture/#tickets","title":"Tickets","text":"<p>In order to keep track of the progress of this refactor, the following tickets are created within the Collection Refactor epic.</p> <ul> <li>ANDROID-4755 Collection Architecture Refactor - Base<ul> <li>ANDROID-4781 Sample setup with deeplink for debug builds only</li> <li>ANDROID-4796 Initial setup with loading of collection and sets</li> <li>ANDROID-4797 Nested setup with loading of nested collection and sets</li> <li>ANDROID-4798 Set pagination logic</li> <li>ANDROID-4799 Refresh logic</li> <li>ANDROID-4800 Empty, Error and Content restricted logic</li> <li>ANDROID-4801 Focus logic</li> <li>ANDROID-4802 Finalize CollectionPresenter</li> <li>ANDROID-4803 Tests</li> </ul> </li> <li>ANDROID-4804 Collection Architecture Refactor - Feature flag</li> <li>Collection Architecture Refactor - Features<ul> <li>ANDROID-4805 AllSportsPageFragment</li> <li>ANDROID-4806 BrandFragment</li> <li>ANDROID-4807 ChooseAvatarFragment</li> <li>ANDROID-4808 CollectionTabFilterFragment / CollectionTabbedFragment / SimpleCollectionFragment</li> <li>ANDROID-4809 DiscoverFragment</li> <li>ANDROID-4810 EditorialFragment</li> <li>ANDROID-4811 LandingPageFragment</li> <li>ANDROID-4812 OriginalsPageFragment</li> <li>ANDROID-4813 SearchFragment</li> <li>ANDROID-4814 SportsHomeFragment</li> <li>ANDROID-4815 SuperEventFragment</li> <li>ANDROID-4816 TeamPageFragment</li> <li>ANDROID-4817 WatchlistFragment</li> </ul> </li> </ul>"},{"location":"administrative/rfc/collection_architecture/#impact","title":"Impact","text":"<p>The highest impact will be for the Content Discovery team because the collections fall under their responsibility. It will have some impact on the Platform team as well to get feedback on the new UI Architecture implementation and for support on implementing Glimpse properly.</p> <p>This change will affect all the collection pages through the app. See Use cases for a complete list of affected collection pages with its own specialities.</p> <p>There will be some impact when speaking of modularization. By extracting each collection page into its own feature module and having the common logic in the <code>features:collectionApi</code> module, it might have a positive effect on the gradle build times.</p>"},{"location":"administrative/rfc/jarvis_export/","title":"JARVIS EXPORT","text":""},{"location":"administrative/rfc/jarvis_export/#why","title":"Why?","text":"<ul> <li>Clicking through the many portions of Jarvis is tedious. Devs do it, QA does it, etc. If you need to switch apps, environments, Delorean, add configs, and choose a vision-config, that takes more time then it should and is also prone to error</li> </ul>"},{"location":"administrative/rfc/jarvis_export/#what","title":"What?","text":"<ul> <li>Create a Jarvis feature where we can export the exact settings setup. Similar to Charles or Android Studio</li> </ul>"},{"location":"administrative/rfc/jarvis_export/#how","title":"How?","text":"<ul> <li>We create an <code>export</code> / <code>import</code> settings button on Jarvis</li> <li>All applicable Jarvis values are stored in one place that can be exported, like a <code>.json</code> file? Something else?</li> </ul>"},{"location":"administrative/rfc/jarvis_export/#impact","title":"Impact","text":"<ul> <li>A ton of people, devs, QA, etc.</li> </ul>"},{"location":"administrative/rfc/macro_benchmarks/","title":"Macro Benchmarks and Baseline Profiles","text":""},{"location":"administrative/rfc/macro_benchmarks/#why","title":"Why?","text":"<ul> <li>Amazon reported significant app startup regression on our 2.7.2 builds. ANDROID-3699</li> <li>As long as we don't monitor startup time it is hard to say if we improve, regress or stay stable</li> <li>Google strongly recommends using baseline profiles for Jetpack Compose</li> </ul>"},{"location":"administrative/rfc/macro_benchmarks/#what","title":"What?","text":""},{"location":"administrative/rfc/macro_benchmarks/#macro-benchmark-projects","title":"Macro Benchmark Projects","text":"<p>The macro benchmark setup that Google provides these days is pretty straightforward and easy to implement these days. We could use the suggested Github Actions and GCloud Monitoring to, for example, trigger these builds every time that a release tag is created.</p> <p>Here is an example of the JSON output when you run the benchmark tests on Firebase Test Lab</p> <pre><code>{\n    \"context\": {\n        \"build\": {\n            \"brand\": \"google\",\n            \"device\": \"redfin\",\n            \"fingerprint\": \"google/redfin/redfin:11/RQ3A.211001.001/7641976:user/release-keys\",\n            \"model\": \"Pixel 5\",\n            \"version\": {\n                \"sdk\": 30\n            }\n        },\n        \"cpuCoreCount\": 8,\n        \"cpuLocked\": false,\n        \"cpuMaxFreqHz\": 2400000000,\n        \"memTotalBytes\": 7819993088,\n        \"sustainedPerformanceModeEnabled\": false\n    },\n    \"benchmarks\": [\n        {\n            \"name\": \"startupNoCompilation\",\n            \"params\": {},\n            \"className\": \"com.bamtechmedia.dominguez.mobile.benchmark.MobileAppStartBenchmark\",\n            \"totalRunTimeNs\": 113970060937,\n            \"metrics\": {\n                \"timeToInitialDisplayMs\": {\n                    \"minimum\": 411.319208,\n                    \"maximum\": 611.881572,\n                    \"median\": 445.6793675,\n                    \"runs\": [\n                        611.881572,\n                        492.550674,\n                        439.021138,\n                        508.526561,\n                        445.599055,\n                        411.319208,\n                        422.144782,\n                        445.75968,\n                        418.313948,\n                        446.550201\n                    ]\n                }\n            },\n            \"sampledMetrics\": {},\n            \"warmupIterations\": 0,\n            \"repeatIterations\": 10,\n            \"thermalThrottleSleepSeconds\": 0\n        },\n        {\n            \"name\": \"startupBaselineProfile\",\n            \"params\": {},\n            \"className\": \"com.bamtechmedia.dominguez.mobile.benchmark.MobileAppStartBenchmark\",\n            \"totalRunTimeNs\": 57526465731,\n            \"metrics\": {\n                \"timeToInitialDisplayMs\": {\n                    \"minimum\": 385.875976,\n                    \"maximum\": 451.5239,\n                    \"median\": 410.36412900000005,\n                    \"runs\": [\n                        394.670716,\n                        385.875976,\n                        400.374727,\n                        411.319155,\n                        409.409103,\n                        415.556708,\n                        403.907905,\n                        416.397333,\n                        451.5239,\n                        431.918845\n                    ]\n                }\n            },\n            \"sampledMetrics\": {},\n            \"warmupIterations\": 0,\n            \"repeatIterations\": 10,\n            \"thermalThrottleSleepSeconds\": 0\n        }\n    ]\n}\n</code></pre>"},{"location":"administrative/rfc/macro_benchmarks/#baseline-profiles","title":"Baseline profiles","text":"<p>A Baseline Profile is a file that we would bundle in the application which Google Play can use to determine which classes should be pre-compiled on the device before the first application install. This could have a big impact in startup performance. With the setup of the macro benchmark projects it also because fairly straightforward to include these at least for mobileGoogle variants. TV and Amazon devices are a bit more tricky since you need a rooted device to be able to capture baseline profiles.</p>"},{"location":"administrative/rfc/macro_benchmarks/#monitoring","title":"Monitoring","text":"<p>According to the docs we can set up a monitoring to check the benchmarks over time. If we do kick these builds in the nightly and on kicking a release build that gives us a very basic monitoring option for application startup time.</p>"},{"location":"administrative/rfc/macro_benchmarks/#how","title":"How?","text":"<p>There's still a few things that need to be flushed out but the branch here sets up the benchmark modules and GH Actions</p> <p>If you have gcloud setup locally you can run the benchmarks using this command after running <code>./gradlew assembleMobileDisneyGoogleBenchmark</code> on that branch.</p> <pre><code>gcloud firebase test android run \\\n  --type instrumentation \\\n  --app /Users/rmokveld/Workspace/Dmgz/mobile/build/outputs/apk/mobileDisneyGoogle/benchmark/mobile-mobile-disney-google-benchmark.apk \\\n  --test /Users/rmokveld/Workspace/Dmgz/benchmarkMobile/build/outputs/apk/mobileDisneyGoogle/benchmark/benchmarkMobile-mobile-disney-google-benchmark.apk \\\n  --device model=redfin,version=30,locale=en,orientation=portrait \\\n  --directories-to-pull /sdcard/Download \\\n  --results-bucket gs://macro-benchmark-results \\\n  --environment-variables additionalTestOutputDir=/sdcard/Download,no-isolated-storage=true \\\n  --timeout 20m \\\n  --test-targets \"class com.bamtechmedia.dominguez.mobile.benchmark.MobileAppStartBenchmark\"\n</code></pre> <p>An example run can be found here</p>"},{"location":"administrative/rfc/macro_benchmarks/#impact","title":"Impact","text":"<p>Ideally this would become a fixed part of our release process so then it would become one of the signoff steps in the release posts that TPM share in the project.</p> <p>Since this is a new concept in the build system build performance should also be measured.</p>"},{"location":"administrative/rfc/move_docs_dmgz_repo/","title":"Move Docs Site sources to Dmgz repo","text":""},{"location":"administrative/rfc/move_docs_dmgz_repo/#why","title":"Why?","text":"<p>When the docs site was initially created, the choice was made to store the sources in a separate repository. IIRC, the reasons for this were mostly technical.</p> <p>With the GH Actions runners, we can now deploy the docs from the main Dmgz repository. I've got a working example here and the deployed site here.</p> <p>Advantages:</p> <ul> <li>Changes to code and documentation can be done in a single PR instead of two PRs in two repos.</li> <li>Developers only have to checkout and manage a single repository.</li> <li>Migrating docs from the old <code>/docs</code> markdown files to the Docs site is easier, since the change is in a single repo.</li> </ul> <p>Disadvantages:</p> <ul> <li>Jenkins and other CI processes will run on Docs PRs, even though they are not necessary when the PR does not contain code changes</li> </ul>"},{"location":"administrative/rfc/move_docs_dmgz_repo/#what","title":"What?","text":"<ul> <li>Move the contents of the Docs Site to the main Dmgz repo.</li> </ul>"},{"location":"administrative/rfc/move_docs_dmgz_repo/#how","title":"How?","text":"<ul> <li>Announce a code freeze to the <code>dmgz-docs</code> repository</li> <li>Move all the existing code to a folder in the <code>Dmgz</code> repository</li> <li>Update GH actions workflows so:<ul> <li>The site is deployed</li> <li>The linter only lints the docs folder and does not run on non docs changes</li> </ul> </li> <li>Deprecate/remove the <code>dmgz-docs</code> repository</li> </ul>"},{"location":"administrative/rfc/move_docs_dmgz_repo/#impact","title":"Impact","text":"<ul> <li>Developers will now have to write docs in the main Dmgz repo.</li> <li>The URL of the doc site will change (<code>https://github.bamtech.co/pages/Android/dmgz-docs/</code> to <code>https://github.bamtech.co/pages/Android/Dmgz/</code>)</li> </ul>"},{"location":"administrative/rfc/rfc_template/","title":"","text":""},{"location":"administrative/rfc/rfc_template/#why","title":"Why?","text":"<ul> <li>Why do you want to implement this change?</li> <li>Is your RFC related to a problem? Ex. I'm always frustrated when [...]</li> </ul>"},{"location":"administrative/rfc/rfc_template/#what","title":"What?","text":"<ul> <li>A clear and concise description of what you want to happen.</li> <li>If possible and relevant, include (pseudo)code snippets to illustrate your proposal.</li> </ul>"},{"location":"administrative/rfc/rfc_template/#how","title":"How?","text":"<ul> <li>How are you going to implement the change?</li> </ul>"},{"location":"administrative/rfc/rfc_template/#impact","title":"Impact","text":"<ul> <li>Who will this change impact?</li> <li>What parts of the app will this change impact?</li> </ul>"},{"location":"administrative/rfc/viewmodel_module_codegen/","title":"CODE GENERATION FOR VIEWMODELS","text":""},{"location":"administrative/rfc/viewmodel_module_codegen/#why","title":"Why?","text":"<p>It is fairly often that developers wonder why they can't use <code>@HiltViewModel</code> to annotate their ViewModels and avoid manually declaring their ViewModels in a dedicated Dagger Module, with the answer being that HiltViewModel only allows to inject such ViewModels in <code>@AndroidEntryPoint</code>'s, namely translating to Fragments and Activities.</p> <p>However, seeing as the declaration of these ViewModels is fairly predictable and deterministic, I think we could leverage annotation processing and code generation ourselves, to create an annotation of our own that will automatically generate the Dagger module providing the instances of that ViewModel.</p> <p>Doing this will not only liberate the developer from the creation of such boilerplate code, but also automatically reflect changes in the signature of that ViewModel's construction; currently if the constructor changes we have to amend both the ViewModel itself and the associated Module providing its instance; by allowing code generation to do that job for us this is done automatically.</p>"},{"location":"administrative/rfc/viewmodel_module_codegen/#what","title":"What?","text":"<p>I am proposing the creation of our custom @DmgzViewModel (open to changing the name) with a given scope, which is enough information for a code generation to infer and create a DaggerModule in the same package, with all necessary injected parameters.</p> <p>In order to demonstrate the effect I have created a quick (and dirty) prototype in this branch.</p>"},{"location":"administrative/rfc/viewmodel_module_codegen/#how","title":"How?","text":"<p>With this solution, all of our ViewModels can be annotated with either <code>@DmgzViewModel(scope = ViewModelScope.ACTIVITY)</code> or <code>@DmgzViewModel(scope = ViewModelScope.FRAGMENT)</code> and the declaration of their provider method in the corresponding Dagger Module can be removed.</p> <p>In the aforementioned branch both a Fragment scoped ViewModel (see here) and an Activity scoped ViewModel (seen here) are getting their modules generated by this quick prototype.</p>"},{"location":"administrative/rfc/viewmodel_module_codegen/#impact","title":"Impact","text":"<ul> <li> <p>If successful, this will impact all (or most) of our ViewModels and we can safely remove the declaring provider code in the Dagger Modules.</p> </li> <li> <p>If one particular scenario requires a different mechanism for ViewModel creation, this option is always available by having that ViewModel not being annotated.</p> </li> <li> <p>A working code generation solution reduces the chances of errors in declaring these bindings manually.</p> </li> <li> <p>Further changes to constructor signature are reflected automatically, reducing the load of such changes.</p> </li> <li> <p>If we would change the way our ViewModel store works in the future, or if we would be switching to Kotlin modules at some point, this can be done automatically by reflecting such changes in the code generator.</p> </li> <li> <p>This feature would open the door to the use of code generation, which potentially could be used for more improvements in our app or reduce boilerplate.</p> </li> <li> <p>As a downside, it can be argued that this hides logic, but this argument applies to many of the libraries we use, not the least of it being Dagger Hilt.</p> </li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>The general UI architecture attempts to follow many of the same concepts found within the official Google docs.</p> <p>The UI architecture is intended to be reactive and unidirectional, leveraging RxJava (migrating to Coroutines/Flow) in order to do so.</p> <p>There are several main layers used within the architecture, each with their own responsibilities.</p> <p>This documentation has been split up into four sections</p> <ul> <li>Project Architecture (TBD)</li> <li>Screens</li> <li>Layers within a screen</li> <li>Lifetimes of elements within a screen</li> <li>Handling lifecycle events in a screen</li> </ul> <p>Since State Streams are such an integral part of the architecture there is a separate doc on that here.</p>"},{"location":"architecture/layers/","title":"UI Architecture Layers","text":"<p>The overall architectural approach of Dominguez Android could be defined as a Layered Reactive Unidirectional Paradigm. Higher layers observe state of lower layers and send events to those lower layers which results in state updates that that higher layer is observing.</p> <p>The lifetime of objects is the most important aspect in this layering approach, how long an object stays around defines in what layer it lives and vice-versa. In some ways a brick wall where lower-layer instance have to outlive the higher-layer instances and lower-level instances can not build upon anything that is at a higher level without defying the rules of gravity.</p> <p>In the UI there are generally three layers. The Retained Layer is the lowest layer, on top of that is the Navigation Layer and on top of that the Presentation Layer. Below is a visual representation of what this looks like, where the white blocks represent what instances exist in what layer and at what point in time during a login flow.</p> <p></p> <p>The Retained Layer of a screen stays around for as long as the user can go back to that same screen and it does not get destroyed on configuration changes.</p> <p>The Navigation Layer of a screen also stays around as along as the user can go back to that screen but it does get recreated on configuration changes.</p> <p>The Presentation Layer only exists when the user is actively viewing the screen and it also gets recreated on configuration changes.</p> <p>Implementing the above might seem complex, and it is. Lucky for us this is exactly the standard functionality that the androidx.fragment and androidx.lifecycle libraries provide. Where the <code>Fragment</code>'s <code>ViewModel</code> lives in the <code>Retained Layer</code>, the <code>Fragment</code> in the <code>Navigation Layer</code> and the <code>Fragment</code>'s <code>View</code> in the <code>Presentation Layer</code>. In fact, the naming of these layers is really just a formalization of the Fragment behavior.</p>"},{"location":"architecture/layers/#retained-layer","title":"Retained Layer","text":"<p>The retained layer provides the base of the functionality of a feature. The central class in this layer is a <code>ViewModel</code> implementation.</p> <ul> <li>The retained layer models a retained state that is observed by the presentation layer.<ul> <li>The most common way to model that state is through a state stream state stream that describes the state of the screen (or part of the screen). A lifecycle observer observes that state stream and invokes the presentation layer to update the UI.</li> </ul> </li> <li>The retained layer is responsible for handling events that originate from the presentation layer.<ul> <li>These events can result in updates to the state stream.</li> <li>The ViewModel exposes methods that are invoked from the presentation layer to handle events originating from the user or system.</li> </ul> </li> <li>The Retained layer must be fully testable with JVM unit tests without the need for mocks.</li> <li>The <code>Presentation Layer</code> must be able to recover completely from a configuration change based on the data that's exposed and cached by the ViewModel layer.</li> <li>The retained layer stores state that is relevant to recover from process death</li> <li>Using <code>@HiltViewModel</code> does not work well with our architecture. See the dagger docs for more details. Instead we have proposed our own version of this annotation here</li> <li>The retained layer should store data that's needed to recover from process death in a <code>SavedStateHandle</code>.<ul> <li>To validate that this is working correctly, make sure that you test backgrounding and foregrounding the application while <code>Don't keep activities</code> debug option is enabled.</li> </ul> </li> </ul>"},{"location":"architecture/layers/#navigation-layer","title":"Navigation Layer","text":"<p>The Fragment class itself and anything that the Fragment instance references is considered to be part of the navigation layer.</p> <p>Although routers are tools that are used for navigation, they are not considered to be part of the navigation layer. Instead they make use the ActivityNavigation and FragmentViewNavigation which allow them to live in the retained layer, making it easier to trigger navigation based on events.</p>"},{"location":"architecture/layers/#presentation-layer","title":"Presentation Layer","text":"<p>The <code>Presentation Layer</code> is all about turning state into something visible, it Presents the State, hence the name. All classes that either extend from <code>android.view.View</code>, directly or indirectly interact with classes that extend from <code>android.view.View</code> are considered the Presentation Layer. When we start adopting Jetpack Compose this would also include any <code>@Composable</code> functions that use any of the Composables in the <code>androidx.compose.ui</code> package.</p> <p>A common pattern in the presentation layer is to have a <code>Presenter</code> class that exposes a <code>bindState</code> method.</p> <p>A Groupie <code>Item</code> implementation is also considered to be part of the presentation layer to present items in a <code>RecyclerView</code>.</p>"},{"location":"architecture/layers/#presenter","title":"Presenter","text":"<ul> <li>In the presentation layer the app makes use of Presenter classes, who's main functionality is to bind state to UI.</li> <li>A class is considered a presenter if it binds state/data to a view.</li> <li>Presenters expose methods like <code>bindState</code> that ensures updates and/or initializes Views to display the state.</li> <li>Presenters can inject a <code>ViewModel</code> from the retained layer and calls methods on it to trigger state-manipulating and/or asynchronous work..</li> <li>Presenters are not expected to contain any asynchronous code with the exception of animations.<ul> <li>With dynamic window sizes it could be that a presenter (and the view) get recreated multiple times per second as the user resizes the application window. Asynchronous work in a presenter would therefore be cancelled and restarted many times.</li> <li>An exception to this could be animations which could also be qualified as asynchronous work, but depending on the expectation on configuration changes you might still want to model the state of the animation (percentage complete for example) in the retained layer instead. That way a new view after configuration change can continue the animation where it left off.</li> </ul> </li> <li>The lifetime of a Presenter is directly linked to the lifetime of the view it is implementing presentation logic for.<ul> <li>This means that when that view gets created the presenter is created and when the view gets destroyed the presenter gets destroyed. The idea is that the View or other classes in the presentation layer are the only classes that reference the presenter so it will be automatically be garbage collected. If you set another reference to a Presenter in a layer that lives longer than the View it is also your responsibility to unset that. But always try to avoid that since de-referencing is easy to forget.</li> </ul> </li> <li>Much like the <code>android.view</code> classes, all code in Presenters only runs on the main thread.</li> <li>Presenters are not be lifecycle-aware but rather passive components that do something when a method on it is called. The processing of Lifecycle events is done in the LifecycleObserver<ul> <li>This could either be the lifecycle observer invoking a method on the presenter, or invoking a method on the ViewModel that results in a state update which results in a new invocation of the bind method.</li> </ul> </li> </ul>"},{"location":"architecture/layers/#lifecycleobserver","title":"LifecycleObserver","text":"<ul> <li>LifecycleObservers are used to wire up a Presenter by instantiating it through injections and binding state while the lifecycle state is at least started.</li> <li>LifecycleObservers are responsible for observing a state stream in the ViewModel while the Lifecycle is at least in the Started state.</li> <li>Since Android supports Java 8 default methods the DefaultLifecycleObserver is often the interface that is implemented instead of the plain <code>LifecycleObserver</code>.</li> </ul>"},{"location":"architecture/lifecycle/","title":"Lifecycle Callbacks in UI Architecture elements","text":"<p>Lifecycle callbacks are a key concept in the UI Architecture, their main goal being that the right things happen at the right time and to ensure that resources are not being used when they shouldn't be.</p> <p>The lifetime of architectural elements is covered in the depth here.</p>"},{"location":"architecture/lifecycle/#lifecycle-events-in-ui-architecture-elements","title":"Lifecycle events in UI Architecture elements","text":"<p>Different elements in the UI Architecture may be able to receive different lifecycle requests, or they expose method to register for receiving lifecycle events. In the interest of keeping classes small and focused, the latter is often the preferred option. Below is an overview of the different lifecycle events of all the elements covered in the lifetimes documentation.</p>"},{"location":"architecture/lifecycle/#viewmodel","title":"ViewModel","text":"<p>Although they don't know about an <code>androidx.lifecycle</code> ViewModels do also have a lifecycle. Typically this is one with a single lifecycle callback, which is <code>onCleared</code>. The only other way in which ViewModels are sort of aware of lifecycles is by knowing if its state stream has active subscribers, that typically means that the lifecycle of the matching Fragment is started.</p>"},{"location":"architecture/lifecycle/#fragment","title":"Fragment","text":"<p>A <code>Fragment</code> instance does not have one, but two lifecycles. Traditionally you would differentiate between these with <code>onCreate</code> vs <code>onCreateView</code> and <code>onDestroy</code> vs. <code>onDestroyView</code> but with the introduction of the <code>androidx.lifecycle</code> they have been split out into the <code>Fragment.lifecycle</code> and <code>Fragment.viewLifecycleOwner.lifecycle</code>. Both of these allow registering a <code>LifecycleObserver</code> and we typically only use the latter in this project. See lifetimes for more details.</p>"},{"location":"architecture/lifecycle/#processlifecycleowner","title":"ProcessLifecycleOwner","text":"<p>The applications makes quite a lot of use of the ProcessLifecycleOwner that is part ot the <code>androidx.lifecycle</code> libraries. Check the documentation on that class for more details.</p> <p>A feature module can define a <code>LifecycleObserver</code> and bind that into a Set to ensure that it gets added to the <code>ProcessLifecycleOwner</code>'s <code>Lifecycle</code>. This allows loose coupling since Dagger will take care of the integration, and for example, if the feature is only included on debug builds, then feature's code just won't be included in the release builds.</p>"},{"location":"architecture/lifecycle/#onstart-and-configuration-changes","title":"<code>onStart</code> and configuration changes","text":"<p>onStart is often used to trigger a refresh or other actions that may or may not result in a network request. It is important to consider that, when an app is ran on a free-form window like a multi-window tablet or a Chromebook the <code>Fragment</code> and its view will be re-created, every time that the window size slightly changes. Every time it is re-created it goes through <code>onPause</code>, <code>onStop</code>, <code>onDestroy</code>, <code>onCreate</code>, <code>onStart</code> and <code>onResume</code> in that order. Therefore, triggering a network request every time the fragment's <code>onStart</code> is called, could result in a ton of network requests.</p> <p>Network requests should therefore never be triggered directly from one of these methods. Some alternative options are:</p> <ul> <li>Invoking the ViewModel from this method and implement some sort of debouncing mechanism in the ViewModel</li> <li>Triggering the request from a ViewModel while it has active subscribers.</li> </ul> <p>Below is an example of the second option. The state stream defined here will load data once per minute while it has active subscribers. Due to the <code>replay(1).refCount(3, SECONDS)</code> the stream will remain active for 3 seconds after the last subscriber unsubscribes. On configuration changes it will get a subscriber again before the stream is disposed, meaning that no new network request is triggered.</p> <pre><code>class TestViewModel : AutoDisposeViewModel() {\n\n    val stateOnceAndStream: Flowable&lt;State&gt; =\n        Flowable.interval(1, TimeUnit.MINUTES)\n            .switchMapSingle { loadData() }\n            .replay(1)\n            .refCount(3, TimeUnit.SECONDS)\n\n    private fun loadData(): Single&lt;State&gt; {\n        TODO(\"Not yet implemented\")\n    }\n\n    data class State(val value: String)\n}\n</code></pre>"},{"location":"architecture/lifetimes/","title":"Lifetimes of UI Architecture elements","text":"<p>A key factor in deciding where logic for a specific Screen should be implemented, is an understanding of the lifetime of each of the classes in that screen. This document covers the lifetimes of different elements in a screen and how they are created, destroyed, or kept around, depending on the state of the screen. It is strongly recommended to read the documentation the the Screen concept before continuing here.</p> <p>A concept that often gets confused with lifetimes is lifecycle callbacks. They key difference being that lifetime is about state, and lifecycle callbacks are events. Lifecycle callbacks are handled in separate documentation here, while this document focuses more on the lifetime from the moment that an element is created, to the moment it is destroyed, and will be garbage collected.</p>"},{"location":"architecture/lifetimes/#elements","title":"Elements","text":""},{"location":"architecture/lifetimes/#viewmodel","title":"ViewModel","text":"<p>A ViewModel of a screen is the element that has the longest lifetime in that screen. It is essentially the same as the lifetime of the screen itself and will get <code>onCleared()</code> invoked when the screen transitions to the Destroyed state. It does not know whether the screen is considered Active or Inactive but can be informed of those if required.</p> <p>The ViewModel stays around while a screen is in the Inactive state. When something happened on the active screen, that something can result in the state stream of an inactive screen to already emit a new state. For example, the ViewModel of the edit profile screen will be inactive when the user opens the Avatar selection screen, but since the ViewModel of the edit profile screen observes a state with the profile that is being edited, if the user selects a new avatar, that will be reflected in the state stream and already have updated when the user navigates back to the edit profile screen.</p> <p>There is one scenario where a ViewModel gets recreated for the same screen and that is when the application process died and the system attempts to restore back (because the user selected the app from recent apps screen). For cases like this, information that is important to restore should be stored in a <code>SavedStateHandle</code>.</p>"},{"location":"architecture/lifetimes/#fragment","title":"Fragment","text":"<p>The Fragment instance is the element that has the second longest lifetime of the screen. If no configuration changes happen its lifetime will actually be exactly the same as that of the <code>ViewModel</code>.</p> <p>The only, and actually quite significant, difference is that the Fragment is configuration-aware, meaning that it will be destroyed and re-created every time something about the configuration changes. This destruction and recreation will always happen when the configuration changes, no matter if the fragment's screen is currently in the Active or InActive state.</p> <p>Configuration changes are often just thought of as rotation, likely because it is the easiest one to trigger. Although rotation is a challenge to deal with properly, new devices have introduced much more frequent configuration changes. Especially free-form windows on Chromebooks may trigger many configuration changes in very short periods of time. Other more common examples of configuration changes these days are split-screen mode and foldable devices becoming more popular.</p>"},{"location":"architecture/lifetimes/#view-of-the-fragment","title":"View of the Fragment","text":"<p>The View of the Fragment has a shorter lifetime and only exists while the Fragment's screen is considered Active. As opposed to the Fragment which will exist while the screen is either Active or Inactive.</p>"},{"location":"architecture/lifetimes/#presenter","title":"Presenter","text":"<p>Finally, the <code>Presenter</code> has pretty-much the same lifetime as the View of the Fragment. It gets created right after the Fragment's View is created and should be considered obsolete when the Fragment's View is destroyed. Meaning that a new <code>Presenter</code> is created every time that the screen transitions to the Active, and no references to the <code>Presenter</code> should be kept when the screen becomes Inactive and the View is destroyed.</p>"},{"location":"architecture/lifetimes/#viewscopedinstanceproperty","title":"ViewScopedInstanceProperty","text":"<p>A ViewScopedInstanceProperty is a property that is created and destroyed following a fragments view lifecycle.</p> <p>Using a ViewScopedInstanceProperty is the preffered way of scoping a presenter to a view and accesing that presenter for binding view model state.</p> <pre><code>private val presenter by viewScoped { presenterProvider.get() }\n</code></pre> <p>The viewScoped property also solves an issue that could occur when invoking a method on the presenter from within a Fragment.</p> <p>Problematic</p> <pre><code>@AndroidEntryPoint\nclass BirthdateFragment : Fragment(R.layout.fragment_birthdate), BackPressHandler {\n\n    @Inject\n    lateinit var lifecycleObserverProvider: Provider&lt;BirthdateLifecycleObserver&gt;\n\n    @Inject\n    lateinit var birthDateProvider: Provider&lt;BirthdatePresenter&gt;\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewLifecycleOwner.lifecycle.addObserver(lifecycleObserverProvider.get())\n    }\n\n    override fun onBackPress(): Boolean {\n        birthDateProvider.get().onBackButtonPressed() // problematic code\n        return true\n    }\n}\n</code></pre> <p>The above problematic code, would actually create a new instance of the presenter (because it is not scoped). This would cause the whole view setup to be done again, potentially resetting previously bound state. The viewScoped property ensures that this call is done on the already created instance (in this case, the presenter).</p> <p>Working</p> <pre><code>@AndroidEntryPoint\nclass BirthdateFragment : Fragment(R.layout.fragment_birthdate), BackPressHandler {\n\n    @Inject\n    internal lateinit var presenterProvider: Provider&lt;BasicPresenter&gt;\n\n    private val presenter by viewScoped { presenterProvider.get() }\n\n    @Inject\n    lateinit var viewModel: BirthdateViewModel\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewLifecycleOwner.subscribeWhileStarted(viewModel.stateOnceAndStream) { presenter.bindState(it) }\n    }\n\n    override fun onBackPress(): Boolean {\n        presenter?.onBackButtonPressed()\n        return true\n    }\n}\n</code></pre> <p>Warning</p> <p>Do not use the fragments onDestroy() callback to communicate with a ViewScopedInstanceProperty. The property is only alive between onViewCreated() and onDestroyView(). If you need to close resources or communicate with a ViewScopedInstance property you can pass in a onPreDestroy() to the viewScoped() convenience function or alternatively use the fragments onViewDestroy() callback. </p>"},{"location":"architecture/lifetimes/#testing","title":"Testing","text":"<p>A small side effect of this new property is that Fragment instantiation now requires the main thread, as upon instantiation a lifecycle observer is internally added to the fragments lifecycle.</p> <p>This results in all tests instantiating a Fragment using <code>viewScoped</code> failing with the following exception:</p> <pre><code>java.lang.NullPointerException\n    at androidx.arch.core.executor.DefaultTaskExecutor.isMainThread(DefaultTaskExecutor.java:77)\n    at androidx.arch.core.executor.ArchTaskExecutor.isMainThread(ArchTaskExecutor.java:116)\n    at androidx.lifecycle.LifecycleRegistry.enforceMainThreadIfNeeded(LifecycleRegistry.java:322)\n    at androidx.lifecycle.LifecycleRegistry.addObserver(LifecycleRegistry.java:178)\n    at com.bamtechmedia.dominguez.core.framework.ViewScopedInstanceProperty.&lt;init&gt;(ViewScopedInstanceProperty.kt:39)\n    at com.bamtechmedia.dominguez.core.framework.ViewScopedInstancePropertyKt.viewScoped(ViewScopedInstanceProperty.kt:77)\n    at com.bamtechmedia.dominguez.core.framework.ViewScopedInstancePropertyKt.viewScoped$default(ViewScopedInstanceProperty.kt:74)\n</code></pre> <p>This can be circumvented by adding the following test rule to your tests:</p> <pre><code>@get:Rule\n    val rule = InstantTaskExecutorRule()\n</code></pre> <p>This requires the module importing the dependency:</p> <pre><code>`androidTestImplementation buildLibs.dagger.hilt.android.testing`\n</code></pre>"},{"location":"architecture/lifetimes/#working-with-lifecycle-observers","title":"Working with Lifecycle Observers","text":"<p>Although the above paradigm lets us avoid the creation of an extra <code>LifecycleObserver</code> to create the presenter and bind it to a state, often there are cases where the presenter needs to perform an action when a lifecycle event occurs. In those cases, we should not inject the <code>Presenter</code> directly into the <code>LifecycleObserver</code>, as this would mean producing a new instance and thus recreating the view again, as we bind the <code>ViewBinding</code> instance in the Presenter's creation.</p> <p>Instead, an Assisted Factory should be created, that takes the presenter as a parameter in order to produce an instance of the <code>LifecycleObserver</code>. Then this factory can be injected in the <code>Fragment</code> and the <code>LifecycleObserver</code> gets the same <code>Presenter</code> instance.</p> <p>Problematic</p> <pre><code>class BasicLifecycleObserver @Inject constructor(\n    private val presenter: BasicPresenter\n) : DefaultLifecycleObserver {\n\n    override fun onCreate(owner: LifecycleOwner) {\n        presenter.doSomething()\n    }\n}\n\n@AndroidEntryPoint\nclass BasicFragment : Fragment(R.layout.fragment_sample) {\n\n    @Inject\n    lateinit var viewModel: BasicViewModel\n\n    @Inject\n    internal lateinit var presenterProvider: Provider&lt;BasicPresenter&gt;\n\n    @Inject\n    lateinit var lifecycleObserver: BasicLifecycleObserver\n\n    private val presenter by viewScoped { presenterProvider.get() }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewLifecycleOwner.subscribeWhileStarted(viewModel.stateOnceAndStream) { presenter.bindState(it) }\n        viewLifecycleOwner.lifecycle.addObserver(lifecycleObserver)\n    }\n}\n</code></pre> <p>Good</p> <pre><code>class BasicLifecycleObserver @AssistedInject constructor(\n    @Assisted private val presenter: BasicPresenter\n) : DefaultLifecycleObserver {\n\n    override fun onCreate(owner: LifecycleOwner) {\n        presenter.doSomething()\n    }\n\n    @AssistedFactory\n    interface Factory {\n        fun create(presenter: BasicPresenter): BasicLifecycleObserver\n    }\n}\n\nclass BasicFragment : Fragment(R.layout.fragment_sample) {\n\n    @Inject\n    lateinit var viewModel: BasicViewModel\n\n    @Inject\n    internal lateinit var presenterProvider: Provider&lt;BasicPresenter&gt;\n\n    @Inject\n    lateinit var lifecycleObserverFactory: BasicLifecycleObserver.Factory\n\n    private val presenter by viewScoped { presenterProvider.get() }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewLifecycleOwner.subscribeWhileStarted(viewModel.stateOnceAndStream) { presenter.bindState(it) }\n        viewLifecycleOwner.lifecycle.addObserver(lifecycleObserverFactory.create(presenter))\n    }\n}\n</code></pre>"},{"location":"architecture/lifetimes/#examples","title":"Examples","text":"<p>Below is a table which shows a scenario which covers the lifetime of a few cases in the selection of profiles. The number between <code>&lt;&gt;</code> indicates how many instances of that class have been created. This example is not referencing the view of the Fragment because its lifetime is the same as that of the Presenter.</p> Step Action User sees Events Existing instances after this step 1 Start Activity andadd ProfilePickerFragment ProfilePicker MainActivity&lt;1&gt; is createdMainActivityViewModel&lt;1&gt; is createdProfilePickerFragment&lt;1&gt; is createdProfilePickerViewModel&lt;1&gt; is createdProfilePickerPresenter&lt;1&gt; is created MainActivity&lt;1&gt;MainActivityViewModel&lt;1&gt;ProfilePickerFragment&lt;1&gt;ProfilePickerViewModel&lt;1&gt;ProfilePickerPresenter&lt;1&gt; 2 Rotate Screen Profile Picker ProfilePickerPresenter&lt;1&gt; is destroyedProfilePickerFragment&lt;1&gt; is destroyedMainActivity&lt;1&gt; is destroyedMainActivity&lt;2&gt; is createdProfilePickerFragment&lt;2&gt; is createdProfilePickerPresenter&lt;2&gt; is created MainActivity&lt;2&gt;MainActivityViewModel&lt;1&gt;ProfilePickerFragment&lt;2&gt;ProfilePickerViewModel&lt;1&gt;ProfilePickerPresenter&lt;2&gt; 3 Select Edit Profiles Edit Profiles ProfilePickerPresenter&lt;2&gt; is destroyedEditProfilesFragment&lt;1&gt; is createdEditProfilesViewModel&lt;1&gt; is createdEditProfilesPresenter&lt;1&gt; is created MainActivity&lt;2&gt;MainActivityViewModel&lt;1&gt;ProfilePickerFragment&lt;2&gt;ProfilePickerViewModel&lt;1&gt;EditProfilesFragment&lt;1&gt;EditProfilesViewModel&lt;1&gt;EditProfilesPresenter&lt;1&gt; 4 Change Foldable from open to closed state Edit Profiles EditProfilesPresenter&lt;1&gt; is destroyedEditProfilesFragment&lt;1&gt; is destroyedProfilePickerFragment&lt;2&gt; is destroyedMainActivity&lt;2&gt; is destroyedMainActivity&lt;3&gt; is createdProfilePickerFragment&lt;3&gt; is createdEditProfileFragment&lt;2&gt; is createdEditProfilePresenter&lt;2&gt; is created MainActivity&lt;3&gt;MainActivityViewModel&lt;1&gt;ProfilePickerFragment&lt;3&gt;ProfilePickerViewModel&lt;1&gt;EditProfilesFragment&lt;2&gt;EditProfilesViewModel&lt;1&gt;EditProfilesPresenter&lt;2&gt; 5 Press back to returnProfilePicker Profile Picker EditProfilesPresenter&lt;2&gt; is destroyedEditProfilesFragment&lt;2&gt; is destroyedEditProfileViewModel&lt;1&gt; is destroyedProfilePickerPresenter&lt;3&gt; is created MainActivity&lt;3&gt;MainActivityViewModel&lt;1&gt;ProfilePickerFragment&lt;3&gt;ProfilePickerViewModel&lt;1&gt;ProfilePickerPresenter&lt;3&gt; 6 Select a Profile Discover ProfilePickerPresenter&lt;3&gt; is destroyedProfilePickerFragment&lt;3&gt; is destroyedProfilePickerViewModel&lt;1&gt; is destroyedDiscoverFragment&lt;1&gt; is createdDiscoverViewModel&lt;1&gt; is createdDiscoverPresenter&lt;1&gt; is created MainActivity&lt;3&gt;MainActivityViewModel&lt;1&gt;DiscoverFragment&lt;1&gt;DiscoverViewModel&lt;1&gt;DiscoverPresenter&lt;1&gt; 7 Close the app withback button App Closing DiscoverPresenter&lt;1&gt; is destroyedDiscoverFragment&lt;1&gt; is destroyedDiscoverViewModel&lt;1&gt; is destroyedMainActivity&lt;3&gt; is destroyedMainActivityViewModel&lt;1&gt; is destroyed"},{"location":"architecture/screens/","title":"Screens","text":"<p>In the layers, lifecycles and lifetimes documentation there are references to the concept <code>Screen</code>. This document serves to explain what is meant by that, some of the behavior of screens and what states a screen can have.</p> <p>A <code>Screen</code> is not represented by any single class in the codebase but it is more conceptual, and described from a user's perspective.</p> <p>A Screen may need data to load, it displays UI and it can respond to events from the user, system or other parts of the app. In most cases, there is only a single screen active at a time. Screens are usually either started on top of other screens (meaning the user can go back which in Android terminology is often called a back stack) or they replace another (potentially stack of) screens.</p>"},{"location":"architecture/screens/#stacking-screens","title":"Stacking Screens","text":"<p>Stacking screens means that the previous screen will not be destroyed and become <code>Inactive</code> when a new screen is started and becomes <code>Active</code>, and the user will be able to go back to that previous screen from the new screen.</p> <p>Examples of screens started on top of other screens are:</p> <ul> <li>Opening a BrandLanding screen from the Home screen.</li> <li>Opening MovieDetail screen from Home screen.</li> <li>Opening the LoginPassword screen after the user has entered their email in the LoginEmail screen.</li> </ul> <p>In all of these cases the user can go back to the previous screen, which will typically be in the same state as it was when the user navigated away from it. When one the three navigational events above happen, the \"from screen\" will transition to the inactive state while the \"to screen\" gets the active state. When the user does navigate back, the screen that was opened on top of the other screen transitions to the destroyed state, and the screen that was inactive will transition back to active.</p>"},{"location":"architecture/screens/#replacing-screens","title":"Replacing Screens","text":"<p>Replacing screens means that the currently active screen, or stack of screens, get completely replaced by the new screen. The old screens will all transition to the destroyed state.</p> <p>Examples of screens replacing other screens are:</p> <ul> <li>Starting the ProfilePicker screen after a successful login will replace the Welcome, LoginEmail and LoginPassword screen.</li> <li>Starting the Welcome screen after the Splash screen animation is complete and content is loaded will replace the Splash screen.</li> <li>Starting the ProfilePicker screen after the user deleted the active profile will replace the entire back stack to ensure that the user can not go back to a home screen of the delete profile.</li> </ul> <p>In all of these cases, there is nowhere to go back after navigating, which means that the user pressing on the new screen should not result in the user going back to the previous screen.</p> <p>For both of these types of navigation there are methods defined in the FragmentViewNavigation class. Where <code>startFragment</code> will (with the default parameters) start a screen on top of the current screen, and <code>startFragmentAsBackStackRoot</code> will replace the current screen with a new screen. Note that if no screen has been started yet you should always use <code>startFragmentAsBackStackRoot</code>.</p>"},{"location":"architecture/screens/#state-of-a-screen","title":"State of a screen","text":"<p>The conceptual screen can have three conceptual states. Each of them are described below.</p>"},{"location":"architecture/screens/#active-state","title":"Active State","text":"<p>A screen being active means that its UI is currently visible to the user. From this state a screen can transition into all other states, using either stacking or replacing navigation events.</p>"},{"location":"architecture/screens/#inactive-state","title":"Inactive State","text":"<p>A screen being inactive means that one or more other screens have been stacked on top of this screen. The user can still get back to this screen, but it is currently not visible to the user. From this state a screen can transition into being <code>Active</code> if the user navigates back to this screen, or it can be <code>Destroyed</code> if the entire stack of screens gets replaced by a new screen. When this state is reached the View and the Presenter that show the UI of this state will be destroyed and all references to it from longer living elements should be removed.</p>"},{"location":"architecture/screens/#destroyed-state","title":"Destroyed State","text":"<p>A screen will get destroyed when the user either backs out of it after a stacking operation, or if it is being replaced. This is a final state of the screen, meaning that no other states can be transitioned to once this state is reached. Also, all elements of the screen should be ready for garbage collection once this state is reached. From an implementation point-of-view, the transition to the destroyed state corresponds the the ViewModel.onCleared() being invoked.</p>"},{"location":"architecture/screens/#multiple-active-screens","title":"Multiple Active Screens","text":"<p>In some cases there might be multiple active screens. An example of this is the detail screen on tablets. The product requirement there is that the detail screen should be displayed as a smaller window, on top of the screen that was navigated from. So when opening a detail screen from the home screen, the home screen should still be displayed behind the detail page. This means that both the home and the detail screen are in the Active state.</p>"},{"location":"architecture/screens/#background-the-application","title":"Background the application","text":"<p>It can be argued that pressing the home button, sending the app to the background, would result in an inactive state. However, according to the definition above, <code>View</code> of a Fragment exists while the screen is active, and is destroyed when the screen becomes inactive. Since the Fragment framework does not destroy the View of the Fragment, and just transitions the state of the fragment and its view to <code>STOPPED</code>, that would conflict with the rules mentioned above.</p> <p>Since the screen is, at this point, still technically the active screen in the app, it is therefore still considered active, although certain elements in the screen should tie their updating/refresh logic to the <code>STARTED</code> state of the <code>Fragment</code> to ensure that the app does not use unnecessary resources in the background.</p>"},{"location":"architecture/screens/#determining-and-reacting-to-changes","title":"Determining and reacting to changes","text":"<p>In some cases you may want to determine the current screen state, react to changes of the current screen state, or determine what the currently active screen is. There are a couple of places in the codebase which do this already, but work to centralise that still has to be done.</p> <p>An example of a feature that implements some logic to determine the currently active screen is in the BottomNavigationTintListener. That class compares the Fragment's which are currently started, and based on that comparison determines which Fragment's bottom navigation tint should be applied. For more details on this see the docs here.</p>"},{"location":"architecture/state-streams/","title":"State Streams","text":"<p>State streams are a foundational concept in this codebase. You'll see them everywhere and therefore it is good to have a common understanding of them.</p> <p>The primary goal of a state stream is to model a observable state that can change overtime.</p> <p>The section below defines the contract of a State Stream as we intend to use it in the application. intend is an important word in that sentence because, at the time of writing this, most state streams in the project adhere to parts of this contract, but not necessarily all of it.</p>"},{"location":"architecture/state-streams/#contract-of-a-state-stream","title":"Contract of a State Stream","text":"<p>All state streams:</p> <ul> <li>have a single current value at any point in time.</li> <li>emit the current value to a new subscriber directly when it subscribes</li> <li>only emit new values if something actually changed</li> <li>don't emit exceptions through on error</li> </ul>"},{"location":"architecture/state-streams/#behaviorprocessor-as-a-state-stream","title":"BehaviorProcessor as a State Stream","text":"<p>A BehaviorProcessor by itself can almost be considered a state stream if it is created with a default value. The only part of the contract that it doesn't implement is uniqueness, but a <code>distinctUntilChanged()</code> fixes that.</p> <p>Also there is no guarantee that it always has a value unless you create it with <code>createDefault</code> method.</p> <p>In case you're unfamiliar with them, <code>Processor</code> in RxJava is the <code>Flowable</code>-equivalent of a <code>Subject</code> in <code>Observable</code>. So a <code>BehaviorProcessor</code> is just a <code>BehaviorSubject</code> with additional functionality like backpressure that is available on a <code>Flowable</code>.</p> <pre><code>val processor = BehaviorProcessor.createDefault(1)\n\nval stateOnceAndStream: Flowable&lt;Int&gt; = processor.distinctUntilChanged()\n</code></pre> <p>There are a lot of cases where this might work, but it doesn't really fully adhere to a reactive paradigm where state is often the result of other state and/or actions. Especially when multiple things that affect the change may happen in parallel it becomes really hard to manage a correct state and avoid concurrent modification issues.</p> <p>When we move to Kotlin Flow a MutableStateFlow can be considered the equivalent of <code>BehaviorProcesser</code>. The major advantages there being that it supports nullable types and actually already implements the <code>distinctUntilChanged</code> internally.</p>"},{"location":"architecture/state-streams/#loading-state-stream","title":"Loading State Stream","text":"<p>The loading of data can have multiple states. To be able to model the state of a screen effectively you'll quite often need to first model the state of an action as a state stream.</p> <p>Effectively these kind of state stream are a <code>Single&lt;T&gt;</code> which gets converted to a <code>Flowable&lt;State&lt;T&gt;&gt;</code> that will emit a loading state when it starts loading data converts any exception emitted by that <code>Single&lt;T&gt;</code> into an error state.</p> <p>A typical RxJava example of this could be as follows</p> <pre><code>fun loadDataStream(): Flowable&lt;State&gt; =\n    repository.dataOnce()\n        .map { State(data = it) }\n        .toFlowable()\n        .startWith(State(loading = true))\n        .onErrorReturn { State(error = it) }\n</code></pre> <p>In some cases a loading state stream could also contain an internal retry which would result in it first emitting a loading state. For example if the load fails twice and it has an automatic retry every 2 seconds it would result in a stream emitting the sequence <code>Loading -&gt; Failed -&gt; Loading -&gt; Failed -&gt; Loading -&gt; Loaded</code></p>"},{"location":"architecture/state-streams/#event-driven-state-streams","title":"Event-Driven State Streams","text":""},{"location":"architecture/state-streams/#reactivecomposite-state-streams","title":"Reactive/Composite State Streams","text":"<p>This is one of the most common types of state streams in the app used to model the state of a screen. They composite state stream is one that either combine or reduce state from other state streams. Those other state streams can be BehaviorProcessors, Loading State Streams or Event-Driven State Streams.</p> <p>A very basic example of such a state stream is one for the active account id. Since there is no guarantee that there is an active account, RxJava does not accept <code>null</code> values and a state stream needs to always have a value (per contract above), this type of state is often modeled through Guava's <code>Optional</code></p> <pre><code>class ActiveProfileViewModel(sessionStateRepository: SessionStateRepository) {\n  val accountIdOnceAndStream: Flowable&lt;Optional&lt;String&gt;&gt; =\n    sessionStateRepository.stateOnceAndStream\n      .map { Optional.fromNullable(it.account?.id) }\n      .startWith(Optional.absent())\n      .distinctUntilChanged()\n      .replay(1)\n      .refCount()\n}\n</code></pre> <p>The stream here is using <code>replay(1).refCount()</code> to ensure that new subscribers always get the most recently emitted state if it is still being used. See our docs on replay(1).refCount() for more details.</p> <p>Let's go one step further and say we want to have a state stream of the watchlist of the current profile.</p> <p>The SessionStateRepository emits on every change in the session, so for example also when a profile name is changed. This change does affect the watchlist of the activeProfile so it makes sense to reduce the state stream from the entire session to just the profileId, put a <code>distinctUntilChanged()</code> on that to ensure that the watchlist is only reloaded if the active profile actually changed.</p> <pre><code>class ActiveProfileViewModel(\n  sessionStateRepository: SessionStateRepository,\n  private val watchlistDataSource: WatchlistDataSource\n) {\n  val accountIdOnceAndStream: Flowable&lt;Result&lt;Watchlist?&gt;&gt; =\n    sessionStateRepository.stateOnceAndStream\n      .map { Result.success(it.account?.activeProfileId) }\n      .distinctUntilChanged()\n      .switchMap { loadWatchlist(it.getOrNull) }\n      .startWith(State.Loading(profileId = null))\n      .distinctUntilChanged()\n      .replay(1)\n      .refCount()\n\n  private fun loadWatchlist(profileId: String?): Flowable&lt;State&gt; {\n    if (profileId == null) return Flowable.just(State.NoActiveProfile)\n    return Single.just(State.Loading(profileId))\n      .concatWith(watchlistDataSource.watchlistOnce(profileId).onErrorReturn { State.Failed(profileId, it) })\n\n  }\n  sealed interface State {\n    val profileId: String? get() = null\n\n    object NoActiveProfile : State\n    data class Loading(override val profileId: String?) : State\n    data class Watchlist(override val profileId: String, val items: List&lt;Item&gt;) : State\n    data class Failed(override val profileId: String, val cause: Throwable) : State\n  }\n}\n</code></pre>"},{"location":"architecture/state-streams/#action-driven-state-stream","title":"Action Driven State Stream","text":"<p>Action driven state streams can be used either by itself or serve as input to another state stream. The idea here is very much similar to MVI where actions get converted into a state. When one action gets emitted that typically results in first a <code>Loading</code>/<code>Processing</code> state to be emitted, followed by either <code>Loaded</code>/<code>Done</code> or <code>Failed</code></p> <pre><code>val actionProcessor = PublishProcessor.create&lt;SomeAction&gt;()\n\nval stateOnceAndStream: Flowable&lt;State&gt; =\n  actionProcessor.switchMap { handleAction(it) }\n    .startWith(State.Idle)\n    .replay(1)\n    .refCount()\n\nfun handleAction(action: LoadAction): Flowable&lt;State&gt; {\n  return Single.just(State.Loading(action.id))\n    .concatWith(\n      repository.loadDataOnce(action.id)\n        .map { State.Loaded(it) }\n        .onErrorReturn { State.Failed(it) }\n    )\n}\n\ndata class LoadAction(val id: String)\n\nsealed interface State {\n  object Idle : State\n  data class Loading(val id: String) : State\n  data class Loaded(val data: Data) : State\n  data class Failed(val cause: Throwable) : State\n}\n</code></pre>"},{"location":"features/","title":"Features Index","text":""},{"location":"features/account/","title":"Account Settings","text":""},{"location":"features/account/#overview","title":"Overview","text":"<p>The Account Settings screen in the app is where authenticated users can check current account information and manage some settings related to their account. This page provides an entry point to several child pages and flows which are described below.</p> <p></p>"},{"location":"features/account/#identityonlyme-graphql-query","title":"<code>identityOnlyMe</code> graphql query","text":"<p>The Account Settings page pulls the data it needs to render from <code>SessionStateRepository</code> which is actually backed by a local cache on the device. Because requirements dictate that this page uses the most up to date data available, the app must first update that local cache.</p> <p>To achieve this, whenever the Account Settings page is shown the app sends an <code>identityOnlyMe</code> graphql query in order to update the <code>SessionState.Identity</code> data in the cache before fetching from <code>SessionStateRepository</code> and rendering the page.</p> <code>identityOnlyMe</code> response <p>This response payload is very large and subject to change as we update the graphql data schema as necessary for various features. To see a current example, take a look at the identityOnlyMe response stub used in instrumented tests. Note: this example stub response has a placeholder \"chunk\" that gets replaced with actual <code>subscriber</code> payload data specific to each test scenario. See <code>R2D2StubIdentityOnlyMeQuery</code> and its usage in instrumented tests for more info.</p>"},{"location":"features/account/#verify-account-flow","title":"Verify Account Flow","text":"<p>Sometimes (especially after a new account signup) a user will need to verify that they own the email address associated with their account. Users will see a banner at the top of the Account Settings that prompts them to verify their account. Note, this banner only appears on mobile and tablet - this feature is not built for the TV platforms.</p> <p>Users are in the \"Verify Account\" state when the session state's <code>account.attributes.userVerified</code> value is <code>false</code>.</p> <p>Note: User's in the \"Verify Account\" state are unable to change their account email address until they verify their account. The Change Email row will be grayed out and un-clickable when in this state.</p> Verify Account banner on Account Settings <p></p>"},{"location":"features/account/#verify-account-flow-steps","title":"Verify Account Flow Steps","text":"<ol> <li>User is authenticated, navigates to Account Settings and sees the Verify Account banner</li> <li>Clicks on the Verify Account banner and lands on the OtpVerifyFragment</li> <li>Enters OTP code they received via email and lands back on the Account Settings page</li> <li>App shows a brief success flash message and the Account Settings page updates to remove the Verify Account banner and make the Change Email row clickable</li> </ol> Verify Account flow chart <pre><code>    graph TB\n    A[User authenticated] --&gt;|Navigate to Account Settings| B[Account Settings];\n    B --&gt;|App paints Account Settings page| C{`account.attributes.userVerified = false`?};\n    C --&gt;|Yes| D[Verify Account banner SHOWN];\n    C --&gt;|No| E[Verify Account banner NOT SHOWN];\n    D --&gt;|User clicks Verify Account banner| F[OTP];\n    F --&gt;|Correct OTP code submitted| B[Account Settings];</code></pre> Verify Account flow screens Account Settings with Verify Account Banner OTP Account Settings"},{"location":"features/account/#instrumented-test","title":"Instrumented Test","text":"<ul> <li>VerifyAccountFlowTest<ul> <li>Only on mobile</li> </ul> </li> </ul>"},{"location":"features/account/#change-email","title":"Change Email","text":"<p>We offer users the ability to change their account email address via the Account Settings page. For more details about this functionality see the Change Email Screen</p>"},{"location":"features/account/#change-email-flow-steps","title":"Change Email Flow Steps","text":"<ol> <li>User is authenticated and navigates to Account Settings</li> <li>Clicks on the Change Email row and lands on the OtpChangeEmailFragment</li> <li>Enters OTP code they received via email and lands on the Change Email Screen</li> <li>Enters the new email address they'd like to associate with their account</li> <li>App returns to Account Settings page which updates to show the new email address and a brief success flash message is shown.</li> </ol> Change Email flow chart <pre><code>    graph TB\n    A[User authenticated] --&gt;|Navigate to Account Settings| B[Account Settings];\n    B --&gt;|App paints Account Settings page| C{`account.attributes.userVerified = false`?};\n    C --&gt;|Yes| D[Verify Account mode, Change Email UNAVAILABLE];\n    C --&gt;|No| E[Change Email AVAILABLE];\n    E --&gt;|User clicks Change Email row| F[OTP];\n    F --&gt;|Correct OTP code submitted| G[Change Email];\n    G --&gt;|User submits valid new email address| H{Log Out All Devices checked?};\n    H --&gt;|No| I[Success flash message];\n    H --&gt;|Yes| J[Logged out];\n    I --&gt;|Back to Account Settings| B[Account Settings];</code></pre> Change Email flow screens Account Settings OTP Change Email Account Settings"},{"location":"features/account/#change-password","title":"Change Password","text":"<p>We offer users the ability to change their account password via the Account Settings page. The actual password reset fragment used in this case is the <code>AccountPasswordResetFragment</code> subclass of <code>PasswordResetFragment</code>. For more details see the AccountPasswordResetFragment subsection of the OTP Screen documentation.</p>"},{"location":"features/account/#change-password-flow-steps","title":"Change Password Flow Steps","text":"<ol> <li>User is authenticated and navigates to Account Settings</li> <li>Clicks on the Change Password row and lands on the <code>AccountOtpPasscodeFragment</code></li> <li>Enters OTP code they received via email and lands on the <code>AccountPasswordResetFragment</code></li> <li>Enters a new password to use for the account</li> <li>App returns to Account Settings page and a brief success flash message is shown</li> </ol> Change Password flow chart <pre><code>    graph TB\n    A[User authenticated] --&gt;|Navigate to Account Settings| B[Account Settings];\n    B --&gt;|User clicks Change Password row| C[OTP];\n    C --&gt;|Correct OTP code submitted| D[Password Reset];\n    D --&gt;|Valid new password submitted| E{Log Out All Devices checked?};\n    E --&gt;|Yes| F[Logged out];\n    E --&gt;|No| G[Success flash message];\n    G --&gt;|Back to Account Settings| B[Account Settings];</code></pre> Change Password flow screens Account Settings OTP Password Reset Account Settings"},{"location":"features/account/#instrumented-test_1","title":"Instrumented Test","text":"<ul> <li>ChangePasswordFlowTest<ul> <li>Only on mobile</li> </ul> </li> </ul>"},{"location":"features/account/#log-out-all-devices","title":"Log Out All Devices","text":"<p>We offer users the ability to log their account out on all devices where they are currently logged in via the Account Settings page.</p>"},{"location":"features/account/#log-out-all-devices-flow-steps","title":"Log Out All Devices Flow Steps","text":"<ol> <li>User is authenticated and navigates to Account Settings</li> <li>Clicks on the \"Log out of all devices\" row and lands on the Log Out All Devices Screen</li> <li>Enters their account password</li> <li>Becomes logged out and lands back on the Welcome Screen</li> </ol> Log Out All Devices flow chart <pre><code>    graph TB\n    A[User authenticated] --&gt;|Navigate to Account Settings| B[Account Settings];\n    B --&gt;|User clicks Log Out All Devices row| C[Log Out All Devices];\n    C --&gt;|Correct password submitted| D[Logged out];\n    D --&gt; E[Welcome Screen];</code></pre> Log Out All Devices flow screens Account Settings Log Out All Devices Welcome"},{"location":"features/account/#subscriptions","title":"Subscriptions","text":"<p>The Account Settings page displays a Subscriptions section that shows the user information about their account's currently active subscriptions. Each active subscription tied to the account is represented by a row that:</p> <ul> <li>Shows a title of the subscription and appends \"Monthly\" or \"Annual\" if we can determine the duration;</li> <li>Shows some sub-copy about the current subscription; and</li> <li>If possible, allows the user to click the row in order to manage that subscription by launching a URL in a browser tab.</li> </ul>"},{"location":"features/account/#subscription-data","title":"Subscription data","text":"<p>The <code>SubscriptionCopyProvider</code> uses data from <code>SessionState.Subscriber</code> to return the proper title, subcopy, and onClick URL for a subscription row.</p>"},{"location":"features/account/#horizontal-stacking","title":"Horizontal Stacking","text":"<p>There are a number of edge case scenarios where an account can have multiple current subscriptions which are \"active\" at the same time. This is referred to as \"stacking\". There are specific rules on how the app should render multiple subscriptions based on their specific stacking state. The documentation for these rules is can be found on the FED Solution Architecture wiki.</p> <p>It is worth noting that the app will only render multiple subscription rows (regardless of the particular stacking case) on mobile and tablet. On TV, the app will render a generic \"multiple subscriptions\" row if there are multiple active subscriptions to show for an account.</p>"},{"location":"features/account/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>AccountSettingsSubsTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>AccountSettingsStackedSubsTest<ul> <li>Only on mobile</li> </ul> </li> </ul>"},{"location":"features/account/screens/change_email/","title":"Change Email Screen","text":""},{"location":"features/account/screens/change_email/#overview","title":"Overview","text":"<p>The Change Email screen (<code>ChangeEmailFragment</code>) allows the user to change their account email address. After successfully completing a change email operation, the user will have to use that new email address when logging into this app from that point forward.</p> <p></p>"},{"location":"features/account/screens/change_email/#important-page-elements","title":"Important page elements","text":""},{"location":"features/account/screens/change_email/#log-out-all-devices-checkbox","title":"Log Out All Devices checkbox","text":"<p>The Change Email screen includes a checkbox that provides an optional security feature. If the Log Out All Devices checkbox is checked when the user submits a new email address, then after successfully updating the account's email the app will log this account out on any device or browser where they are curently authenticated (including the current device).</p> <p>This feature allows users who believe their account credentials have been compromised to revoke access from any potential bad actors logged in with their account credentials on any device.</p> Change Email - Log Out All Devices checkbox <p></p>"},{"location":"features/account/screens/change_email/#updateemailwithactiongrant-graphql-mutation","title":"<code>updateEmailWithActionGrant</code> graphql mutation","text":"<p>When the user submits the desired new email address to use for their account, the app sends a <code>updateEmailWithActionGrant</code> graphql mutation to the orchestration API. The following parameters are sent to this mutation:</p> <ul> <li>the new email address;</li> <li>the <code>actionGrant</code> token received from successful OTP validation (see <code>authenticateWithOtp</code>); and</li> <li>a boolean value indicating whether the user also wants to log out of all devices;</li> </ul>"},{"location":"features/account/screens/change_email/#successful-email-change","title":"Successful email change","text":"<p>If the user submits a valid new email address (valid meaning a proper email address format and also not already in use by another account in the backend) and their <code>actionGrant</code> is not expired, the <code>updateEmailWithActionGrant</code> mutation returns a response that indicates the operation was successful.</p> <p>When this happens if the log out all devices checkbox was unchecked, the user will see a brief flash message indicating success and be returned to the Account Settings screen where their new email address will be shown.</p> <p>However if the user did check the log out all devices checkbox prior to submitting the new email address, the user will see an overlay indicating that they are logging out and they should use the new email address the next time they log in.</p> successful <code>updateEmailWithActionGrant</code> response <pre><code>{\n    \"data\": {\n        \"updateEmailWithActionGrant\": {\n            \"__typename\": \"UpdateEmailResult\",\n            \"accepted\": true\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"updateEmailWithActionGrant\",\n                \"errorCode\": null\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/account/screens/change_email/#error-handling","title":"Error handling","text":""},{"location":"features/account/screens/change_email/#client-side-email-validation","title":"Client-side email validation","text":"<p>When the user submits an email address on this page the app first does a few client-side validation checks on the input in order to catch some common issues early and prevent making an unnecessary request to the server.</p> <p>If the submitted email address input does not pass email address format validation the app handles this the same way as it would if it received an INVALID_EMAIL error response for <code>updateEmailWithActionGrant</code>.</p> <p>If the submitted email address matches the user's current account email address the app handles this the same way as it would if it received an IDENTITY_ALREADY_EXISTS error response for <code>updateEmailWithActionGrant</code>.</p>"},{"location":"features/account/screens/change_email/#invalid_email-error","title":"INVALID_EMAIL error","text":"<p>If the submitted email address is not valid and somehow got past the app's client-side email validation, the <code>updateEmailWithActionGrant</code> mutation returns an error response indicating this. In this case the app displays a form-field error under the email input field to let the user know they entered an invalid email address.</p> `updateEmailWithActionGrant\" response - invalid email error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"\",\n        \"extensions\": {\n            \"code\": \"idp.error.params.invalid-email\"\n        },\n        \"path\": [\"updateEmailWithActionGrant\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 81\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"updateEmailWithActionGrant\",\n                \"errorCode\": \"idp.error.params.invalid-email\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> Invalid email address form field error <p></p>"},{"location":"features/account/screens/change_email/#identity_already_exists-error","title":"IDENTITY_ALREADY_EXISTS error","text":"<p>If the submitted email address is already associated with another account in the backend, the <code>updateEmailWithActionGrant</code> mutation returns an error response indicating this. In this case the app displays a form-field error under the email input field to let the user know they need to select another email address for their account.</p> `updateEmailWithActionGrant\" response - identity already exists error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '409' and description 'Email address dssmessaging.matt.r+4@gmail.com already exists in OneId'\",\n        \"extensions\": {\n            \"code\": \"idp.error.identity.already-exists\"\n        },\n        \"path\": [\"updateEmailWithActionGrant\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 81\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"updateEmailWithActionGrant\",\n                \"errorCode\": \"idp.error.identity.already-exists\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> Invalid email address form field error <p></p>"},{"location":"features/account/screens/change_email/#all-other-errors","title":"All other errors","text":"<p>Any other error returned in the <code>updateEmailWithActionGrant</code> response is handled the same way. The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog displays that copy. Upon dismissal, the user will land back on the Account Settings page to re-try the operation if they desire.</p>"},{"location":"features/account/screens/change_email/#testing-change-email-in-qa-environment","title":"Testing Change Email in QA environment","text":"<p>Because you have to go through the OTP Screen in order to get to the Change Email screen, you will need an account email address that starts with <code>dssmessaging</code> in order to test Change Email in the QA environment. See Testing OTP in QA environment for more details.</p>"},{"location":"features/account/screens/change_email/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>ChangeEmailTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> </ul>"},{"location":"features/account/screens/load/","title":"Log Out All Devices (LOAD) Screen","text":""},{"location":"features/account/screens/load/#overview","title":"Overview","text":"<p>The Log Out All Devices screen (often abbreviated as \"LOAD\") allows an authenticated user to enter their account password in order to have their account logged out on all devices where it is currently authenticated  (including the current device). In code, this is the <code>LogOutAllConfirmFragment</code>.</p> <p>There are a handful of security-related reasons a user may want to do this:</p> <ul> <li>They logged in on a hotel TV or at a friend's house and forgot to log out before they left</li> <li>They disciplining a child by taking away Disney+ time on their tablet</li> <li>They believe a bad actor is currently logged in to their account and want to quickly revoke access before resetting their account password</li> </ul> <p></p>"},{"location":"features/account/screens/load/#important-page-elements","title":"Important page elements","text":""},{"location":"features/account/screens/load/#forgot-password-cta","title":"Forgot Password CTA","text":"<p>The user can click the \"Forgot Password?\" CTA to launch into the Change Password Flow. They will see the <code>AccountOtpPasscodeFragment</code> where they enter the OTP code emailed to them. Then they will see the <code>AccountPasswordResetFragment</code> where they can update their account password. After successfully updating their password they will land back on the Log Out All Devices screen where they can enter the new password to complete the log out all devices operation.</p> Log Out All Devices -&gt; Forgot Password flow chart <pre><code>    graph TB\n    A[User authenticated] --&gt;|Navigate to Account Settings| B[Account Settings];\n    B --&gt;|Log Out All Devices row clicked| C[Log Out All Devices];\n    C --&gt;|'Forgot Password?' CTA clicked| D[OTP];\n    D --&gt;|Correct OTP code submitted| E[Password Reset];\n    E --&gt;|Valid new password submitted| C[Log Out All Devices];\n    C --&gt;|Correct password submitted| F[Logged out];\n    F --&gt; G[Welcome Screen];</code></pre>"},{"location":"features/account/screens/load/#logoutalldevices-graphql-mutation","title":"<code>logoutAllDevices</code> graphql mutation","text":"<p>When the user submits their password on this screen, the app sends a <code>logoutAllDevices</code> graphql mutation to the orchestration API passing along the current account's email address and the submitted password as arguments.</p>"},{"location":"features/account/screens/load/#logoutalldevices-success","title":"<code>logoutAllDevices</code> success","text":"<p>If the user submitted the correct password for the current account, the <code>logoutAllDevices</code> graphql mutation returns a response indicating that the operation was successful.</p> <p>What the success response really means is that the backend has found all currently \"active\" authenticated tokens that it has a record of for the current account and invalidates those tokens. The next time a user opens the app on another device where they were already logged in with this account, the app will make some authenticated request and the backend will send back an error code that prompts the app to immediately log out.</p> successful <code>logoutAllDevices</code> response <pre><code>{\n    \"data\": {\n        \"logoutAllDevices\": {\n            \"__typename\": \"LogoutAllDevicesResult\",\n            \"accepted\": true\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"logoutAllDevices\",\n                \"errorCode\": null\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/account/screens/load/#error-handling","title":"Error handling","text":""},{"location":"features/account/screens/load/#invalid_credentials","title":"INVALID_CREDENTIALS","text":"<p>If the password the user submitted was incorrect for the currently authenticated account, the <code>logoutAllDevices</code> mutation returns an error response that indicates this. In this case, the app displays a form-field error under the password input field to let the user know they entered the wrong password.</p> <code>logoutAllDevices</code> response - incorrect password error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '401' and description 'Bad credentials sent for disney/matt.rein@disneystreaming.com'\",\n        \"extensions\": {\n            \"code\": \"idp.error.identity.bad-credentials\"\n        },\n        \"path\": [\"logoutAllDevices\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 61\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"logoutAllDevices\",\n                \"errorCode\": \"idp.error.identity.bad-credentials\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> Incorrect password form field error <p></p>"},{"location":"features/account/screens/load/#password_reset_required","title":"PASSWORD_RESET_REQUIRED","text":"<p>If the user's account is security flagged in the backend to force the user to reset their account password, the <code>logoutAllDevices</code> mutation returns an error response that indicates this. In this case, the app routes the user into the OTP -&gt; Password Reset flow just as if the user had clicked the Forgot Password CTA.</p> <code>logoutAllDevices</code> response - password reset required error <pre><code>{\n    \"data\": null,\n        \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '401' and description 'Password reset required.'\",\n        \"extensions\": {\n            \"code\": \"idp.error.identity.password-reset-required\"\n        },\n        \"path\": [\"logoutAllDevices\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 61\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"logoutAllDevices\",\n                \"errorCode\": \"idp.error.identity.password-reset-required\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/account/screens/load/#all-other-errors","title":"All other errors","text":"<p>Any other error returned in the <code>logoutAllDevices</code> mutation response is handled the same way. The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog displays that copy. Upon dismissal, the user will land back on the Account Settings page to re-try the operation if they desire.</p>"},{"location":"features/account/screens/load/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>LogOutAllDevicesTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> </ul>"},{"location":"features/app-linking/","title":"Digital Asset Links / Android App Links","text":""},{"location":"features/app-linking/#background","title":"Background","text":"<p>In Android 6.0, Android App Linking was introduced. This allows us to do two things:</p> <ol> <li>Associate an application with a web domain that is owned by the developer. This allows us to indicate to the android system that <code>https://www.disneyplus.com</code> and <code>https://www.starplus.com</code> are owned by us, thus ensuring any links clicked are handled by our applications by default.</li> <li>Share credentials from Chrome's password storing in to our application via Smart Lock.</li> </ol> <p>In order for this to work, we must do the following:</p> <ul> <li>Add the intent filter with <code>autoVerify</code> in the manifest. This is currently done in our mobile <code>AndroidManifest</code> (see here).<ul> <li>There are some caveats, however:<ol> <li>This only works on hosts that are capable of hosting the <code>assetlinks.json</code> file without a 302 redirect.</li> <li>This only works if there are no custom urls scheme included in the <code>&lt;intent-filter&gt;</code>. It may only include <code>http</code> and <code>https</code><ul> <li>Note: Number one applies here still. So, if <code>http://www.disneyplus.com</code> (non-secure) redirects to <code>https://www.disneyplus.com</code> (secure), the app linking will break.</li> </ul> </li> </ol> </li> </ul> </li> <li>Declare association between our application and our website.</li> </ul>"},{"location":"features/app-linking/#declaring-association","title":"Declaring Association","text":"<p>First, it is best to get up to speed by reading Google's Documentation (as well as additional documentation below in the Additional Resources). Secondly, it's important to understand that these files have already been created for Disney+ and Star+. This portion of the documentation will show how to get some of the data needed for the files as well as how to update the files via our git repositories.</p>"},{"location":"features/app-linking/#updating-assetlinksjson","title":"Updating <code>assetlinks.json</code>","text":"<p>In order to update the <code>assetlinks.json</code> file, you will need to follow the instructions below:</p> <ul> <li>Pull down the following repository: site-dominguez/android-wellknown.<ul> <li>If you do not have access, please ask for access in the <code>#web-core-services</code> channel on Slack.</li> </ul> </li> <li>Create a new branch.</li> <li>Find the necessary file.<ul> <li>If updating Disney+, use the <code>files/disneyPlus/assetlinks.json</code> file.</li> <li>If updating Star+, use the <code>/files/starPlus/assetlinks.json</code> file.</li> </ul> </li> <li>Make the changes</li> <li>Push the branch</li> <li>Open a PR.</li> <li>Here is an example PR.</li> </ul>"},{"location":"features/app-linking/#finding-the-fingerprint-of-an-apk","title":"Finding the Fingerprint of an APK","text":"<p>The <code>assetlinks.json</code> file uses the SHA-256 fingerprint of the keystore for security reasons. You will need to find the keystore of the application that you are wanting to add to the fingerprints. For example, in this PR, we added the fingerprint of the debug keystore. This can be done in the following way:</p> <ul> <li>Obtain the keystore of the application you are looking to find the SHA-256 fingerprint for.<ul> <li>You will need the keystore and the keystore password.</li> </ul> </li> <li>Open a terminal to where the keystore is found.</li> <li>Run the following command:</li> </ul> <pre><code>keytool -list -v -keystore /Path/To/keystore.jks\n</code></pre> <ul> <li>You will then be prompted to enter the keystore password. Enter the password.</li> <li>You will see an output similar to the one below<ul> <li>This was generated by getting the default debug keystore in the Android SDK: <code>keytool -list -v -keystore ~/.android/debug.keystore</code></li> </ul> </li> </ul> <pre><code>Alias name: androiddebugkey\nCreation date: Jul 28, 2020\nEntry type: PrivateKeyEntry\nCertificate chain length: 1\nCertificate[1]:\nOwner: C=US, O=Android, CN=Android Debug\nIssuer: C=US, O=Android, CN=Android Debug\nSerial number: 1\nValid from: Tue Jul 28 13:21:55 EDT 2020 until: Thu Jul 21 13:21:55 EDT 2050\nCertificate fingerprints:\n     SHA1: 7C:F8:75:EE:09:A4:15:E4:0C:A3:DF:5E:89:CE:4E:07:CE:F5:5E:18\n     SHA256: 00:F9:9D:90:65:78:42:D8:EE:6D:D1:F8:A2:1D:F8:21:B5:13:B3:E9:6B:15:62:E4:CC:E0:C7:DC:09:D1:20:BB\nSignature algorithm name: SHA1withRSA (weak)\nSubject Public Key Algorithm: 2048-bit RSA key\nVersion: 1\n</code></pre> <ul> <li>The <code>SHA256</code> is the relevant data.</li> </ul>"},{"location":"features/app-linking/#verifying-app-links","title":"Verifying App Links","text":"<p>You can verify that the App Links have been established successfully.</p> <p>First way to do so is via automatic verification. To do this, simply install the APK's and look for the <code>IntentFilterIntentOp</code> tag. You will see similar messages to the following:</p> <pre><code># Disney+\nI/IntentFilterIntentOp: Verifying IntentFilter. verificationId:61 scheme:\"https\" hosts:\"www.disneyplus.com\" package:\"com.disney.disneyplus\". [CONTEXT service_id=244 ]\nI/IntentFilterIntentOp: Verification 61 complete. Success:true. Failed hosts:. [CONTEXT service_id=244 ]\n\n# Star+\nI/IntentFilterIntentOp: Verifying IntentFilter. verificationId:62 scheme:\"https\" hosts:\"www.starplus.com\" package:\"com.disney.starplus\". [CONTEXT service_id=244 ]\nI/IntentFilterIntentOp: Verification 62 complete. Success:true. Failed hosts:. [CONTEXT service_id=244 ]\n</code></pre> <p>On Android 12 and above, one can do manual verification using ADB.</p> <ul> <li>First, until we target API 31, we will need to run the following command to enable the new verification process that is included in Android 12. Once we update to API 31, it is enabled by default. TODO - DMGZAND-8999 - We can remove this.<ul> <li><code>adb shell am compat enable 175408749 com.disney.disneyplus</code></li> <li><code>adb shell am compat enable 175408749 com.disney.starplus</code></li> </ul> </li> <li>Next, reset the state of Android App Links on the your device, so that the device behaves as if the user has never chosen a default app:<ul> <li><code>adb shell pm set-app-links --package com.disney.disneyplus 0 all</code></li> <li><code>adb shell pm set-app-links --package com.disney.starplus 0 all</code></li> </ul> </li> <li>Perform the verification:<ul> <li><code>adb shell pm verify-app-links --re-verify com.disney.disneyplus</code></li> <li><code>adb shell pm verify-app-links --re-verify com.disney.starplus</code></li> </ul> </li> <li>Note: It is important to wait a few minutes here. The above command performs network requests on the domains that are attempting to be verified. Without waiting to perform the next step, the results may be wrong.</li> <li>Review the results:<ul> <li><code>adb shell pm get-app-links com.disney.disneyplus</code></li> <li><code>adb shell pm get-app-links com.disney.starplus</code></li> </ul> </li> <li>You will see results similar to below:</li> </ul> <pre><code># Disney+\ncom.disney.disneyplus:\n  ID: 2c23415e-09dc-4912-9312-a82ece8bc258\n  Signatures: [71:DC:D3:86:D7:50:C2:4A:0E:64:C1:B7:F7:43:B5:BC:79:90:03:D0:68:EC:B1:75:F3:0C:97:C3:84:E3:CC:2F]\n  Domain verification state:\n    www.disneyplus.com: verified\n\n# Star+\ncom.disney.starplus:\n  ID: 454b344c-cdc9-45b9-9d83-40b17e708062\n  Signatures: [71:DC:D3:86:D7:50:C2:4A:0E:64:C1:B7:F7:43:B5:BC:79:90:03:D0:68:EC:B1:75:F3:0C:97:C3:84:E3:CC:2F]\n  Domain verification state:\n    www.starplus.com: verified\n</code></pre>"},{"location":"features/app-linking/#additional-resources","title":"Additional Resources","text":"<ul> <li>Our current links:<ul> <li>Disney+</li> <li>Star+</li> </ul> </li> <li>Disney Streaming android-wellknown repo<ul> <li>Example PR</li> </ul> </li> <li>Digital Asset Link Documentation</li> <li>App Link Developer Overview</li> <li>Verifying App Links on Android 12</li> </ul>"},{"location":"features/auth/","title":"Authentication &amp; Signup","text":"<p>Authentication is all about how a user logs into the application. Signup is an important subset of authentication where new users can create a new account for the application.</p>"},{"location":"features/auth/#login-flows","title":"Login flows","text":""},{"location":"features/auth/#happy-path","title":"Happy Path","text":"<p>The simplest flow (we'll call it the \"happy path\") is where an unauthenticated user:</p> <ol> <li>Launches the app and lands on the Welcome screen</li> <li>Clicks the Login CTA to land on the Login Email screen</li> <li>Submits their email address and lands on the Login Password screen</li> <li>Submits their password</li> </ol> <p>At this point, the user is authenticated. This means the access token stored in the app's cache is associated with their account and can be used to make API requests that require an authenticated token. They should be able to access the main part of the app as long as they have an active entitlement.</p> Login happy path flow chart <pre><code>    graph TB\n    A[Welcome] --&gt;|Login CTA click| B[Login Email];\n    B --&gt;|User submits email| C{`check` response includes `Login`?};\n    C --&gt;|Yes| D[Login Password];\n    D --&gt;|Correct password submitted| E[Authenticated];</code></pre> Login happy path screens Welcome Login Email Login Password A user will remain logged in until <ul> <li>Performing a Log Out on that device.</li> <li>Performing  \"Log Out Of All Devices\" while logged into this account on any device including the current one.</li> <li>Their access token expires after not using the app for a long period of time. In the PROD environment this takes several months of not using the app to occur.</li> <li>Some other process in the backend which could invalidate any existing access tokens associated with the account as a security measure.</li> </ul>"},{"location":"features/auth/#edge-cases","title":"Edge Cases","text":""},{"location":"features/auth/#login-forgot-password","title":"Login Forgot Password","text":"<p>In this case, the unauthenticated user:</p> <ol> <li>Launches the app and lands on the Welcome screen</li> <li>Clicks the Login CTA to land on the Login Email screen</li> <li>Submits their email address and lands on the Login Password screen</li> <li>Clicks the \"Forgot Password?\" CTA and lands on the OTP screen</li> <li>Enters OTP code they received via email and lands on the Password Reset screen</li> <li>Enters a new password for the account</li> </ol> <p>Upon successfully updating their password, the user is authenticated.</p> Login Forgot Password flow chart <pre><code>    graph TB\n    A[Welcome] --&gt;|Login CTA click| B[Login Email];\n    B --&gt;|User submits email| C{`check` response includes `Login`?};\n    C --&gt;|Yes| D[Login Password];\n    D --&gt;|Forgot Password CTA click| E[OTP];\n    E --&gt;|Correct OTP code submitted| F[Password Reset];\n    F --&gt;|Valid new password submitted| G[Authenticated];</code></pre> Login Forgot Password screens Welcome Login Email Login Password OTP Password Reset"},{"location":"features/auth/#otp-login","title":"OTP Login","text":"<p>In this case, the unauthenticated user:</p> <ol> <li>Launches the app and lands on the Welcome screen</li> <li>Clicks the Login CTA to land on the Login Email screen</li> <li>Submits their email address and lands on the OTP screen</li> <li>Enters OTP code they received via email</li> </ol> <p>Upon successfully entering the correct OTP code, the user is authenticated.</p> OTP Login flow chart <pre><code>    graph TB\n    A[Welcome] --&gt;|Login CTA click| B[Login Email];\n    B --&gt;|User submits email| C{`check` response contains just `OTP`?};\n    C --&gt;|Yes| D[OTP];\n    D --&gt;|User submits correct OTP code| E{`authenticateWithOtp` response has `securityAction: ChangePassword`?};\n    E --&gt;|No| F[Authenticated];</code></pre> OTP Login screens Welcome Login Email OTP"},{"location":"features/auth/#otp-login-forced-password-reset","title":"OTP Login -&gt; Forced Password Reset","text":"<p>In this case, the unauthenticated user:</p> <ol> <li>Launches the app and lands on the Welcome screen</li> <li>Clicks the Login CTA to land on the Login Email screen</li> <li>Submits their email address and lands on the OTP screen</li> <li>Enters OTP code they received via email and receives a response with <code>securityAction: ChangePassword</code></li> <li>Lands on the Password Reset screen</li> <li>Enters a new password for the account</li> </ol> <p>Upon successfully updating their password, the user is authenticated.</p> OTP Login -&gt; Forced Password Reset flow chart <pre><code>    graph TB\n    A[Welcome] --&gt;|Login CTA click| B[Login Email];\n    B --&gt;|User submits email| C{`check` response contains just `OTP`?};\n    C --&gt;|Yes| D[OTP];\n    D --&gt;|User submits correct OTP code| E{`authenticateWithOtp` response has `securityAction: ChangePassword`?};\n    E --&gt;|Yes| F[Password Reset];\n    F --&gt;|Valid new password submitted| G[Authenticated];</code></pre> OTP Login -&gt; Forced Password Reset screens Welcome Login Email OTP Password Reset"},{"location":"features/auth/#signup-flows","title":"Signup Flows","text":""},{"location":"features/auth/#signup-happy-path","title":"Signup Happy Path","text":"<p>This is the typical flow that a user signing up for a new account for the app will see.</p> <ol> <li>Launches app and lands on the Welcome screen</li> <li>Clicks the \"Sign Up Now\" CTA to land on the Signup Email screen</li> <li>If the user is in a country that requires showing a Disclosure Review step, they will see the Disclosure Review screen, otherwise this step is skipped</li> <li>Lands on the Signup Password screen</li> <li>Creates and submits a new password</li> </ol> <p>At this point a new account was created and the user is authenticated. Since all new accounts start out unsubscribed, the user will be routed to the Paywall screen next.</p> Signup happy path flow chart <pre><code>graph TB\n  A[Welcome] --&gt;|Signup CTA click| B[Signup Email];\n  B --&gt;|User submits email| C{`check` response includes `Register`?};\n  C --&gt;|Yes| D{activeReviewDisclosures count?};\n  D --&gt;|0| F[Signup Password];\n  D --&gt;|&gt;0| E[Disclosure Review];\n  E --&gt;|User agrees| F[Signup Password];\n  F --&gt;|Valid password submitted| G[Authenticated];</code></pre> Signup happy path screens Welcome Signup Email Disclosure Review (optional) Signup Password"},{"location":"features/auth/#edge-cases_1","title":"Edge Cases","text":""},{"location":"features/auth/#signup-email-login-happy-path","title":"Signup Email -&gt; Login Happy Path","text":"<p>It's possible that a user may have forgotten that they already have an account associated with the email address they are trying to Signup with. When this happens we seamlessly send the user from the Signup Email page to the Login Password page so that they can just login to that account normally.</p> <ol> <li>Launches the app and lands on the Welcome screen</li> <li>Clicks the \"Sign Up Now\" CTA to land on the Signup Email screen</li> <li>Submits their email address and lands on the Login Password screen</li> <li>Submits their password</li> </ol> <p>Upon successfully updating their password, the user is authenticated.</p> Signup Email -&gt; Login Happy Path flow chart <pre><code>graph TB\n  A[Welcome] --&gt;|Signup CTA click| B[Signup Email];\n  B --&gt;|User submits email| C{`check` response includes `Login`?};\n  C --&gt;|Yes| D[Login Password];\n  D --&gt;|Correct password submitted| E[Authenticated];</code></pre> Signup Email -&gt; Login Happy Path screens Welcome Signup Email Login Password"},{"location":"features/auth/#signup-email-otp-login","title":"Signup Email -&gt; OTP Login","text":"<p>This flow is similar to the Signup Email -&gt; Login Happy Path flow above. In this case a user who already has an account attempts to signup with that account's email address. However unlike the above flow, the account is flagged to force the user into the OTP authentication (and possibly the forced password reset flow).</p> <ol> <li>Launches the app and lands on the Welcome screen</li> <li>Clicks the \"Sign Up Now\" CTA to land on the Signup Email screen</li> <li>Submits their email address and lands on the OTP screen</li> <li>Enters OTP code they received via email</li> </ol> <p>Upon successfully entering the correct OTP code, the user is authenticated.</p> Signup Email -&gt; OTP Login flow chart <pre><code>graph TB\n  A[Welcome] --&gt;|Signup CTA click| B[Signup Email];\n  B --&gt;|User submits email| C{`check` response contains `OTP`, nextAction: `Login`?};\n  C --&gt;|Yes| D[OTP];\n  D --&gt;|User submits correct OTP code| E{`authenticateWithOtp` response has `securityAction: ChangePassword`?};\n  E --&gt;|No| F[Authenticated];\n  E --&gt;|Yes| G[Password Reset];\n  G --&gt;|Valid new password submitted| F[Authenticated];</code></pre> Signup Email -&gt; OTP Login screens Welcome Signup Email OTP"},{"location":"features/auth/#registeraccount","title":"RegisterAccount","text":"<p>The RegisterAccount flow is a special case where a user already has an account for one app (e.g. Disney+) and they attempt to sign up for a new account for one of our other apps (e.g. Star+) using the same email address. For example, a user already has a Disney+ account with email address <code>mickey.mouse@twdc.com</code> and they try to sign up for a Star+ account with that same email address.</p> <p>The idea here is that both of these \"accounts\" (one for Star+ and one for Disney+) are connected to the same \"identity\" in the backend. The accounts will effectively share the same credentials. This means that later if the user changes their account's password on Disney+, they will need to use that new password to log in to Star+ next time.</p> <p>Here are the steps in the typical RegisterAccount signup flow:</p> <ol> <li>User launches the app and lands on the Welcome screen</li> <li>Clicks the \"Sign Up Now\" CTA to land on the Signup Email screen</li> <li>If the user is in a country that requires showing a Disclosure Review step, they will see the Disclosure Review screen, otherwise this step is skipped</li> <li>Lands on the RegisterAccount Password screen</li> <li>Submits their identity's password to create a new account for this app</li> </ol> <p>At this point a new account was created and attached to the user's existing \"identity\" and the user is authenticated.</p> RegisterAccount flow chart <pre><code>graph TB\n  A[Welcome] --&gt;|Signup CTA click| B[Signup Email];\n  B --&gt;|User submits email| C{`check` response includes `RegisterAccount`?};\n  C --&gt;|Yes| D{activeReviewDisclosures count?};\n  D --&gt;|0| F[RegisterAccount Password];\n  D --&gt;|&gt;0| E[Disclosure Review];\n  E --&gt;|User agrees| F[RegisterAccount Password];\n  F --&gt;|Correct password submitted| G[Authenticated];</code></pre> RegisterAccount screens Welcome Signup Email Disclosure Review (optional) RegisterAccount Password"},{"location":"features/auth/#otp-registeraccount","title":"OTP RegisterAccount","text":"<p>The OTP RegisterAccount flow is sort of a combination of the RegisterAccount flow and the OTP Login -&gt; Forced Password Reset flow. In this case, a user already has an account for one app (e.g. Disney+) and they attempt to sign up for a new account with one of our other apps (e.g. Star+), just like the RegisterAccount flow. The difference here is that the existing account (for the first app) is in a Security Flagged state and requires a password reset. This flow handles both the new account creation as well as the password reset in one sequence of screens.</p> <p>Here are the steps for the OTP RegisterAccount signup flow:</p> <ol> <li>User launches the app and lands on the Welcome screen</li> <li>Clicks the \"Sign up Now\" CTA to land on the Signup Email screen</li> <li>Submits their email address</li> <li>If the user is in a country that requires showing a Disclosure Review step, they will see the Disclosure Review screen, otherwise this step is skipped</li> <li>Lands on the OTP screen</li> <li>Enters OTP code they received via email and receives a response with <code>securityAction: ChangePassword</code></li> <li>Lands on the Password Reset screen</li> <li>Enters a new password for the account</li> </ol> <p>Upon successfully updating their password, the app calls the <code>registerWithActionGrant</code> graphql query to also create an account for the user for the current application, and the user is authenticated.</p> OTP RegisterAccount flow chart <pre><code>    graph TB\n    A[Welcome] --&gt;|Signup CTA click| B[Signup Email];\n    B --&gt;|User submits email| C{`check` response contains `OTP`, nextAction: `RegisterAccount`?};\n    C --&gt;|Yes| D{activeReviewDisclosures count?};\n    D --&gt;|0| F[OTP];\n    D --&gt;|&gt;0| E[Disclosure Review];\n    E --&gt;|User agrees| F[OTP];\n    F --&gt;|User submits correct OTP code| G{`authenticateWithOtp` response has `securityAction: ChangePassword`?};\n    G --&gt;|Yes| H[Password Reset];\n    H --&gt;|Valid new password submitted| I[Authenticated];</code></pre> OTP RegisterAccount screens Welcome Signup Email Disclosure Review (optional) OTP Password Reset"},{"location":"features/auth/#after-authentication","title":"After Authentication","text":"<p>The next page the user will land on after getting authenticated is determined by a number of factors. They may land on:</p>"},{"location":"features/auth/#marketing-opt-in","title":"Marketing Opt In","text":"<p>There are edge case scenarios where we need to force a user to agree to our legal disclosures and indicate whether they want to opt in or out of receiving marketing communications before actually using the app. When <code>identity.flows.marketingPreferences.isOnboarded = false</code> and <code>identity.flows.marketingPreferences.isOnboarded = true</code>, the user will be shown the Marketing Opt In page. This page forces the user to \"agree\" to the current set of legal disclosures and choose to opt in or out of marketing preferences before they can enter the rest of the app and start streaming anything.</p> Marketing Opt In screen Marketing Opt In"},{"location":"features/auth/#paywall","title":"Paywall","text":"<ul> <li>This is where the user can make an In App Purchase (IAP) for a monthly or annual subscription for the app</li> <li>The user will land here after authenticating if their account does not have an active subscription / entitlement for the app.</li> </ul> Paywall screens Paywall"},{"location":"features/auth/#whos-watching","title":"Who's Watching","text":"<ul> <li>Also known as the Profile Picker</li> <li>A user who has more than one profile associated with their account will land here<ul> <li>On mobile and tablet, they only land here once until they choose a profile to use, regardless of how many profiles they have.</li> <li>On TV, users with multiple profiles will always land on the Profile Picker when launching the app while authenticated.</li> </ul> </li> </ul> Who's Watching screen Who's Watching"},{"location":"features/auth/#home","title":"Home","text":"<p>This is the main page where users can start exploring content to watch.</p> Home screen Home"},{"location":"features/auth/screens/disclosure_review/","title":"Disclosure Review Screen","text":""},{"location":"features/auth/screens/disclosure_review/#overview","title":"Overview","text":"<p>The laws in certain countries (e.g. Germany) require apps to provide an easy way for users to read the entirety of certain legal documents and explicitly \"agree\" to them during account signup.  The Disclosure Review screen fulfills this requirement by providing:</p> <ul> <li>a scrollable window showing an entire legal document text; and</li> <li>a CTA that the user must press to agree to the terms displayed and progress to the next step of the onboarding flow</li> </ul> <p></p>"},{"location":"features/auth/screens/disclosure_review/#data","title":"Data","text":"<p>The Disclosure Review screen requires a list of <code>LegalDisclosure</code>s whose <code>requiresActiveReview</code> flag is set to <code>true</code> to be provided as an argument.  This list comes from the Graph <code>anonymousDocuments</code> query. The response contains the full legal text to display as well as a list of metadata to support any hyper-linkable chunks of the copy that the client app should linkify.</p> Disclosure Review can show multiple instances if there are multiple active review disclosures <p>So far, in all of the countries where the app is live there are either 0 or 1 <code>LegalDisclosure</code>s with <code>requiresActiveReview = true</code>.  This means that all users will either NOT see any Disclosure Review pages (when there are 0), or see only one Disclosure Review page (when there is 1).  That said, this page is built to dynamically handle if there happen to be more than 1 <code>LegalDisclosure</code>s that require active review.  This is why the page receives a list of <code>LegalDisclosure</code>s as well as an integer value representing the index in that list of the <code>LegalDisclosure</code> to use for the currently showing instance of the Disclosure Review screen.</p>"},{"location":"features/auth/screens/disclosure_review/#error-handling","title":"Error handling","text":"<p>When the documents query fails to load for any reason, we are unable to render the Disclosure Review page.  Since we have never received specific error handling requirements, the app displays a full-bleed error dialog showing the generic \"Error code 83\" user-facing error message if there are any issues loading the data required from this endpoint.</p>"},{"location":"features/auth/screens/disclosure_review/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>PaywallFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>SignupFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> </ul>"},{"location":"features/auth/screens/legal_center/","title":"Legal Center Screen","text":""},{"location":"features/auth/screens/legal_center/#overview","title":"Overview","text":"<p>The Legal Center screen lets users read all of the legal documents that they agree to when signing up for an account. The page is fully dynamic because legal documents differ between different countries and territories that our apps are available in. All data in this screen comes from the Graph API <code>meDocuments</code> query.</p> <p></p>"},{"location":"features/auth/screens/legal_center/#important-page-elements","title":"Important page elements","text":""},{"location":"features/auth/screens/legal_center/#selectable-legal-doc-titles","title":"Selectable Legal Doc Titles","text":"<p>Most (if not all) of the countries that our apps are available in have multiple legal documents that appear in the Legal Center. Design requirements call for the full copy of only one document to be displayed at a time. The Legal Center therefore displays a listing of the titles of all of the legal documents for the current region. The user can click (mobile) or select (tv) one of the titles to expand and display the full legal document copy for that title.</p>"},{"location":"features/auth/screens/legal_center/#scrollable-legal-doc-contents","title":"Scrollable Legal Doc Contents","text":"<p>The Legal Center displays a scrollable view that displays the full copy of the currently \"selected\" legal document title.</p> <p>Some slight design differences exist here between mobile and TV. On mobile, clicking a title row will expand a Scrollable Legal Doc Contents view directly below that title inline. However on TV, the titles all appear in a separate scrollable list on the left side of the screen, while the copy of the currently selected legal document is displayed in a single scrollable view on the right hand side.</p>"},{"location":"features/auth/screens/legal_center/#links-in-legal-doc-contents","title":"Links in Legal Doc Contents","text":"<p>The data payload for an individual legal document includes a list of link data that the app uses to dynamically linkify the appropriate words in the copy. These links can point to:</p> <ul> <li>A URL, which when clicked will launch in a browser tab; or</li> <li>A documentCode which refers to another legal document, which when clicked will expand that other document in the Legal Center</li> </ul> <p>On mobile, we actually apply the blue underlined hyperlink style and make the linkified copy clickable. However on TV devices since there is no web browser present, our requirements are to display the backing URL from the links data inline in the copy in parentheses next to the words that should be linkified.</p>"},{"location":"features/auth/screens/legal_center/#graph-documents-query","title":"Graph Documents query","text":"<p>The Legal Center screen is populated dynamically by the data returned from the Graph Documents query. Based on the user's logged in state, we either query <code>anonymousDocuments</code> or <code>meDocuments</code>. This response data provides the list of documents to display for the current region, including their content.</p> <code>meDocuments</code> example response <p>This response payload is very large. To see a current example, take a look at the stub response we use in instrumented tests.</p> <code>anonymousDocuments</code> example response <p>This response payload is very large. To see a current example, take a look at the stub response we use in instrumented tests.</p>"},{"location":"features/auth/screens/legal_center/#error-handling","title":"Error handling","text":"<p>When the documents fail to load for any reason, we are unable to render the Legal Center page. Since we have never received specific error handling requirements for site config, the app displays a full-bleed error dialog showing the generic \"Error code 83\" user-facing error message if there are any issues loading the data required from this endpoint.  documentation should be updated to reflect this at the time that work is completed on Android.</p>"},{"location":"features/auth/screens/legal_center/#restricted-onboarding-language","title":"Restricted Onboarding Language","text":"<p>Having all the different legal documents for different countries translated to all languages that the app supported is cost prohibitive. To solve this the app enforces Restricted Onboarding Language (ROL) rules.</p> <p>The idea of ROL is that we limit the number of languages that legal documents will be translated to for any given country or territory to just a handful of languages that make sense for that region. For example, in Canada, legal documents are only available in English and French, whereas in the US, English and Spanish.</p> <p>In order to not provide a jarring experience for users going through onboarding flows, whatever ROL language for a certain region is determined to be the best one for the current user is used not just on the Legal Center page, but rather all of the onboarding (unauthenticated) pages of the app. This way a user doesn't see the Welcome screen in one language, but the Legal Center in another.</p>"},{"location":"features/auth/screens/legal_center/#entry-points","title":"Entry points","text":"<p>Users can access the Legal Center screen two different ways (described below).</p>"},{"location":"features/auth/screens/legal_center/#unauthenticated-entry-point","title":"Unauthenticated entry point","text":"<p>Before a user is authenticated, they can access the Legal Center screen via the Signup Email screen. On mobile, the user can click one of the hyperlinks in the Legal Disclosures copy displayed above the \"Agree and Continue\" primary CTA. On TV, because we don't linkify the Legal Disclosures copy on Signup Email, a secondary CTA is shown below the primary that allows users to access the Legal Center.</p>"},{"location":"features/auth/screens/legal_center/#authenticated-entry-point","title":"Authenticated entry point","text":"<p>After a user is authenticated, they can access the Legal Center via the \"Legal\" row in the Settings menu of the app.</p>"},{"location":"features/auth/screens/legal_center/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>LegalCenterOnboardingTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>LegalCenterAuthenticatedTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> </ul>"},{"location":"features/auth/screens/login_email/","title":"Login Email Screen","text":""},{"location":"features/auth/screens/login_email/#overview","title":"Overview","text":"<p>The Login Email page is the first step for a user who already has an account to login and become authenticated.  At this step the user enters the email address associated with their account.  The next page a user will see depends on the response from the <code>check</code> API that the email address is submitted to. The most common use case (happy path) is that the user will see the Login Password page so that they can simply enter their password to log in.</p> <p></p>"},{"location":"features/auth/screens/login_email/#check-query","title":"<code>check</code> query","text":"<p>When the user submits their email address, the application passes the entered email address to the orchestration API's <code>check</code> query.  The response for this query contains an <code>operations</code> array, and the values in this array indicates what the backend \"knows\" about an account with this email address and therefore what screen the user should see next in their onboarding journey.</p>"},{"location":"features/auth/screens/login_email/#login-response","title":"<code>\"Login\"</code> response","text":"<code>check</code> response - operation: <code>\"Login\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"Login\", \"OTP\"],\n            \"nextOperation\": null\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>This is the happy path response.</p> <p>When the response's <code>operations</code> array contains a <code>\"Login\"</code>, this indicates that the user should be able to just enter the password associated with the provided email address in order to log in.  The app will route the user to the Login Password in this case.</p> A note about the happy path response <p>As you will see in the example response above, <code>\"Login\"</code> operation is almost always delivered as a pair with <code>\"OTP\"</code> in the <code>operations</code> array.  This is because in theory the user is also able to just login with an OTP code in order become authenticated. The app does not really offer a way for the user to do this mode of authentication for users at this time so you can disregard this part of the <code>check</code> response.  The app code just looks for any occurence of <code>\"Login\"</code> in the <code>operations</code> array to determine this case, ignoring whatever else might be in the array.</p>"},{"location":"features/auth/screens/login_email/#register-response","title":"<code>\"Register\"</code> response","text":"<code>check</code> response - operation: <code>\"Register\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"Register\"],\n            \"nextOperation\": null\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>When the <code>operations</code> array contains <code>\"Register\"</code>, this means that the email address provided does not match any account in our system, and so we prompt the user to double check the email address they entered for typos or to sign up for a new account with that email address.</p> Sign up or Try again <p></p> <ul> <li> <p>If the user clicks the \"Sign Up\" CTA, we route the user to the Signup Email page, and pre-populate the email address they had submitted.</p> </li> <li> <p>If the user clicks the \"Try Again\" CTA, the dialog dismisses and they remain on this page, now with a form-field error showing that indicates there was an issue with the email address they had submitted.</p> Invalid email address form field error <p></p> </li> </ul>"},{"location":"features/auth/screens/login_email/#registeraccount-response","title":"<code>\"RegisterAccount\"</code> response","text":"<code>check</code> response - operation: <code>\"RegisterAccount\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"RegisterAccount\"],\n            \"nextOperation\": null\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>When the <code>operations</code> array contains <code>\"RegisterAccount\"</code>, this means that there is an account in the backend for the provided email, but it is not an account for the particular app that the user is attempting to log in on. For example a user may have a Star+ account but not a Disney+ account yet.  If they were to try and log in with that email address on Disney+ they receive this response for the <code>check</code> query.</p> <p>When this happens, the user is presented a dialog prompting them to enter the RegisterAccount flow.  Clicking the OK CTA sends them to the Signup Email page to start that flow.</p> RegisterAccount dialog <p></p>"},{"location":"features/auth/screens/login_email/#otp-nextoperation-login-response","title":"<code>\"OTP\"</code> + <code>nextOperation: \"Login\"</code> response","text":"<code>check</code> response - operation:<code>\"OTP\"</code> nextOperation: <code>\"Login\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"OTP\"],\n            \"nextOperation\": \"Login\"\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>This is the OTP Login response.</p> <p>When the <code>operations</code> array contains <code>\"OTP\"</code> but not <code>\"Login\"</code> and the response's <code>nextOperation</code> field is <code>\"Login\"</code>, this indicates that the account associated with the provided email address has been flagged to force the user into an OTP flow in order to log in.  This happens if some backend process flags the account for security reasons. A common cause for this might be that there has been a suspicious number of login attempts for this account from different parts of the world, for example.</p> <p>When this response is received, the user will be shown the OTP screen, where they will have to enter a 6 digit pin code that is sent to the provided email address in order to authenticate.</p>"},{"location":"features/auth/screens/login_email/#otp-nextoperation-registeraccount-response","title":"<code>\"OTP\"</code> + <code>nextOperation: \"RegisterAccount\"</code> response","text":"<code>check</code> response - operation: <code>\"OTP\"</code> nextOperation: <code>\"RegisterAccount\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"OTP\"],\n            \"nextOperation\": \"RegisterAccount\"\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>When <code>operations</code> contains <code>\"OTP\"</code> on its own (no other operations in the array), and the <code>nextOperation</code> field is <code>\"RegisterAccount\"</code>, this indicates 2 things:</p> <ul> <li>The account associated with the provided email is in flagged state where we need to force the user to do a successful OTP operation in order to prove they own the provided email address - similar to OTP + nextOperation: Login response.</li> <li>The account associated with the provided email exists, but is for a different app than the one the user is trying to log in with - similar to RegisterAccount response.</li> </ul> <p>What happens in this case is we send the user to the same starting point for the RegisterAccount flow - Signup Email.  See more details on the Signup Email documentation for how this case is handled downstream.</p>"},{"location":"features/auth/screens/login_email/#error-handling","title":"Error handling","text":""},{"location":"features/auth/screens/login_email/#client-side-email-validation","title":"Client-side email validation","text":"<p>When the user submits the email address, the app first does some client-side validation to ensure what has been entered is a valid email address before submitting the input to the remote <code>check</code> operation.  If that validation result is that the input is not a valid email address, we show a form-field error prompting the user to double-check their input.</p> Invalid email address form field error <p></p>"},{"location":"features/auth/screens/login_email/#server-side-email-validation","title":"Server-side email validation","text":"<p>If the client-side email validation doesn't detect any issues, there's still a chance that the backend could determine that the provided input is not a valid email address.  From a user perspective, this is treated the same way as described in client-side email validation above.</p>"},{"location":"features/auth/screens/login_email/#all-other-errors","title":"All other errors","text":"<p>Any other error that is returned in the <code>check</code> response is handled the same way.  The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/login_email/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>LoginFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>LoginForgotPasswordTest</li> </ul>"},{"location":"features/auth/screens/login_password/","title":"Login Password Screen","text":""},{"location":"features/auth/screens/login_password/#overview","title":"Overview","text":"<p>The Login Password page allows the user to enter their password in order to authenticate.  The password the user enters is sent along with the email address that they entered (on the Login Email page prior to this one) are sent as a pair of arguments to the <code>login</code> graphQl mutation.</p> <p></p>"},{"location":"features/auth/screens/login_password/#forgot-password","title":"Forgot Password","text":"<p>The user can click the \"Forgot Password?\" CTA to launch into the Login Forgot Password flow which allows them to both authenticate and reset their password in one flow.</p>"},{"location":"features/auth/screens/login_password/#login-graphql-mutation","title":"<code>login</code> graphql mutation","text":"<p>When the user submits their password, the app passes that password along with the email address they entered on the Login Email page to the orchestration API's <code>login</code> mutation.</p>"},{"location":"features/auth/screens/login_password/#successful-login","title":"Successful login","text":"<p>If the entered password is correct for the account, a large payload is returned which contains a host of information about the account that the app needs to know for various features (e.g. all of the account's profile info, subscription info, welch onboarding status, parental controls, etc). The response also includes the new token which the SDK will pass along with future requests so the various services know who is requesting the data (authorization).</p> successful <code>login</code> response <p>This response payload is very large and subject to change as we update the graphql payload definitions as necessary for various features.  To see a current example, take a look at the login response stub file we use in instrumented tests.</p>"},{"location":"features/auth/screens/login_password/#error-handling","title":"Error handling","text":""},{"location":"features/auth/screens/login_password/#invalid_credentials","title":"INVALID_CREDENTIALS","text":"<code>login</code> response - incorrect password error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '401' and description 'Bad credentials sent for disney/matt.rein@disneystreaming.com'\",\n        \"extensions\": {\n            \"code\": \"idp.error.identity.bad-credentials\"\n        },\n        \"path\": [\"login\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 125\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"login\",\n                \"errorCode\": \"idp.error.identity.bad-credentials\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>If the password the user submitted was incorrect for the account into which they are trying to log in, the <code>login</code> mutation returns an error response that indicates this.  In this case the app displays a form-field error under the password input field to let the user know they entered the wrong password.</p> Incorect password form field error <p></p>"},{"location":"features/auth/screens/login_password/#account_blocked","title":"ACCOUNT_BLOCKED","text":"<code>login</code> response - account blocked error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"\",\n        \"extensions\": {\n            \"code\": \"account.blocked\"\n        },\n        \"path\": [\"login\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 125\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"login\",\n                \"errorCode\": \"account.blocked\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>There is a rare edge case where the account has been \"blocked\" in the backend.  When the <code>login</code> mutation response's error code indicates that this is the case, we display a full bleed error page that provides the user a way to access the help center in a web browser.</p> Account Blocked error page <p></p>"},{"location":"features/auth/screens/login_password/#all-other-errors","title":"All other errors","text":"<p>Any other error that is returned in the <code>login</code> response is handled the same way.  The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/login_password/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>LoginFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>LoginForgotPasswordTest</li> </ul>"},{"location":"features/auth/screens/marketing_opt_in/","title":"Marketing Opt In Screen","text":""},{"location":"features/auth/screens/marketing_opt_in/#overview","title":"Overview","text":"<p>There are edge case scenarios where we need to force a user to agree to our legal disclosures and indicate whether they want to opt in or out of receiving marketing communications before actually using the app. After authenticating, when grahql responses have <code>identity.flows.marketingPreferences.isOnboarded = false</code> and <code>identity.flows.marketingPreferences.isOnboarded = true</code>, the user will be shown the Marketing Opt In page. This page forces the user to \"agree\" to the current set of legal disclosures and opt in or out of marketing preferences before they can enter the rest of the app and start streaming anything.</p> <p></p>"},{"location":"features/auth/screens/marketing_opt_in/#important-page-elements","title":"Important page elements","text":"<p>You may notice that this page appears very similar to Signup Email. It effectively has the same layout and page elements with the following exceptions:</p> <ul> <li>This page does not display an email input field since the user is already authenticated at this point.</li> <li>This page does not display legal consent checkboxes like we do on Signup Email (wasn't in the requirements).</li> </ul>"},{"location":"features/auth/screens/marketing_opt_in/#marketing-opt-in-checkboxes","title":"Marketing opt in checkboxes","text":"<p>This part of the page is identical to the marketing opt in checkboxes on Signup Email.</p>"},{"location":"features/auth/screens/marketing_opt_in/#legal-disclosures","title":"Legal Disclosures","text":"<p>This part of the page is identical to the legal disclosures section on Signup Email.</p>"},{"location":"features/auth/screens/marketing_opt_in/#data","title":"Data","text":"<p>See Graph <code>anonymousDocuments</code> query on Signup Email.</p>"},{"location":"features/auth/screens/marketing_opt_in/#error-handling","title":"Error handling","text":"<p>When the data fails load for any reason, we are unable to render the Marketing Opt In page. Since we have never received specific error handling requirements for site config, the app displays a full-bleed error dialog showing the generic \"Error code 83\" user-facing error message if there are any issues loading the data required from this endpoint.</p>"},{"location":"features/auth/screens/marketing_opt_in/#marketing-request","title":"<code>marketing</code> request","text":"<p>See <code>marketing</code> request on Signup Email.</p>"},{"location":"features/auth/screens/marketing_opt_in/#how-to-test-this-out","title":"How to test this out","text":"<p>At the time of writing these docs, there are no instrumented tests covering this page in the app.</p>"},{"location":"features/auth/screens/marketing_opt_in/#using-existing-account-with-curl-command","title":"Using existing account with cURL command","text":"<p>In order to test this flow manually you can follow these steps in the QA environment.</p> <ol> <li>Sign up for a new account (doesn't matter if you subscribe on the paywall or not)</li> <li>Log out or simply clear local app data</li> <li>Visit the QA Account Override tool and enter the email of the account you created in step 1</li> <li>Copy the Identity ID for this account from the Account Override tool</li> <li>Replace the <code>${identityid}</code> placeholder block in the cURL request (see below) with the Identity ID of the new account that you copied in step 4</li> <li>Run that cURL command from step 5 in a terminal</li> <li>Log in with the account created in step 1</li> <li>Observe the Marketing Opt In screen</li> </ol> cURL to set identity flags to show Marketing Opt In for an account <pre><code>curl -X PATCH \"https://idp-service-userservices-bamtech-qa.us-east-1.bamgrid.net/private/identities/${identity id}/attributes\" -H \"accept: application/json; charset=utf-8\" -H \"Content-Type: application/json; charset=utf-8\" -d \"{ \\\"marketingPreferences\\\": { \\\"eligibleForOnboarding\\\": true,\\\"isOnboarded\\\": false}}\"\n</code></pre>"},{"location":"features/auth/screens/marketing_opt_in/#creating-a-new-account-with-account-maker","title":"Creating a new account with Account Maker","text":"<p>Alternatively, you can use the Account Maker tool to create a new account that will be in this flagged state.</p> <p></p>"},{"location":"features/auth/screens/otp/","title":"OTP (One Time Passcode) Screen","text":""},{"location":"features/auth/screens/otp/#overview","title":"Overview","text":"<p>The OTP page allows a user to enter a OneTimePasscode (OTP) that our backend sends to their account's email address in order to effectively authenticate.</p> <p>When the user submits the correct secret code, that proves they own the email address associated with the account. Therefore this transaction is enough to \"authenticate\" the user, or authorize them to make some changes to their account such as changing their password, changing the account email address, or even logging in to the app.</p> <p></p>"},{"location":"features/auth/screens/otp/#otpfragment-and-concrete-sub-classes","title":"<code>OtpFragment</code> and concrete sub-classes","text":"<p>The OTP page is used in a number of different use cases within the application but the page typically looks the same in all these cases. There are slight technical differences in API calls and / or behaviors needed for different use cases. As a result, in code we have a base abstract <code>OtpFragment</code> with several different concrete implementations.</p> <p></p>"},{"location":"features/auth/screens/otp/#otploginfragment","title":"<code>OtpLoginFragment</code>","text":"<p>The <code>OtpLoginFragment</code> subclass of <code>OtpFragment</code> is used in the OTP Login auth flow.</p> <p>The use case for this is when there is some security concern about whether the current user actually owns the email address associated with the account they are trying to log in to. In the happy path of the OTP Login flow, upon entering the correct OTP code, the user is authenticated and can access the rest of the app as long as they have an active entitlement.</p> <p>There is an edge case, called OTP Login - Forced Password Reset Flow where the response for the <code>authenticateWithOtp</code> graphql mutation contains <code>securityAction: ChangePassword</code>. When this occurs the user will be routed to Password Reset and must reset the account password before becoming authenticated.</p>"},{"location":"features/auth/screens/otp/#otpresetpasswordfragment","title":"<code>OtpResetPasswordFragment</code>","text":"<p>The <code>OtpResetPasswordFragment</code> subclass of <code>OtpFragment</code> is used in the Login Forgot Password auth flow.</p> <p>The use case for this is when the user clicks the \"Forgot Password?\" CTA on the Login Password page. Upon entering the correct OTP code, the user is authenticated, but they are routed to the <code>Password Reset</code> page in order to reset their password before entering the rest of the app. If the user quits the app while on the Password Reset page and re-launches, they bypass the actual reset and enter the app as they have already successfully authenticated.</p>"},{"location":"features/auth/screens/otp/#otpregisteraccountfragment","title":"<code>OtpRegisterAccountFragment</code>","text":"<p>The <code>OtpRegisterAccountFragment</code> subclass of <code>OtpFragment</code> is used in the OTP RegisterAccount signup edge case flow.</p> <p>The use case for this is when a user attempts to sign up for one app (e.g. Disney+) with an email address already associated with an account for one of our other apps (e.g. Star+), AND that account is in a Security Flagged state. In this case the user will be completing a password reset operation (for the shared identity's password) as well as registering a \"new\" account with this email address for the app which they are attempting to sign up on.</p>"},{"location":"features/auth/screens/otp/#otpverifyfragment","title":"<code>OtpVerifyFragment</code>","text":"<p>The <code>OtpVerifyFragment</code> subclass of <code>OtpFragment</code> is used in the Verify Account Flow from the Account Settings page.</p> <p>In this flow the OTP operation is used to simply verify that a user actually owns the email address associated with the currently authenticated account.</p>"},{"location":"features/auth/screens/otp/#accountotppasscodefragment","title":"<code>AccountOtpPasscodeFragment</code>","text":"<p>The <code>AccountOtpPasscodeFragment</code> subclass of <code>OtpFragment</code> is used in the Change Password Flow from the Account Settings page.</p> <p>In this flow the <code>actionGrant</code> returned from a successful <code>authenticateWithOtp</code> mutation is passed along to the <code>AccountPasswordResetFragment</code> to authorize the <code>updatePasswordWithActionGrant</code> mutation called there.</p>"},{"location":"features/auth/screens/otp/#otpchangeemailfragment","title":"<code>OtpChangeEmailFragment</code>","text":"<p>The <code>OtpChangeEmailFragment</code> subclass of <code>OtpFragment</code> is used in the Change Email Flow.</p> <p>In this flow, the user is already authenticated. The <code>actionGrant</code> token returned after successfully submitting the OTP code is passed to the Change Email Screen to authorize the actual change email operation.</p>"},{"location":"features/auth/screens/otp/#otpconfirmpasswordfragment","title":"<code>OtpConfirmPasswordFragment</code>","text":"<p>Details coming soon</p>"},{"location":"features/auth/screens/otp/#resend-cta","title":"Resend CTA","text":"<p>The user can click the \"Resend\" CTA to make another <code>requestOtp</code> graphql call which sends the user an email with a randomly generated OTP code.</p>"},{"location":"features/auth/screens/otp/#requestotp-graphql-mutation","title":"<code>requestOtp</code> graphql mutation","text":"<p>As soon as any concrete <code>OtpFragment</code> is displayed, the app sends the user's current email address to the <code>requestOtp</code> graphQl mutation. This operation triggers the backend to construct a new random OTP code and send it to that email address if there is an account on file associated with that email.</p> <p>The OTP code sent to the user does eventually expire (after 10 or 15 minutes). Once expired, the user will have to use the Resend CTA to trigger a new code to be emailed to them to complete the process.</p> <p>Any and all error responses from the <code>requestOtp</code> mutation are handled the same way. The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/otp/#authenticatewithotp-graphql-mutation","title":"<code>authenticateWithOtp</code> graphql mutation","text":"<p>When the user submits an OTP code, the app passes that code along with the user's account email address to the orchestration API's <code>authenticateWithOtp</code> mutation.</p>"},{"location":"features/auth/screens/otp/#successful-otp-validation","title":"Successful OTP validation","text":"<p>If the user submits the correct OTP code, the <code>authenticateWithOtp</code> mutation response will contain an <code>actionGrant</code> token. An actionGrant token can be used to either log a user in (see <code>loginWithActionGrant</code> graphql mutation section below) or to provide authorization to complete some other protected operation in the application such as resetting an account password.</p> successful <code>authenticateWithOtp</code> example response <pre><code>{\n    \"data\": {\n        \"authenticateWithOtp\": {\n            \"__typename\": \"AuthenticateWithOtpResult\",\n            \"actionGrant\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJpc3MiOiJ1cm46YmFtdGVjaDpzZXJ2aWNlOmlkcDpkaXNuZXkiLCJzdWIiOiIwZmJjNWY3OC1hNDZmLTQwYWYtYjljNS0zM2M2YjU2ODVlNzMiLCJhdWQiOlsidXJuOmJhbXRlY2g6c2VydmljZTphY2NvdW50OmRpc25leSIsInVybjpiYW10ZWNoOnNlcnZpY2U6aWRwOmRpc25leSJdLCJleHAiOjE2MjkzMDI3NDksIm5iZiI6MTYyOTMwMjQ0OSwiaWF0IjoxNjI5MzAyNDQ5LCJwYXJ0bmVyTmFtZSI6ImRpc25leSIsImFtciI6WyJvdHAiXSwibG9jYWxlIjoiIiwiZW1haWwiOiJkc3NtZXNzYWdpbmcubWF0dC5yQGdtYWlsLmNvbSJ9.RA98WdtoG_CejkM2vMkbiaj_JGTR3uKzsQUbLsTmH0x5vpWgcXxK4lvQhvVlN_50eMo2rBeeyNwxC7lyeIo0aOAOSny8sALlNOpTGJh2mN5FRpxn0NttEzEFzhazJVMijVOIkeLMCmhfoqF8UPtcpjt6dKgxFIuScRGR3aEthNWGxZcpaU5-GKjYb5ks1fP440ril-8TppWeAeBEhvgK1qLnAv_g8vZYh_CC0ai0AEU7XFd51cKq2leKXJns2ZwHn7IDFfR3RsBhaVWqsZ5fpZ-Jfh5WvQURvgZcu3onWrpNRfdCnPieFIPuYTgi7FPF8vmyq84S_iXjUPsnzoJa8Q\",\n            \"securityAction\": null,\n            \"passwordRules\": {\n                \"__typename\": \"PasswordRules\",\n                \"minLength\": 6,\n                \"charTypes\": 2\n            }\n        }\n    },\n    \"extensions\": {\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null\n        }\n    }\n}\n</code></pre> <p>The other important part of the response aside from <code>actionGrant</code> is the <code>securityAction</code> field. If this field comes back with the value <code>ChangePassword</code>, the backend is telling us that no matter what operation the user was attempting, we should send them to the Password Reset page next to force the user to reset their password.</p> successful <code>authenticateWithOtp</code> response with <code>securityAction: ChangePassword</code> <pre><code>{\n    \"data\": {\n        \"authenticateWithOtp\": {\n            \"__typename\": \"AuthenticateWithOtpResult\",\n            \"actionGrant\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJpc3MiOiJ1cm46YmFtdGVjaDpzZXJ2aWNlOmlkcDpkaXNuZXkiLCJzdWIiOiIwZmJjNWY3OC1hNDZmLTQwYWYtYjljNS0zM2M2YjU2ODVlNzMiLCJhdWQiOlsidXJuOmJhbXRlY2g6c2VydmljZTphY2NvdW50OmRpc25leSIsInVybjpiYW10ZWNoOnNlcnZpY2U6aWRwOmRpc25leSJdLCJleHAiOjE2MjkzMDI3NDksIm5iZiI6MTYyOTMwMjQ0OSwiaWF0IjoxNjI5MzAyNDQ5LCJwYXJ0bmVyTmFtZSI6ImRpc25leSIsImFtciI6WyJvdHAiXSwibG9jYWxlIjoiIiwiZW1haWwiOiJkc3NtZXNzYWdpbmcubWF0dC5yQGdtYWlsLmNvbSJ9.RA98WdtoG_CejkM2vMkbiaj_JGTR3uKzsQUbLsTmH0x5vpWgcXxK4lvQhvVlN_50eMo2rBeeyNwxC7lyeIo0aOAOSny8sALlNOpTGJh2mN5FRpxn0NttEzEFzhazJVMijVOIkeLMCmhfoqF8UPtcpjt6dKgxFIuScRGR3aEthNWGxZcpaU5-GKjYb5ks1fP440ril-8TppWeAeBEhvgK1qLnAv_g8vZYh_CC0ai0AEU7XFd51cKq2leKXJns2ZwHn7IDFfR3RsBhaVWqsZ5fpZ-Jfh5WvQURvgZcu3onWrpNRfdCnPieFIPuYTgi7FPF8vmyq84S_iXjUPsnzoJa8Q\",\n            \"securityAction\": \"ChangePassword\",\n            \"passwordRules\": {\n                \"__typename\": \"PasswordRules\",\n                \"minLength\": 6,\n                \"charTypes\": 2\n            }\n        }\n    },\n    \"extensions\": {\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/auth/screens/otp/#error-handling","title":"Error handling","text":""},{"location":"features/auth/screens/otp/#invalid_passcode","title":"INVALID_PASSCODE","text":"<code>authenticateWithOtp</code> response - invalid passcode error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '400' and description 'Provided passcode is not valid'\",\n        \"extensions\": {\n            \"code\": \"idp.error.otp.invalid-passcode\"\n        },\n        \"path\": [\"authenticateWithOtp\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 67\n        }]\n    }],\n    \"extensions\": {\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null\n        }\n    }\n}\n</code></pre> <p>If the OTP code the user submitted was incorrect, the <code>authenticateWithOtp</code> mutation returns an error response that indicates this. In this case the app displays a form-field error under the OTP input field to let the user know they entered the wrong passcode.</p> Incorect OTP code form field error <p></p>"},{"location":"features/auth/screens/otp/#all-other-errors","title":"All other errors","text":"<p>Any other error that is returned in the <code>authenticateWithOtp</code> response is handled the same way. The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/otp/#loginwithactiongrant-graphql-mutation","title":"<code>loginWithActionGrant</code> graphql mutation","text":"<p>In some cases, we need to actually \"authenticate\" the user after successfully submitting the correct OTP code to <code>authenticateWithOtp</code>. To do this, we pass the <code>actionGrant</code> token that was received from the <code>authenticateWithOtp</code> response to the <code>loginWithActionGrant</code> graphql mutation. This effectively accomplishes the same thing as the <code>login</code> mutation.</p> <p>The cases where the OTP screen also makes this additional call are when the user is not already authenticated (OtpLoginFragment and OtpResetPasswordFragment). However it is important to note that even on those pages if the <code>authenticateWithOtp</code> response contains <code>securityAction: ChangePassword</code>, we do not make the <code>loginWithActionGrant</code> call at this point, and instead this call will be made after successfully resetting the account's password on the Password Reset page.</p>"},{"location":"features/auth/screens/otp/#testing-otp-in-qa-environment","title":"Testing OTP in QA environment","text":"<p>In the QA environment the backend will only send OTP emails to account email addresses that start with <code>dssmessaging</code>. In order to receive OTP emails (which is required to test any OTP flow) in the QA environment you need:</p> <ol> <li>Access to a real email account that starts with <code>dssmessaging</code>. You can just sign up for a free gmail account like <code>dssmessaging.firstname.lastInitial@gmail.com</code>.</li> <li>A QA account for the app you are testing that uses that email address.<ul> <li>Note: you can add +{SomeOtherText} before <code>@gmail.com</code> on the account email address so that you can create multiple QA environment OTP test accounts with one gmail address. For example sign up for a Disney+ account in QA with <code>dssmessaging.matt.r+skpasswordrules@gmail.com</code>, and OTP emails will still arrive at the gmail inbox for <code>dssmessaging.matt.r@gmail.com</code>.</li> </ul> </li> </ol>"},{"location":"features/auth/screens/otp/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>OtpLoginFlowTest</li> <li>LoginForgotPasswordTest</li> <li>ChangeEmailTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>ChangePasswordFlowTest</li> <li>VerifyAccountFlowTest</li> </ul>"},{"location":"features/auth/screens/password_reset/","title":"Password Reset Screen","text":""},{"location":"features/auth/screens/password_reset/#overview","title":"Overview","text":"<p>The Password Reset page allows the user to update their password. For the password reset operation to work, an <code>actionGrant</code> from a successful OTP validation must be sent in order to authorize the operation. Therefore in all password reset use-cases, we can only show the Password Reset page after the user successfully completes the OTP validation on the OTP screen</p> <p></p>"},{"location":"features/auth/screens/password_reset/#passwordresetfragment-and-concrete-sub-classes","title":"<code>PasswordResetFragment</code> and concrete sub-classes","text":"<p>The PasswordReset page is used in a few different use cases in the app but the page typically looks the same in all cases. There are slight differences in API calls and / or behaviors needed for the different use cases. As a result, in the code we have a base abstract <code>PasswordResetFragment</code> with a few different concrete implementations.</p> <p></p>"},{"location":"features/auth/screens/password_reset/#loginresetfragment","title":"<code>LoginResetFragment</code>","text":"<p>The <code>LoginResetFragment</code> subclass of <code>PasswordResetFragment</code> is used in all onboarding flows. That is, this is the particular Fragment used when the user is resetting password in a flow where they are not yet logged in. This includes the OTP Login - Forced Password Reset Flow, the Login Forgot Password Flow, and the OTP RegisterAccount flow.</p> <p>If the <code>authenticateWithOtp</code> response (made on the OTP page prior to landing here) contains <code>securityAction: ChangePassword</code>, this page will send an <code>loginWithActionGrant</code> request after successful <code>updatePasswordWithActionGrant</code> response. This is what will actually authenticate the user in that specific case. This setup blocks a security hole where a user could become authenticated after just doing the OTP validation and then closing the app, even though the backend says we need to force the user to reset their password.</p> Note about LoginResetFragment in the OTP RegisterAccount flow <p>In the OTP RegisterAccount flow use case, the app will NOT send a <code>loginWithActionGrant</code> graphql request after successfully resetting the account password. This is because we still need to \"register\" an account for the current app after resetting the identity's password.</p> <p>Instead, the app will make a <code>registerWithActionGrant</code> request in order to register the new account for the current app as well as authenticate the user.</p>"},{"location":"features/auth/screens/password_reset/#accountpasswordresetfragment","title":"<code>AccountPasswordResetFragment</code>","text":"<p>The <code>AccountPasswordResetFragment</code> subclass of <code>PasswordResetFragment</code> is used in the use-case where an authenticated user navigates to the Account Settings page and clicks the Change Password option. The user will first see the <code>AccountOtpPasscodeFragment</code> and then land here after successfully validating the OTP code they receive.</p> <p>One notable difference about this subclass of the <code>PasswordResetFragment</code> is that it includes a checkbox that, when checked will send <code>logoutAllDevices: true</code> argument to <code>updatePasswordWithActionGrant</code>. If the operation is successful the user sees the <code>LoggingOutAllFragment</code> before becoming logged out. This flag also logs the user out on all devices where this account is currently authenticated. This is useful for users who think a bad actor may have gained access to their account credentials.</p> AccountSettings password reset screens Account Settings OTP Password Reset Account Settings"},{"location":"features/auth/screens/password_reset/#confirmpasswordresetfragment","title":"<code>ConfirmPasswordResetFragment</code>","text":"<p>The <code>ConfirmPasswordResetFragment</code> subclass of <code>PasswordResetFragment</code> is used when an authenticated user needs to reset their password at the time of doing a password-protected operation in the app. For example, when a user attempts to modify the maturity rating setting for a profile, they must enter their password on the <code>PasswordConfirmFragment</code> first to be authorized to do so.</p> <p>There are 2 variants of these use-cases:</p> <ul> <li>Forgot password</li> <li>Forced password reset</li> </ul>"},{"location":"features/auth/screens/password_reset/#password-confirm-forgot-password","title":"Password Confirm - Forgot Password","text":"<p>On the Password Confirm page, the user may click the Forgot Password CTA which will send them through the <code>OtpConfirmPasswordFragment</code> and then the <code>ConfirmPasswordResetFragment</code>. After updating their password in this case, the user lands back on the Password Confirm page to enter their new password to complete their desired operation.</p>"},{"location":"features/auth/screens/password_reset/#password-confirm-forced-password-reset","title":"Password Confirm - Forced Password Reset","text":"<p>An already authenticated user may have a flag on their account indicating they need to reset their password. If that user attempts a password-protected operation in the app, they will be shown the <code>OtpConfirmPasswordFragment</code>, and then the <code>ConfirmPasswordResetFragment</code>. After updating their password instead of seeing the Password Confirm page, they will already be authorized to complete their desired operation and will land on the appropriate page of the app to complete that action, or see a flash message indicating the operation was successful.</p>"},{"location":"features/auth/screens/password_reset/#updatepasswordwithactiongrant-graphql-mutation","title":"<code>updatePasswordWithActionGrant</code> graphql mutation","text":"<p>When the user submits their desired new password, the app sends that password along with the <code>actionGrant</code> received from successful OTP validation (see <code>authenticateWithOtp</code>) to the orchestration API's <code>updatePasswordWithActionGrant</code> mutation. The app also sends a boolean argument indicating whether the user intends to log out their account on all devices (as mentioned above in <code>AccountPasswordResetFragment</code>).</p>"},{"location":"features/auth/screens/password_reset/#successful-password-reset","title":"Successful password reset","text":"<p>If the user submits a valid new password and their <code>actionGrant</code> is not expired, the <code>updatePasswordWithActionGrant</code> response contains a large payload similar to the <code>login</code> response.</p> successful <code>updatePasswordWithActionGrant</code> response <p>This response payload is very large and subject to change as we update the graphql payload definitions as necessary for various features. To see a current example, take a look at the updatePasswordWithActionGrant response stub file we use in instrumented tests.</p>"},{"location":"features/auth/screens/password_reset/#error-handling","title":"Error handling","text":""},{"location":"features/auth/screens/password_reset/#invalid-password-error","title":"Invalid password error","text":"<code>updatePasswordWithActionGrant</code> response - invalid password error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '400' and description 'Password must be between 8 and 256 characters,Password must include at least one letter, at least one number and at least one special character'\",\n        \"extensions\": {\n            \"code\": \"idp.error.password.enhanced.invalid-value\"\n        },\n        \"path\": [\"updatePasswordWithActionGrant\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 87\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"updatePasswordWithActionGrant\",\n                \"errorCode\": \"idp.error.password.enhanced.invalid-value\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>If the new password that the user submitted does not meet a set of minimum requirements for account passwords (length and number of different character types), the <code>updatePasswordWithActionGrant</code> response contains an error code that indicates this. In this case the app displays a form-field error under the new password input field to let the user know the current minimum requirements for passwords in their specific region.</p> Incorect password form field error <p></p>"},{"location":"features/auth/screens/password_reset/#all-other-errors","title":"All other errors","text":"<p>Any other error that is returned in the <code>updatePasswordWithActionGrant</code> response is handled the same way. The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/password_reset/#loginwithactiongrant-graphql-mutation","title":"<code>loginWithActionGrant</code> graphql mutation","text":"<p>In the unauthenticated use-cases that use <code>LoginResetFragment</code>, if the <code>authenticateWithOtp</code> response contained <code>securityAction: ChangePassword</code>, we must call <code>loginWithActionGrant</code> after a success response from <code>updatePasswordWithActionGrant</code>. We send the same <code>actionGrant</code> token that was sent to <code>updatePasswordWithActionGrant</code>. This effectively accomplishes the same thing as the <code>login</code> mutation.</p>"},{"location":"features/auth/screens/password_reset/#registerwithactiongrant-graphql-mutation","title":"<code>registerWithActionGrant</code> graphql mutation","text":"<p>In the OTP RegisterAccount flow after successful password reset occurs, the app sends a <code>registerWithActionGrant</code> graphql request.</p>"},{"location":"features/auth/screens/password_reset/#successful-registerwithactiongrant","title":"Successful <code>registerWithActionGrant</code>","text":"<p>A successful <code>registerWithActionGrant</code> graphql call effectively does 2 things:</p> <ul> <li>Creates a new account for the current app in the backend and attaches it to the user's existing identity; and</li> <li>Authenticates the user</li> </ul> successful <code>registerWithActionGrant</code> response <p>This response payload is pretty large and subject to change as we update the graphql payload definitions to support new features. To see a current example, take a look at the registerWithActionGrant response stub file used in instrumentation tests.</p>"},{"location":"features/auth/screens/password_reset/#error-handling_1","title":"Error handling","text":"<p>Any other error that is returned in the <code>registerWithActionGrant</code> response is handled the same way. The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/password_reset/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>LoginForgotPasswordTest</li> <li>ChangePasswordFlowTest</li> <li>SignupFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> </ul>"},{"location":"features/auth/screens/register_account_password/","title":"RegisterAccount Password Screen","text":""},{"location":"features/auth/screens/register_account_password/#overview","title":"Overview","text":"<p>The RegisterAccount Password page allows the user to enter their current identity's password in order to create a new account for the app. Users who see this page already have an account for another TWDC app and are trying to sign up on the current app (for example, they already have a Star+ account and they are signing up for a Disney+ account). For more context see the RegisterAccount signup flow overview.</p> <p>This page could sort of be described as a combination of the Login Password page UI with the API calls and error handling logic of the Signup Password page. One noteable UI difference from the Login Password page is that this page displays extra sub-copy above the password input field which explains to users that they should be entering the current password for their already-existing account on the other application. You can see this extra copy in the screenshot below.</p> <p></p>"},{"location":"features/auth/screens/register_account_password/#forgot-password","title":"Forgot Password","text":"<p>The user can click the \"Forgot Password?\" CTA to launch the OtpResetPasswordFragment which will allow them to reset the password for their existing identity in the backend.</p>"},{"location":"features/auth/screens/register_account_password/#register-graphql-mutation","title":"<code>register</code> graphql mutation","text":"<p>Similar to the <code>register</code> call on Signup Password, this page also calls <code>register</code> when the user submits their password. The difference here though is that the backend will be checking that the submitted password matches the password for the user's existing identity and will throw an error indicating the wrong password was submitted when appropriate.</p>"},{"location":"features/auth/screens/register_account_password/#successful-registration","title":"Successful registration","text":"<p>If the entered password is correct for the user's identity, the backend creates a new account for the current app and attaches it to that existing identity. The <code>register</code> mutation returns a large payload that contains a host of information about the account, similar to Successful login.</p> successful <code>register</code> response <p>This response payload is pretty large and subject to change as we update the graphql payload definitions as necessary for various features. To see a current example take a look at the register response stub file used in instrumented tests.</p>"},{"location":"features/auth/screens/register_account_password/#error-handling","title":"Error handling","text":""},{"location":"features/auth/screens/register_account_password/#invalid_credentials-error","title":"INVALID_CREDENTIALS error","text":"<code>register</code> response - incorrect password error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '401' and description 'Bad credentials sent for disney/vwmattr+04132022@gmail.com'\",\n        \"extensions\": {\n            \"code\": \"idp.error.identity.bad-credentials\"\n        },\n        \"path\": [\"register\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 76\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"register\",\n                \"errorCode\": \"idp.error.identity.bad-credentials\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>Similar to the INVALID_CREDENTIALS error on the Login Password page, if the password the user submitted was incorrect for the user's identity, the <code>register</code> mutation returns an error response indicating this. In this case, the app displays a form-field error under the password input field to let the user know they entered the wrong password.</p> Incorect password form field error <p></p>"},{"location":"features/auth/screens/register_account_password/#all-other-errors","title":"All other errors","text":"<p>Any other error that is returned in the <code>register</code> response is handled the same way. The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/signup_email/","title":"Signup Email Screen","text":""},{"location":"features/auth/screens/signup_email/#overview","title":"Overview","text":"<p>The Signup Email page is the first step for a user to sign up for a new account and become authenticated.</p> <p>On this page the user:</p> <ul> <li>Enters the email address they want to associate to their new account</li> <li>Can opt in or out of receiving marketing emails from Disney</li> <li>(In some countries) Checks specific legal check boxes indicating they consent to some required legal agreements</li> <li>Implicitly agrees to the set of legal terms of service specific to the country or territory where they live by clicking the \"Agree and Continue\" CTA</li> </ul> <p></p>"},{"location":"features/auth/screens/signup_email/#important-page-elements","title":"Important page elements","text":""},{"location":"features/auth/screens/signup_email/#marketing-opt-in-checkboxes","title":"Marketing opt in checkboxes","text":"<p>We display a set of 1 or more checkboxes below the email input field. These checkboxes provide users the ability to opt in or out of receiving marketing emails from Disney at the email address they are entering on this page. The checkboxes are rendered dynamically based on data from the Graph <code>anonymousDocuments</code> query response.</p> Marketing opt in checkbox <p></p> Note: not all checkboxes are 'marketing' checkboxes <p>In certain countries or territories, there will also be legal consent checkboxes shown in this section of the page as well. Read that section for more information.</p>"},{"location":"features/auth/screens/signup_email/#legal-consent-checkboxes","title":"Legal consent checkboxes","text":"<p>In certain countries or territories (e.g. in South Korea), local laws require that we also show 1 or more legal consent checkboxes below the email input field in addition to the marketing opt in checkboxes. The user is required to check these checkboxes in to imply their consent to certain legal notices or agreements. These checkboxes are rendered dynamically based on data from the Graph documents query response.</p> Legal consent checkboxes for South Korea <p></p>"},{"location":"features/auth/screens/signup_email/#client-side-legal-consent-checkbox-validation","title":"Client-side legal consent checkbox validation","text":"<p>When the user submits the form the app performs client side validation to ensure that any displayed legal consent checkboxes are \"checked\". If the user submits and there are any legal consent checkboxes which are not checked, we display an error message indicating that the user must check these boxes to imply their consent in order to sign up for an account.</p> Legal consent checkboxes error state <p></p>"},{"location":"features/auth/screens/signup_email/#legal-disclosures","title":"Legal Disclosures","text":"<p>Below any marketing and legal consent checkboxes we display legal disclosure copy above the \"Agree &amp; Continue\". This copy provides an overview of the various legal documents that the user is implying agreement to when they sign up for an account.</p> <p>Parts of the legal disclosure copy may be \"linkified\". Clicking on one of these links will open the Legal Center screen. This copy, including any linkification is rendered dynamically based on data from the Graph <code>anonymousDocuments</code> query response.</p> Legal disclosure section for US <p></p> Note: links in the copy are only shown on mobile and tablet <p>\"Linkification\" of the copy only occurs on mobile and tablet versions of the app. On TV the Signup Email page provides a secondary CTA that allows the user to access the Legal Center screen.</p>"},{"location":"features/auth/screens/signup_email/#graph-anonymousdocuments-query","title":"Graph <code>anonymousDocuments</code> query","text":"<p>As noted above, many components of this page are rendered dynamically based on legal and marketing data that are specific to the country or territory the user is signing up from. This app currently requests this data from the Graph <code>anonymousDocuments</code> query.</p> <code>anonymousDocuments</code> example response <p>This response payload is very large. To see a current example, take a look at the stub response we use in instrumented tests.</p>"},{"location":"features/auth/screens/signup_email/#error-handling","title":"Error handling","text":"<p>When the documents fail to load for any reason, we are unable to render the Signup Email page. Since we have never received specific error handling requirements for site config, the app displays a full-bleed error dialog showing the generic \"Error code 83\" user-facing error message if there are any issues loading the data required from this endpoint.</p>"},{"location":"features/auth/screens/signup_email/#marketing-request","title":"<code>marketing</code> request","text":"<p>When the user submits the form the app sends:</p> <ul> <li>the email address;</li> <li>marketing opt in checkbox values and checked state; and</li> <li>the list of legal diclosure codes to which the user is implicitly agreeing;</li> </ul> <p>to the <code>marketing</code> endpoint.</p> <p>Doing so creates a record in Disney backend systems that is called a \"NRT account\" or \"marketing account\". This record enables Disney to send emails to users who don't complete the full account signup flow, for example.</p>"},{"location":"features/auth/screens/signup_email/#check-query","title":"<code>check</code> query","text":"<p>Immediately after sending the <code>marketing</code> request, the application sends the entered email address to the orchestration API's <code>check</code> query. The response for this query contains an <code>operations</code> array which indicate what the backend \"knows\" about any accounts already associated with this email address and therefore what screen the user should see next in their onboarding journey.</p>"},{"location":"features/auth/screens/signup_email/#login-response","title":"<code>\"Login\"</code> response","text":"<p>This is the response that corresponds to the Signup Email -&gt; Login Happy Path Signup edge case flow.</p> <p>When <code>operations</code> in the response contains <code>\"Login\"</code>, this indicates that there is already an account for this app with that email address and the user should be able to just enter that account's password to log in. The app will route the user to the Login Password in this case.</p> <code>check</code> response - operation: <code>\"Login\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"Login\", \"OTP\"],\n            \"nextOperation\": null\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> A note about the <code>\"Login\"</code> response <p>As you will see in the example response above, <code>\"Login\"</code> operation is almost always delivered as a pair with <code>\"OTP\"</code> in the <code>operations</code> array. This is because in theory the user is also able to just login with an OTP code in order become authenticated. The app code just looks for any occurence of <code>\"Login\"</code> in the <code>operations</code> array to determine this case, ignoring whatever else might be in the array.</p>"},{"location":"features/auth/screens/signup_email/#register-response","title":"<code>\"Register\"</code> response","text":"<p>This is the signup happy path response.</p> <p>When the <code>operations</code> array contains <code>\"Register\"</code>, this means that the email address provided does not match any account in our system, and so the app routes the user to the next step in the signup flow. This next step will be either the Disclosure Review page if the site config response indicates that there are certain legal disclosures that the user must explicitly agree to, or the Signup Password page otherwise.</p> <code>check</code> response - operation: <code>\"Register\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"Register\"],\n            \"nextOperation\": null\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/auth/screens/signup_email/#registeraccount-response","title":"<code>\"RegisterAccount\"</code> response","text":"<p>This is the response that corresponds to the RegisterAccount Signup edge case flow.</p> <p>When the <code>operations</code> array contains <code>\"RegisterAccount\"</code>, this means that there is already an account in the backend for the provided email, but it is not an account for the particular app that the user is attempting to sign up for. For example a user may have a Star+ account but not a Disney+ account yet. If they were to try and sign up with that email address on Disney+ they receive this response from the <code>check</code> query.</p> <p>When this happens the user is routed to the RegisterAccount Password page, where they must enter the password already associated with their existing account's identity in order to complete the process of creating a new account for the current app.</p> <code>check</code> response - operation: <code>\"RegisterAccount\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"RegisterAccount\"],\n            \"nextOperation\": null\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/auth/screens/signup_email/#otp-nextoperation-login-response","title":"<code>\"OTP\"</code> + <code>nextOperation: \"Login\"</code> response","text":"<p>This is the response that corresponds to the Signup Email -&gt; OTP Login Signup edge case flow.</p> <p>When the <code>operations</code> array contains <code>\"OTP\"</code> but not <code>\"Login\"</code> and the response's <code>nextOperation</code> field is <code>\"Login\"</code>, this indicates that there is already an account associated with the provided email address and that account has been flagged to force the user into an OTP flow in order to log in. This happens if some backend process flags the account for security reasons. A common cause for this might be that there has been a suspicious number of login attempts for this account from different parts of the world, for example.</p> <p>When this response is received, the user will be shown the OTP screen, where they will have to enter a 6 digit pin code that is sent to the provided email address in order to authenticate.</p> <code>check</code> response - operation:<code>\"OTP\"</code> nextOperation: <code>\"Login\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"OTP\"],\n            \"nextOperation\": \"Login\"\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/auth/screens/signup_email/#otp-nextoperation-registeraccount-response","title":"<code>\"OTP\"</code> + <code>nextOperation: \"RegisterAccount\"</code> response","text":"<p>This is the response that corresponds to the OTP RegisterAccount Signup edge case flow.</p> <p>When <code>operations</code> contains <code>\"OTP\"</code> on its own (no other operations in the array), and the <code>nextOperation</code> field is <code>\"RegisterAccount\"</code>, this indicates 2 things:</p> <ul> <li>The account associated with the provided email exists, but is for a different app than the one the user is trying to log in with - similar to the RegisterAccount response.</li> <li>The account associated with the provided email is in a Security Flagged state where we need to force the user to do a successful OTP + password reset operation before they can authenticate.</li> </ul> <p>When this occurs the user will be routed to the OtpRegisterAccount page where they must enter an OTP code sent to their email address before resetting their account password and finishing the process of creating a new account for this specific app.</p> <code>check</code> response - operation: <code>\"OTP\"</code> nextOperation: <code>\"RegisterAccount\"</code> <pre><code>{\n    \"data\": {\n        \"check\": {\n            \"__typename\": \"Operations\",\n            \"operations\": [\"OTP\"],\n            \"nextOperation\": \"RegisterAccount\"\n        }\n    },\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"query\",\n            \"operations\": [\n                {\n                    \"operation\": \"check\",\n                    \"errorCode\": null\n                }\n            ]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre>"},{"location":"features/auth/screens/signup_email/#error-handling_1","title":"Error handling","text":""},{"location":"features/auth/screens/signup_email/#client-side-email-validation","title":"Client-side email validation","text":"<p>When the user submits the email address, the app first does some client-side validation to ensure what has been entered is a valid email address before submitting the input to the remote <code>check</code> operation. If that validation result is that the input is not a valid email address, we show a form-field error prompting the user to double-check their input.</p> Invalid email address form field error <p></p>"},{"location":"features/auth/screens/signup_email/#server-side-email-validation","title":"Server-side email validation","text":"<p>If the client-side email validation doesn't detect any issues, there's still a chance that the backend could determine that the provided input is not a valid email address. From a user perspective, this is treated the same way as described in client-side email validation above.</p>"},{"location":"features/auth/screens/signup_email/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>LegalCenterOnboardingTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>PaywallFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>SignupFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>WelchNewUserSignupTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> </ul>"},{"location":"features/auth/screens/signup_password/","title":"Signup Password Screen","text":""},{"location":"features/auth/screens/signup_password/#overview","title":"Overview","text":"<p>The Signup Password screen allows the user to create a password and complete the process of creating an account.  Upon successfully creating the account, the user will also be authenticated in the app.</p> <p></p>"},{"location":"features/auth/screens/signup_password/#register-graphql-mutation","title":"<code>register</code> graphql mutation","text":"<p>When the user submits the password to use for their new account, the app passes the following set of arguments to the <code>register</code> mutation:</p> <ul> <li>email address provided on the Signup Email screen</li> <li>password that the user input on this page</li> <li>list of legal disclosure codes corresponding to the legal disclosures the user is implicitly agreeing to</li> <li>set of initial language preferences for the account provided from <code>LanguagePreferencesSetupImpl#initialLanguagePreferencesOnce</code></li> </ul>"},{"location":"features/auth/screens/signup_password/#successful-registration","title":"Successful registration","text":"<p>If the entered password is valid (meets the minimum password strength rules) the backend creates a new account and the <code>register</code> mutation returns a large payload that contains a host of information about the account, very similar to Successful login.</p> successful <code>register</code> response <p>This response payload is pretty large and subject to change as we update the graphql payload definitions as necessary for various features.  To see a current example take a look at the register response stub file used in instrumented tests.</p>"},{"location":"features/auth/screens/signup_password/#error-handling","title":"Error handling","text":""},{"location":"features/auth/screens/signup_password/#invalid-password-error","title":"Invalid password error","text":"<code>register</code> response - invalid password error <pre><code>{\n    \"data\": null,\n    \"errors\": [{\n        \"message\": \"upstream: 'identity'\\nReceived error response from upstream error with status '400' and description 'Password must be between 6 and 256 characters'\",\n        \"extensions\": {\n            \"code\": \"idp.error.password.enhanced.invalid-value\"\n        },\n        \"path\": [\"register\"],\n        \"locations\": [{\n            \"line\": 1,\n            \"column\": 76\n        }]\n    }],\n    \"extensions\": {\n        \"operation\": {\n            \"operationType\": \"mutation\",\n            \"operations\": [{\n                \"operation\": \"register\",\n                \"errorCode\": \"idp.error.password.enhanced.invalid-value\"\n            }]\n        },\n        \"sdk\": {\n            \"token\": null,\n            \"session\": null,\n            \"grant\": null,\n            \"accountDelegationRefreshToken\": null,\n            \"featureFlags\": null\n        }\n    }\n}\n</code></pre> <p>If the new password the user submitted does not meet a set of minimum requirements for passwords (length and number of different character types), the <code>register</code> response contains an error code that indicates this.  In this case, the app displays a form-field error under the password input field to let the user know the current minimum password requirements for their specific country or territory.</p> Invalid password form field error <p></p>"},{"location":"features/auth/screens/signup_password/#all-other-errors","title":"All other errors","text":"<p>Any other error that is returned in the <code>register</code> response is handled the same way.  The app uses <code>ErrorLocalization</code> to lookup the user-facing error message copy to show the user, and a full-bleed error dialog will be displayed to the user with that error copy.</p>"},{"location":"features/auth/screens/signup_password/#instrumented-tests","title":"Instrumented Tests","text":"<ul> <li>LegalCenterOnboardingTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>PaywallFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>SignupFlowTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> <li>WelchNewUserSignupTest<ul> <li>mobile</li> <li>tv</li> </ul> </li> </ul>"},{"location":"features/badging/","title":"Badging","text":"<p>Badging (Disney+ Original) are what we see on image assets that are handled by Ripcut APIs more info here. For example, they are applied to <code>tile</code>, <code>hero_tile</code>, and <code>thumbnail</code>.</p> <p>Example</p> <p>This is a Badge</p> <p></p> Brand Logo Only Brand Logo with Scrim"},{"location":"features/badging/#how-badges-are-loaded-on-images","title":"How Badges are Loaded on Images","text":"<p><code>ImageBadgingResolverImpl</code> will take <code>ImageBadging</code> (Data necessary to display Ripcut option related to the badging/compose feature) and send <code>ImageType.Badging</code> to RipcutAPI endpoint to load badging on images.</p> <p>ImageType.Badging is composed of <code>badgingExtension</code> and <code>badgingLabel</code>. For example: <code>compose/?width=600&amp;label=disneyplusoriginal_178_scrim</code></p> <ul> <li> <p><code>badgingExtension</code> defines the Ripcut endpoint in sequence:</p> <ul> <li>\"/compose\" if imageBadging is Hero container</li> <li>\"/badging\" if imageBadging has badging info</li> <li>\"/scale\" if none above is true</li> </ul> </li> <li> <p><code>badgingLabel</code> determines how the badge/scrim should be loaded on image, see logic below:</p> </li> </ul> <p></p>"},{"location":"features/badging/#feature-info","title":"Feature Info","text":""},{"location":"features/badging/#availability","title":"Availability","text":"Availability  Disney+  Star+  Mobile  TV  Regions  All regions"},{"location":"features/badging/#relevant-classes","title":"Relevant classes","text":"<ul> <li><code>ImageBadgingResolverImpl.kt</code></li> <li><code>ImageBadging.kt</code></li> <li><code>ImageBadgingResolver.kt</code></li> </ul>"},{"location":"features/badging/#additional-details-and-tickets","title":"Additional Details and Tickets","text":"<ul> <li>Unit tests tickets completed</li> <li>FED Solution Architecture</li> <li>Helpful PRs for context on scrimAdjust</li> <li>Related Ticket</li> <li>Chart source</li> </ul>"},{"location":"features/cast/","title":"Chromecast Client module","text":""},{"location":"features/cast/#components","title":"Components","text":""},{"location":"features/cast/#castcontext-and-deferred-initialization","title":"CastContext and Deferred initialization","text":"<p>Chromecast requires an explicit initialization of its SDK for it to function properly. This is done through calling</p> <pre><code>CastContext.getSharedInstance(context)\n</code></pre> <p>If following the official documentation, this static method should be called upon initialization of an app or activity.</p> <p>However, this method undergoes a disk I/O heavy operation under the hood, and it even triggers a strict policy violation by Google's own standards. For this reason, and also with the intent of giving more control over what gets initialized and when, and with which parameters, we have decided to defer the initialization of the Cast SDK to suit our own needs.</p> <p>With this intent we have centralized all access to CastContext within the CastContexProvider, and added a lint rule to prevent the explicit call for the provided static methods, to ensure an accidental eager initialization doesn't happen in the future.</p> <p>It should be noted that by using the builtin UI components such as MediaRouteButton (accompanied with the static <code>CastButtonFactory.setUpMediaRouteButton</code> call) or <code>UIMediaController</code> (which our custom <code>CastController</code> inherits from) will also internally trigger the initialization of the CastContext. We avoid this uncontrolled eager initialization by using our usual UI architecture by which we can also control when the layouts get inflated or the presenters instantiated (see MediaRouteButton and its associated classes).</p>"},{"location":"features/cast/#device-discovery-and-reconnection","title":"Device discovery and Reconnection","text":"<p>As stated in the official docs:</p> <p>The Cast framework automatically starts MediaRouter device discovery based on the Activity lifecycle.</p> <p>This means that whenever the app is launched, the Chromecast SDK will automatically trigger the discovery process to find suitable devices in the network, and thus make the MediaRouteButton visible or enabled.</p> <p>However, by deferring the initialization of the SDK, Chromecast loses that lifecycle event trigger and thus never initiates the discovery process. This ends up in the app not being able to find devices on the first launch (backgrounding and foregrounding does trigger discovery as, by then, the SDK is already initialized).</p> <p>In order to fix this, we observe the moment the SDK is initialized and then manually call the discovery process by using MediaRouter's own callback mechanism:</p> <pre><code>MediaRouter.getInstance(context)\n    .addCallback(mergedSelector, callback, MediaRouter.CALLBACK_FLAG_REQUEST_DISCOVERY)\n</code></pre> <p>That causes devices to be found again, however with the discovery trigger prompted by the Chromecast SDK, an associated Reconnection process is fired. This process uses Chromecast's own heuristics to determine whether there was an ongoing cast session that was abruptly terminated (by a crash, a loss of internet, eviction from memory, etc) and thus should be automatically reconnected upon starting up the app.</p> <p>The Reconnection process takes the form of a ReconnectionService, which is added by Cast SDK to the merged manifest:</p> <pre><code>    &lt;service android:name=\"com.google.android.gms.cast.framework.ReconnectionService\"\n    android:exported=\"false\" /&gt;\n</code></pre> <p>The Reconnection Service is only started by the SDK when a Media Session starts (i.e. when actually playing content) and is automatically stopped when the session ends. The active presence of this Service indicates the Play Services that it should attempt reconnection.</p> <p>Because we lose the lifecycle event that would prompt Play Services to reconnect, we currently manually start the ReconnectionService ourselves after Discovery has found a Provider:</p> <pre><code>private val callback = object : MediaRouter.Callback() {\n\n    override fun onProviderAdded(router: MediaRouter?, provider: MediaRouter.ProviderInfo?) {\n\n        ChromecastLog.w { \"Cast2 - Starting ReconnectionService now\" }\n        val intent = Intent(context, ReconnectionService::class.java)\n        intent.setPackage(context.packageName)\n        context.startService(intent)\n    }\n}\n</code></pre> <p>This has the side effect of always attempting reconnection on app startup. For this reason, we have manually decided to ignore resuming errors reported from cast SDK with the error code 2005, or APPLICATION_NOT_STARTED. That is, reconnection attempts that have failed because the receiver app isn't running on the Chromecast Device.</p>"},{"location":"features/cast/#device-seggregation","title":"Device seggregation","text":"<p>From the perspective of the new <code>cast</code> module we have discriminated 4 different types of devices:</p>"},{"location":"features/cast/#regular-android-devices-with-play-framework-installed","title":"Regular Android devices with Play framework installed","text":"<p>This is the scenario the <code>cast</code> module aims to cover, and the module works normally for these.</p>"},{"location":"features/cast/#regular-android-devices-without-play-framework-installed","title":"Regular Android devices without Play framework installed","text":"<p>Because this can't be determined in compile time, the module is deployed with these devices, but will never be initialized by means of the <code>isPlayServicesAvailable</code> check in CastContextProviderImpl. This check makes sure the CastContext is never emitted and thus no other component does any relevant work that would trigger the initialization of Chromecast (which would result in a crash).</p>"},{"location":"features/cast/#amazon-devices","title":"Amazon devices","text":"<p>Since this is an explicit flavor in our project, we can discriminate in compile time and declare only the <code>cast</code> dependency on the Google flavor. This way we don't even deploy the implementation module on Amazon devices. Previous implementation based on Bamnet cast did not distinguish between Amazon devices and any other Android device without Play Services.</p>"},{"location":"features/cast/#tv-devices","title":"TV Devices","text":"<p>Similarly, and because it doesn't make sens for TV devices to have the chromecast feature, the <code>cast</code> module isn't even deployed with TV builds.</p>"},{"location":"features/cast/#playback-requests","title":"Playback requests","text":"<p>There are fundamentally two types of possible playback requests in the app: Explicit and implicit requests.</p>"},{"location":"features/cast/#explicit-requests","title":"Explicit requests","text":"<p>These are requests that happen when you first connect to a Chromecast device, and then click Play on a piece of content, which means the whole process is split into two steps: Connecting to Chromecast and the Playback request happen at different, explicit actions from the user.</p> <p>Any plabyack request in the app goes through TabRouterImpl, so we can count on this as the single point of entry for these requests. CastPlayRequester models the interface to handle these requests: if [isConnectedOrConnecting] returns true, then the request will be sent to Cast, or to the local player otherwise.</p>"},{"location":"features/cast/#implicit-requests","title":"Implicit requests","text":"<p>The other kind of playback requests that is present in the app are implicit requests, which happen when a content is playing in the local player, and a cast connection is established. In this case, the underlying content should be sent straight away to Chromecast after the connection is established, so this connection is the only explicit action from the user.</p> <p>For this scenario, we model the VideoPlayerConnector and its inner [Player] interface, which should be implemented by the class handling local video playback (MobilePlaybackActivity).</p> <p>The local playback activity will then observe the <code>startWhenConnected</code> and the Cast module handles all possible callbacks for loading, error and success states.</p>"},{"location":"features/cast/#activity-aliasing","title":"Activity aliasing","text":"<p>When one starts casting, one of the components that responds to the cast state is the <code>Sender Notification</code> that shows up in the notification tray whenever the app is backgrounded.</p> <p>When clicking on that notification (not the buttons within the notification), the Cast SDK handles that click on its own and resolves the action by creating an intent to an activity name of the developer's choosing. The SDK gives no control over the action itself: they assume that your ExpandedControls screen (which shows up for instance when you click on the minicontroller, to display a fullscreen control set for Chromecast from your phone, see image below) is going to be a separate Activity.</p> <p></p> <p>Because in our solution the MiniController and the ExpandedControls are combined into a single view that toggles between the expanded and collapsed states, we need to somehow catch that intent and identify that it comes from the cast Sender Notification. However, the intent produced by the notification has no special extras or flags that would allow for this identification.</p> <p>So we have resorted to aliasing the <code>MainActivity</code> with a different name and process that intent to check if the component name is that of the aliased activity. In the <code>CastControllerPresenter</code> we merely observe the sequence of intents to this activity by means of the `IntentObservable, and if the name matches that of the aliased activity, we trigger the display &amp; expansion of the cast controls.</p> <pre><code>    &lt;activity-alias android:enabled=\"true\"\n        android:name=\".CastLandingActivity\"\n        android:targetActivity=\".MainActivity\"&gt;\n    &lt;/activity-alias&gt;\n</code></pre>"},{"location":"features/cast/#d-receiver-app-reference","title":"D+ Receiver app Reference","text":"<p>When integrating with Chromecast D+ Receiver app these are useful links to check for documentation:</p> <p>Receiver Docs</p> <p>Additionally, the Receiver can be tested independently through the use of these links:</p> <p>QA Sender Test Harness</p> <p>PROD Sender Test Harness</p>"},{"location":"features/cast/#migration-and-differences-from-v1","title":"Migration and differences from V1","text":"<p>See Migration docs to learn about the refactoring initiative for Chromecast to switch from v1 to v2.</p>"},{"location":"features/cast/#the-sample-app","title":"The sample app","text":"<p>The sample app leverages the testTokens feature to obtain an access state and be able to retrieve and play real content from the D+ content Api in the QA Environment.</p> <p>The behavior and architecture of the sample app mimics as best as reasonably possible the behavior of the real D+ app, within the scope of what's relevant for chromecast purposes; that is, it implements the [cast] feature with all functional UI components and all the wiring in place (as in the declaration of all the necessary DI dependencies, albeit most of them as dummies from the testDummies module) to be able to cast to the QA chromecast Receiver app, as well as a bogus PlayerActivity that mimic the automatic casting from a real playback scenario and its side effects (namely the closing of the player).</p> <p>The app consists of two main \"screens\", the video list and the player screen. Three videos are provided in the basic app, one of which always results in an error, and a debug view is shown displaying the current state of the Chromecast SDK and device, if connected to one.</p> <p>A right side navigation drawer is included that sends custom messages to the receiver app to enable disable a Console printout overlay over the receiver, and a Dashboard with information about the device and its capabilities, and the content if anything is being cast.</p>"},{"location":"features/cast/migration/","title":"Critical points for Chromecast v2 Intregratio","text":""},{"location":"features/cast/migration/#motivation","title":"Motivation","text":"<p>The current (as of Jan 2022) implementation of Chromecast within the D+ project is based on a library whose development was started by Bamtech in 2016, and the disadvantages of such an old codebase are starting to show. Additionally, this codebase was being managed by a single person, and we would like to move away from that.</p> <p>Some of the problems we have identified are:</p> <ul> <li>As a consequence of this library being a number of years old, some decisions were made based on older, less capable versions of the underlying cast framework provided by Google. The result is a codebase that feels too overcomplicated for what is really needed.</li> <li>Some decisions made on the design of the SDK are now deemed obsolete or incorrect in regards to the architectural choice of the current D+ app.</li> <li>A number of downsides arise from having the SDK live in a separate deployment (the Bamnet Cast library), the biggest of which is having to rely on versioning in order to push updates or fixes, which then needs to be synchronized with a D+ deployment in order to promote to production.</li> <li>The development of Chromecast features, particularly UI wise, has been constrained by the components that Google would provide out of the box, meaning that historically certain cosmetic or motion requirements by product were not able to be satisfied</li> <li>We'd like to transfer the knowledge and ownership over the feature over the D+ team, rather than a one man effort as it was up until now.</li> </ul>"},{"location":"features/cast/migration/#version-selection","title":"Version selection","text":"<p>First step is introducing a config item flag to toggle between the new and old version of the solution.</p> <p>This config item will have the new <code>cast</code> remote config namespace, but it wont be the main source of truth employed by the app to decide whether to use v1 or v2 solutions. Rather, this value is read when the config is retrieved and stored in the app's SharedPreferences.</p> <p>The reason for this is that the V1 Chromecast solution initializes itself at launch, and so we need to be able to provide a readable value upon app launch that does not cause the startup to stall, in order to decide which implementation will be enabled for each client.</p> <p>Because retrieving the remote config implies executing a network request, we have resorted to having a default value on all clients, that is stored in the <code>SharedPreferences</code>. This value is read on app launch and is kept stable during an app execution on the Cast2EnabledValueHolder which is a Singleton instance. The value is then updated on each remote config retrieval, and it only becomes effective on the subsequent hard launch of the app, when the new value in the preferences is read again by <code>Cast2EnabledValueHolder</code>.</p> <p>Although reading from the preferences (which is a disk I/O) is also an expensive operation, we have settled for it as the lesser evil compared to waiting for the remote config network request to complete.</p> <p>In order to be able to test locally and on QA, we need a way to enforce this config locally, so we will add this as a transformation switch in Jarvis. The same principle remains: enabling it on Jarvis still requires 2 subsequent hard launches of the app in order to apply the change.</p> <p>Due to this caveat and in order to aide in testing for this phase, an additional item in the Debug About section of the app has been added, which will always reflect the value on <code>Cast2EnabledValueHolder</code>:</p> <p></p>"},{"location":"features/cast/migration/#configuration","title":"Configuration","text":"<p>We have prepared V2 to support remote configuration at initialization point, which means we make sure we delay the instantiation of <code>CastOptionsProvider</code> until the config is retrieved. This allows to make the basic parameters for cast configuration that were previously static to be declared in the <code>Cast2Config</code> class. These are at the time of writing this, the receiverId, message namespace and the expandedActivity name.</p> <p>Because we planned the Amazon flavor not to include the <code>cast</code> lib, though, we had to split the config into a basic interface, Cast2ApiConfig, which is declared as Optional and will have no implementation on Amazon, and the full fledged <code>Cast2Config</code> class which includes all other implementation specific config parameters.</p> <p>This <code>Cast2ApiConfig</code> being declared within the DI graph as an Optional also allow us to use it in V1 to enable/disable certain components depending on whether V1 is the chosen approach or not.</p>"},{"location":"features/cast/migration/#castoptionsprovider","title":"CastOptionsProvider","text":"<p>Each solution has its own CastOptionsProvider. We wrapped both solutions' options provider and decide at runtime on each app launch which one will be picked up. This Wrapper will be declared as a replacement for those on the libs, on the google mobile version of the app through:</p> <pre><code>&lt;meta-data\nandroid:name=\"com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME\"\ntools:replace=\"android:value\"\nandroid:value=\"CastOptionsProviderWrapper\" /&gt;\n</code></pre>"},{"location":"features/cast/migration/#expanded-activity","title":"Expanded Activity","text":"<p>The two implementations have different mechanisms to implement the ExpandedControls. While the old library uses a separate Activity, the new approach is based on a combined MiniController+Expanded view. However the Cast SDK requires to specify an activity name for the Notification action to work properly.</p> <p>We must then declare an activity alias in the Mobile app in order to declare that one as a ExpandedControlsActivity. We are safe by declaring this with the older version of the library.</p> <p>Both Activity declarations can coexist in the same Manifest, and only one will be used in runtime, so none of these changes should impact the current implementation.</p>"},{"location":"features/cast/migration/#mediaroutebutton","title":"MediaRouteButton","text":"<p>The MediaRouteButton from V2 is declared in all layouts. This view depends on a Presenter for inflation, and this presenter is added through a lifecycle observer, in a similar fashion as our suggested architecture proposes for fragments and activities.</p> <p>This presenter will then inject a ProxyMediaRouteButtonLifecycleObserver which decides based on the configuration whether to inflate the MediaRouteButton from v1 or the MediaRouteButtonLifecycleObserver, which then binds the ViewModel and Presenter, thus inflating the V2 MediaRouteButton layout.</p> <p>Since this observer is declared as optional, and will only be</p>"},{"location":"features/cast/migration/#castcontrollerminicontroller","title":"CastController/MiniController","text":"<p>Because the ExpandedControls/MiniController approaches are fundamentally different in V1 vs. V2, adding them as a single wrapping view would yield to a more complex solution than having two views declared that in runtime will decide whether to inflate themselves or not.</p> <p>In the case of V2's CastControllerPresenter when preparing the v2 solution for remote config we had to stall the inflation of CastController/MiniController to ensure we don't eagerly trigger cast initialization before config was retrieved. This is done in CastControllerLifecycleObserver, which, similar to how its done for [MediaRouteButton], it lazily initializes the [CastControllerPresenter] only if V2 is enabled.</p> <p>For V1, though, because the original view is simply a fragment contained in the BamnetCast library, we have added a MiniControllerWrapper with a presenter that decides whether to inflate such fragment or not depending on the config.</p> <p>So in <code>fragment_global_nav.xml</code> we see both <code>MiniControllerWrapper</code> and <code>CastController</code> are declared, each with different layout constraints. Only one of them will actually be inflated in runtime.</p>"},{"location":"features/cast/migration/#cast-play-requester","title":"Cast Play requester","text":"<p>The public interface to request a playback is pretty similar on both approaches, so CastConnectionWrapper just exposes the two required functions with all needed params and relays the call to V1 or V2 according to the config.</p>"},{"location":"features/cast/migration/#castinitiator-videoplayerconnector","title":"CastInitiator / VideoPlayerConnector","text":"<p>We follow two different approaches to automatically initiate the playback of the item currently being played locally when initiating a cast session from the player.</p> <p>On V1, a lifecycleObserver is added that waits for a cast connection to happen and then retrieves all required information from the injected player instance and the corresponding viewModel. We can now just inject the <code>Cast2ApiConfig</code> object and only observe the connection event if V2 is not enabled.</p> <p>On V2, the MobilePlaybackActivity explicitly opts-in to this feature by subscribing to VideoPlayerConnector's <code>startWhenConnected</code> method. The [Player] interface includes other callbacks to react upon loading, end and error states.</p> <p>Similarly to how it's done on V1, this implementation only does any work if V2 is enabled.</p>"},{"location":"features/cast/migration/#other-changes-done-in-v1-chromecast-module","title":"Other changes done in V1 <code>chromecast</code> module","text":"<p>CastInitialization has been changed from an explicit interface/implementation injected in the main app to a ProcessLifecycleObserver that triggers initialization upon app startup. The role of this class was to make sure that ChromecastBridge was initialized as soon as the app was launched. This has been changed as well:</p> <p>All injections of ChromecastBridge have been replaced with ChromecastBridgeProvider, which has a nullable method returning the actual ChromecastBridge, initialized lazily only if V2 is not enabled and returning null otherwise. This is done to prevent V1 from eagerly initializing V2.</p> <p>Because of this lazy initialization, we miss the time window for the first device discovery when the app is launched. That means the app would miss such discovery and not show the MediaRoute button on the first launch, only after coming back to the underlying activity. Thus, we have to trigger discovery manually, in the same way we do for V2. This is done in CastDeviceDiscovery, which is triggered in the aforementioned <code>CastInitialization</code> object.</p> <p>When V2 is enabled, ChromecastBridgeProvider will return a null ChromecastBridge and no initialization for V1 is done.</p>"},{"location":"features/cast/migration/#improvements-of-v2-over-v1","title":"Improvements of V2 over V1","text":"<ul> <li> <p>Subtitle and Audio tracks are now being handled through Custom Messaging and thus are now more stable. Using the direct method, i.e. the mediaTracks on the remoteMediaClient, produced erratic behavior when saving language settings on the user's profile.</p> </li> <li> <p>Subtitle Styling is added to the solution. Closed Caption's styling data is taken from the Accessibility settings and sent over to Chromecast on each connection to the SDK.</p> </li> <li> <p>Animations are added to toggle between the MiniController and the ExpandedControls.</p> </li> <li> <p>Most of the configuration parameters for the SDK are remote configurable.</p> </li> <li> <p>Exception handling is introduced in the solution, through incoming message processing from the Receiver. Messages are interpreted as errors and mapped into local Exception models.</p> </li> <li> <p>IMAX version switching now properly works by allowing the request for the same contentID to be sent over to the Receiver if the IMAX preference has changed.</p> </li> <li> <p>MiniController &amp; ExpandedControls now properly survive rotation on Tablet devices (would yield an unstable state on V1)</p> </li> <li> <p>GW Reactions are also appended to the UI after joining a preexisting GW session; the space would be blank on V1.</p> </li> <li> <p>Both Dashboard and debug panels are now toggleable from Jarvis.</p> </li> <li> <p>Requests with the same contentId are now only blocked if the playbackState is not IDLE. This allows the solution to survive playback errors by reattempting to cast the same content that errored.</p> </li> </ul>"},{"location":"features/collections/config_changelog/","title":"Configs ChangeLog","text":"<p>As the apps are continuously evolving, the <code>collections_config.json</code> and <code>images_config.json</code> files are as well.</p> <p>To keep track of these changes, there is a changelog file.</p> <p>Keep the changelog updated</p> <p>Remember to update this changelog file everytime a change is made in the Collections Config or Images Config.</p>"},{"location":"features/collections/images_config/","title":"Images Config","text":"<p>In a similar fashion, images are retrieved based on a configuration file named images_config.json. Each entry in this json file could be resolved with the <code>ImageConfigResolver.resolve(imageConfigId: String, aspectRatio: AspectRatio)</code> method. The <code>aspectRatio</code> parameter will be used to replace the optional <code>{aspectRatio}</code> placeholder in each image path.</p> <p>The structure of the <code>images_config.json</code> file has been updated per v2.8. See the changelog for the complete list of changes.</p> Basic structure <pre><code>{\n\"imageConfigIdMapping\": {\n    \"channels_tile\": \"default_tile\"\n},\n\"$imageConfigId\": {\n    \"default\": [],\n    \"$programType1\": [],\n    \"$programType2\": []\n}\n\"home_brandFocused\": {\n    \"default\": [\n    \"tile_white/{aspectRatio}/default/default\"\n    ]\n},\n\"search_default\": {\n    \"default\": [\n    \"tile/{aspectRatio}/video/default\",\n    \"tile/{aspectRatio}/program/default\",\n    \"tile/{aspectRatio}/series/default\"\n    ],\n    \"episode\": [\n    \"thumbnail/{aspectRatio}/program/default\"\n    ]\n},\n\"default_hero_titleTreatmentLayer\": {\n    \"default\": [\n    \"title_treatment_layer/{aspectRatio}/program/default\"\n    ],\n    \"collection\": [\n    \"logo_layer/{aspectRatio}/default/default\",\n    \"title_treatment_layer/{aspectRatio}/default/default\"\n    ],\n    \"episode\": [\n    \"title_treatment_layer/{aspectRatio}/program/default\",\n    \"title_treatment_layer/{aspectRatio}/series/default\"\n    ],\n    \"series\": [\n    \"title_treatment_layer/{aspectRatio}/series/default\"\n    ]\n},\n\"event_mobile\": {\n    \"default\": [\n    \"title_treatment_centered/1.78/program/default\",\n    \"title_treatment_bottom/1.78/program/default\",\n    \"logo/1.00/team/default?source=eventCompetitors,numberOfImages=2\",\n    \"logo/1.00/league/default?source=eventLeague\"\n    ]\n}\n}\n</code></pre> <p>In this file, we declare a <code>imageConfigId</code> and then specify the different image paths for that reference. When it is required to have different image paths based on the Asset programType value, you can define a different array of image paths under the programType node. Some examples of the possible programType node name values are: <code>collection</code>, <code>episode</code>, <code>series</code>, <code>movies</code>, <code>marqueeEvent</code>, <code>sport</code>, <code>league</code>, <code>team</code>. Note that there should always be <code>default</code> node with an array of image paths.  </p> <p>Each value in the <code>images_config.json</code> will be parsed into an ImageConfig object that contains an array of ImagePath objects. Each ImagePath represents the path to an image that is provided on asset level within the Content API response.</p>"},{"location":"features/collections/images_config/#imagepath-parameters","title":"ImagePath parameters","text":"<p>With the addition of sport images for S+, it was a requirement to have multiple images with a different source. This is where the ImagePath parameters comes into effect. At the end of each image path, parameters could be added by adding the following postfix: <code>?key1=value1,key2=value2</code>. Currently, there are 2 types of parameters supported: <code>source</code> and <code>numberOfImages</code>.</p> <ul> <li>The <code>source</code> parameter is used to define where the image should be taken from. With the addition of sport events, it is a requirement to resolve images from the main asset level (which is the default) or <code>sportTags</code>, <code>eventLeague</code> and <code>eventCompetitors</code> source.</li> <li>The <code>numberOfImages</code> parameter is used to define the required number of images. If the required number of images for this path doesn't match, it will skip the image path and tries the next one.</li> </ul> Some examples of ImagePaths with parameters <pre><code>\"logo/1.00/team/default?source=eventCompetitors,numberOfImages=2\"\n\"logo/1.00/league/default?source=eventLeague\"\n\"tile/{aspectRatio}/sport/default?source=sportTags\"\n\"logo/{aspectRatio}/sport/default?source=sportTags\"\n</code></pre>"},{"location":"features/collections/images_config/#imageconfigidmapping","title":"imageConfigIdMapping","text":"In <code>images_config.json</code> <pre><code>{\n\"imageConfigIdMapping\": {\n    \"channels_tile\": \"default_tile\"\n}\n}\n</code></pre> <p>The special element <code>imageConfigIdMapping</code> allows the mapping of some of the image config reference ids into other ids to avoid repeating configurations that are equivalent. In the case of the example above, the <code>channels_title</code> reference is mapped into our <code>default_tile</code> below.</p>"},{"location":"features/collections/images_config/#examples-of-resolving-imageconfig","title":"Examples of resolving ImageConfig","text":"<p>There are mainly 2 different ways of resolving an ImageConfig.</p> <p>The first way is by injecting the <code>ImageConfigResolver</code> instance into your class and invoke <code>resolve</code> with <code>imageConfigId</code> and the desired <code>aspectRatio</code>.</p> Use ImageConfigResolver - <code>resolve</code> <pre><code>imageConfigResolver.resolve(\"default_heroFullscreen_eventLogo\", AspectRatio.RATIO_ORIGINAL)\nimageConfigResolver.resolve(\"default_heroFullscreen_logo\", AspectRatio.RATIO_16x9)\n</code></pre> <p>The second way is by referencing the <code>imageConfigId</code> in the <code>collections_config.json</code> in one of the <code>imageConfigRef</code>, <code>imageConfigLogoCTARef</code>, <code>imageConfigLogoRef</code>, <code>imageConfigFocusedRef</code>,  <code>backgroundImageConfigRef</code> or <code>titleImageConfigRef</code>.</p> <p>For this approach, the <code>ContainerConfigResolverImpl</code> takes care of parsing the <code>imageConfigId</code> value and resolve the ImageConfig with the <code>imageConfigId</code> and <code>aspectRatio</code> values from the <code>collections_config.json</code>.  </p> <p>In the example <code>collections_config.json</code> below, the <code>imageConfigRef</code> value is referring to <code>default_tile</code> which is specified in the <code>images_config.json</code>. Besides that, <code>backgroundImageConfigRef</code> and <code>titleImageConfigRef</code> are specified for the <code>brand</code> collection.</p> Referencing the <code>imageConfigId</code> <pre><code>{\n\"brand\": {\n    \"backgroundImageConfigRef\": \"default_landingBackground\",\n    \"displayType\": \"brandLanding\",\n    \"titleAspectRatio\": 2.0,\n    \"titleImageConfigRef\": \"brand_landingTitle\",\n    \"sets\": {\n    }\n},\n\"home\" : {\n    \"sets\" : {\n    \"default\": {\n        \"shelf_grid\": {\n        \"imageConfigRef\": \"default_tile\",\n        \"breakpoints\": {\n            \"land\": {\n            \"aspectRatio\": 3.91\n            },\n            \"port\": {\n            \"aspectRatio\": 1.78\n            }\n        }\n        }\n    }\n    }\n}\n}\n</code></pre> <p>This indicates that for this Combination of collection, content type and container style, the <code>imageConfigRef</code> should be read from <code>images_config.json</code> in the key <code>default_tile</code>.</p> <p>When resolving the config, ImageConfigResolver would combine the Container Info retrieved from <code>collections_config.json</code> to determine which aspect ratio is needed, with the Image config info found on <code>images_config.json</code> to resolve an effective path or list of paths from which to retrieve the most appropriate image for that tile.</p> ImagesConfig example <p></p>"},{"location":"features/collections/important_classes/","title":"List of Important Classes","text":"<ul> <li> <p><code>AbstractCollectionHiltFragment</code> - Base implementation for Collection pages. Some examples are:</p> <ul> <li><code>BrandPageFragment</code> (e.g. Star Wars or Marvel pages)</li> <li><code>DiscoverFragment</code> (Home page)</li> <li><code>EditorialPageFragment</code></li> <li><code>LandingPage</code></li> <li><code>OriginalsPageFragment</code></li> <li><code>SportsHomeFragment</code></li> </ul> </li> <li> <p><code>CollectionViewModel</code> - Performs the collection request (either by <code>slug</code> or <code>collectionGroupId</code>) and exposes the result as a <code>CollectionViewModel.State</code></p> </li> <li> <p><code>CollectionViewPresenter</code> - Data class that encapsulates the minimum required UI elements for a <code>Collection</code> page (<code>recyclerview</code>, <code>adapter</code>, <code>emptyview</code>, <code>progressbar</code>...)</p> </li> <li> <p><code>CollectionFragmentHelper</code> - Ties together the <code>CollectionFragment</code>, <code>CollectionViewModel</code> and <code>CollectionView</code>.</p> </li> <li> <p><code>ShelfItem</code> - Base implementation for a Shelf Container, which holds a title TextView and the RecyclerView that will contain the <code>ShelfListItems</code></p> </li> <li> <p><code>ShelfListItem</code> - Contains a base implementation for a single tile (corresponding with an Asset) within a container view.</p> </li> <li> <p><code>ImageConfigResolver</code> &amp; <code>Impl</code> - Handles the parsing &amp; merger of configuration sources for image presentation within collections.</p> </li> <li> <p><code>ContainerConfigResolver</code> &amp; <code>Impl</code> - Handles the parsing &amp; merger of configuration sources for presentation at the Container level.</p> </li> <li> <p><code>ContainerConfig</code> - Represents a given config after the resolution is performed by <code>ContainerConfigResolver</code></p> </li> <li> <p><code>CollectionConfigResolver</code> - Handles the parsing &amp; merger of configuration sources for presentation at the Collection level.</p> </li> <li> <p><code>CollectionsAppConfigImpl</code> - Config class that contains the configurable values related collection setup in general.</p> </li> <li> <p><code>CollectionRequestConfigImpl</code> - Config class that contains the configurable values related to loading the collection.</p> </li> <li> <p><code>ContainerConfigParser</code> - Handles the parsing &amp; merger of configuration sources for presentation at the container level.</p> </li> </ul>"},{"location":"features/collections/presentation_model/","title":"Presentation model","text":""},{"location":"features/collections/presentation_model/#abstractcollectionhiltfragment","title":"AbstractCollectionHiltFragment","text":"<p>AbstractCollectionHiltFragment was introduced to reduce duplicate logic, having the main enforced functions: <code>onCreateCollectionView()</code>, <code>onPreCollectionStateChanged</code> and <code>onCollectionStateChanged</code>. These functions may be in the end implemented by the Fragment or by a CollectionStateObserver.</p> <p>AbstractCollectionHiltFragment is getting injected with CollectionViewModel, but it doesn't have the responsibility of observing Collections. This dependency is used for track and analytics purposes.</p> <p>AbstractCollectionHiltFragment is strongly coupled to CollectionFragmentHelper.</p>"},{"location":"features/collections/presentation_model/#collectionfragmenthelper","title":"CollectionFragmentHelper","text":"<p>CollectionFragmentHelper ties together AbstractCollectionHiltFragment, the CollectionViewPresenter, CollectionView and OfflineViewModel. This can be used in combination with an implementation of AbstractCollectionHiltFragment to automatically set up the binding logic.</p> <p>The Helper will observe the CollectionViewModel.State, bind it to CollectionViewPresenter and call <code>onPreCollectionStateChanged</code> which in turn will be implemented by a CollectionStateObserver or overridden by the Fragment.</p> <p>This Helper shouldn\u2019t be used by a feature directly, but instead just extend AbstractCollectionHiltFragment which will use this as intended.</p>"},{"location":"features/collections/presentation_model/#collectionviewmodel","title":"CollectionViewModel","text":"<p>CollectionViewModel will fetch the collection for a given <code>collectionIdentifier</code> from the repository when initialized. The Fragment is responsible for providing this Identifier with a property and CollectionView will be injected with it.</p> Providing CollectionIdentifier with Hilt <pre><code>class YourPageFragment : AbstractCollectionHiltFragment(), SlugProvider.Provider {\n\n    val slug by parcelableArgument&lt;CollectionIdentifier&gt;(PARAM_SLUG)\n\n    override fun provideSlug(slugProvider: SlugProvider) = slug\n}\n</code></pre> <p>CollectionViewModel calls <code>CollectionsRepository.getCollectionBySlug(slug)</code> and emits a new <code>CollectionViewModel.State</code>. As described above CollectionFragmentHelper will observe and bind it to CollectionViewPresenter (responsible for creating Groupie Items)</p>"},{"location":"features/collections/remotely_config_update/","title":"Remotely Config Update","text":""},{"location":"features/collections/remotely_config_update/#how-to-update-collection-config-remotely","title":"How to update collection config remotely?","text":"<p>To update the collection / images config remotely, it requires a few steps. These steps should be done on the dmgz-android-appconfig repository.  </p> <ol> <li> <p>Create a PR to the <code>prod-internal</code> branch with the updated configs in the dmgz-android-appconfig collections folder. It makes sense to use a name that matches the desired app version.</p> Example - Create the config file <p>For Disney+ 2.1 version, the <code>D.2.1.json</code> file has been created. The PR from this first step could be merged directly. That will deploy the provided <code>D.2.1.json</code> file, so once the deploy has been done, it could be referenced via appconfigs.disney-plus.net/dmgz/prod-internal/android/collections/D.2.1.json.</p> </li> <li> <p>Setup your build with Jarvis where it points to <code>collections.configVersion</code> to <code>D.2.1</code>.</p> Enable app config environment to prod-internal <p>Enable <code>Config Staging - App Config Staging Environment (prod-internal)</code> and verify your changes.  </p> </li> <li> <p>When the updated collections config is correct, create a PR that merges the changes from step 1 from <code>prod-internal</code> into <code>prod</code>.</p> Example - Deploy the config file to prod <p>That will deploy the <code>D.2.1.json</code> file to prod: appconfigs.disney-plus.net/dmgz/prod/android/collections/D.2.1.json.</p> </li> <li> <p>Create a second PR to the <code>prod-internal</code> branch where it points the <code>collections.configVersion</code> config value to the filename used in step 1. In this example, it would point to <code>D.2.1</code>.</p> Example - Set config version on App config file. <pre><code>{\n\"collections\": {\n    \"configVersion\": \"D.2.1\"\n}\n}\n</code></pre> </li> <li> <p>Merge <code>prod-internal</code> again into <code>prod</code> with the changes from step 4.</p> Important <p>Once this PR has been merged, the production builds are referencing the updated collection config json.</p> </li> </ol> Images Config Update <p>In order to update the images config, it is basically the same process. The <code>collections.imagesConfigVersion</code> config field and images folder should be used instead.</p> Updating an existent collection_config or image_config file <p>If there are existing <code>collection_config</code> or <code>image_config</code> files already deployed remotely for a specific version, updating this existing file will not affect users who have previously fetched this file. This is because when the app fetches that file version once, it stores it locally, and it will not fetch again the same file version, which causes the new changes to not appear for existing users.</p> <p>For this reason, if you need to add new configs to an existing <code>collection_config</code> or <code>image_config</code> files, you will need to create a new file (containing the existing config + the new config you want to add), and link the new version on the: <code>\"configVersion\": \"D.X.X\"</code></p> <p>Some PR examples are: </p> <ul> <li>Create new files with the old configs + new config needed</li> <li>Update the configVersion on the app config file</li> </ul> Check the Changelog <p>The <code>collections_config.json</code> and <code>images_config.json</code> files has been changed a lot in the past.</p> <p>Updating the collections config or image config for multiple versions at the same time might be a tricky operation. </p> <p>Please keep the changelog in mind and double check your changes on the different app versions that your change is pointing to.     </p>"},{"location":"features/collections/snap_and_scroll/","title":"Snap and Scroll behavior","text":"<p>Each collection based fragment requires its own scroll behavior. Therefore, the RecyclerViewSnapScrollHelper has been created. There are 4 different <code>SnapType</code>s defined in the RecyclerViewSnapScrollHelper implementation: <code>Start</code>, <code>Level</code>, <code>Center</code> and <code>CenterNoInsets</code>.</p> <p>In order to make use of the <code>RecyclerViewSnapScrollHelper</code>, it is only required to inject it into the presenter and trigger the init method with the desired <code>SnapType</code>, <code>RecyclerView</code> and the <code>viewLifecycleOwner</code>.</p> <p>The <code>RecyclerViewSnapScrollHelper.init</code> method is responsible for checking whether to support the snap scroll logic, which is limited to the television devices or any other device with focus navigation support.</p> Init <pre><code>recyclerViewSnapScrollHelper.init(\n    fragment.viewLifecycleOwner,\n    binding.collectionRecyclerView,\n    RecyclerViewSnapScrollHelper.SnapType.Center\n)\n</code></pre>"},{"location":"features/collections/snap_and_scroll/#snaptypestart","title":"SnapType.Start","text":"<p>The <code>Start</code> type snaps the focused view to the top of the RecyclerView. It takes a <code>scrollOffsetDimenRes</code> parameter to define a certain amount of additional offset to be added on top.</p> Start Start(20dp) Start gif <p> </p>"},{"location":"features/collections/snap_and_scroll/#snaptypelevel","title":"SnapType.Level","text":"<p>The <code>Level</code> type snaps the focused view on a specific row. It takes the <code>level</code> parameter to determine on which row it should snap. Passing 0 as level is basically the same as using <code>SnapType.Start</code>.</p> Level(1) Level(2) Level(1) gif <p> </p>"},{"location":"features/collections/snap_and_scroll/#snaptypecenter","title":"SnapType.Center","text":"<p>The <code>Center</code> type snaps the focused view in the center of the RecyclerView. It takes the padding top &amp; bottom values into account and centers in the middle of the padded scroll window.</p> Center Center gif <p> </p>"},{"location":"features/collections/snap_and_scroll/#snaptypecenternoinsets","title":"SnapType.CenterNoInsets","text":"<p>The <code>CenterNoInsets</code> type snaps the focused view in the center of the RecyclerView. Compared to <code>Center</code>, it doesn't take the padding top &amp; bottom values into account as you can pass these values as a parameter to bypass the padded scroll window.</p> CenterNoInsets <p><pre><code>   SnapType.CenterNoInsets(\n       view.collectionRecyclerView.paddingTop,\n       view.collectionRecyclerView.paddingBottom\n    )\n</code></pre> will center in the middle of the RecyclerView, regardless the paddingTop/paddingBottom values.</p> CenterNoInsets CenterNoInsets gif <p> </p>"},{"location":"features/collections/collection_config/collection_config/","title":"Collection Config","text":"<p>In order to be able to change the presentation of the collections on the fly, additional configuration sources are used to determine how an item is rendered on the screen, depending on a number of factors.</p> <p>This is represented mainly by an external json file called <code>collections_config.json</code> and <code>collections_config_{partner}.json</code>. These two get merged to produce a final configuration for collections, the latter including only the specifics for that particular partner (note, thus, that when looking for defaults you might have to check both files).</p> <p>Whenever a <code>collections.configVersion</code> is specified on the remote config at the Configuration project, then that version will be retrieved and looked up to be merged with the bundled [collection_config.json] file mentioned above. See CollectionConfigRepository.</p> Basic structure <pre><code>{\n    \"home\" : {\n        \"displayType\": \"seriesLanding\",\n        \"titleAspectRatio\": 1.78,\n        \"titleImageConfigRef\": \"default_landingTitle\",\n        \"backgroundImageConfigRef\": \"default_landingBackground\",\n        \"backgroundAspectRatio\": {\n        \"land\": 1.78,\n        \"port\": 0.71,\n        \"sw420dp-port\": 0.71,\n        \"sw600dp-land\": 1.78,\n        \"sw600dp-port\": 1.78,\n        \"sw720dp-land\": 1.78,\n        \"sw720dp-port\": 1.78,\n        \"television\": 1.78\n        },\n        \"sets\" : {\n        \"default\": {\n            ...\n        },\n        \"hero\": {\n            \"hero\": {\n                \"tags\" : [\"tag1\",\"tag2\"],\n                \"render\": true,\n                \"title\": \"none\",\n                \"aspectRatio\": 1.2,\n                \"tiles\": 1,\n                \"imageConfigRef\": \"home_hero\",\n                \"itemMargin\": 10,\n                \"topGridMargin\": 5,\n                \"bottomGridMargin\": 5,\n                \"breakpoints\": {\n                    ...\n                }\n            }\n        }\n        }\n    }\n}\n</code></pre> <p>This represents a series of configuration parameters that determine how to render each element within a collection. On this schema there are two types of config elements:</p>"},{"location":"features/collections/collection_config/collection_params/","title":"Collection Parameters","text":"<p>Parameters defined within the base of each root element (e.g. <code>home</code> in the example above) pertain configuration on the Collection level, and thus are read by CollectionConfigResolver. These parameters effectively result in the configuration of the page/fragment in which the collection is rendered.</p> <p>At this level, the most significant parameter is <code>displayType</code>, as it determines which of the AbstractCollectionHiltFragment implementations will be used to render the collection. This is seen in the CollectionItemClickHandlerImpl:</p> Method resolveForConfig <pre><code>    private fun resolveForConfig(config: CollectionConfig, reference: ReferrableContent) {\n        val identifier = provideSlug(reference)\n        when (config.displayType) {\n            \"contentTypeLanding\" -&gt; landingRouter.startLandingPage(identifier)\n            \"tabbedLanding\" -&gt; landingRouter.startTabbedCollectionPage(identifier)\n            \"brandLanding\" -&gt; landingRouter.startBrandPage(identifier)\n            \"originalsLanding\" -&gt; landingRouter.startOriginalsPage(identifier)\n            \"teamLanding\" -&gt; landingRouter.startTeamPage(identifier)\n            \"superEventLanding\" -&gt; landingRouter.startSuperEventPage(identifier)\n            \"allSportsLanding\" -&gt; landingRouter.startAllSportsPage(identifier)\n            else -&gt; landingRouter.startEditorialPage(identifier)\n        }\n    }\n</code></pre> <p>Other items are:</p> <ul> <li> <p><code>titleAspectRatio</code> and <code>titleImageConfigRef</code>: which declare aspect ratio and image config reference of the title image of the page</p> </li> <li> <p><code>backgroundAspectRatio</code> and <code>backgroundImageConfigRef</code>: which declare aspect ratio and image config reference for the background image of the page</p> </li> </ul>"},{"location":"features/collections/collection_config/override_layers/","title":"Different Layers to Override Values","text":"<p>In the <code>collections_config.json</code> and <code>collections_config_PARTNER.json</code> files, you can basically define those values in 4 different layers with the following combination <code>contentClass:container</code>.</p> <p>We have the following combinations</p> <ol> <li><code>[contentClass]:[containerStyle]</code> - contains the configurations for a specific collection and a specific container style.</li> <li><code>default:[containerStyle]</code> - contains the configurations for the default collection and a specific container style.</li> <li><code>[contentClass]:default</code> - contains the configurations for a specific collection and the default container style.</li> <li><code>default:default</code> - contains the configurations for the default collection and default container.</li> </ol> <p>Order Matters</p> <p>The ContainerConfigParser implementation handles the parsing of the different layers.</p> <p>It will first look a specific value in the the <code>[contentClass]:[containerStyle]</code> layer, then <code>default:[containerStyle]</code>, then <code>[contentClass]:default</code> and in the <code>default:default</code> layer as last option.   </p> Examples <ul> <li>If you'd like to change the number of <code>tiles</code> for the <code>poster</code> container style on the <code>home</code> contentClass, you'll need to put <code>tiles: X</code> into the <code>home.sets.poster</code> layer. </li> <li>If you'd like to change the number of <code>tiles</code> for all the container styles on the <code>editorial</code> contentClass, you'll need to put <code>tiles: X</code> into the <code>editorial.sets.default</code> layer. </li> <li>If you'd like to change the <code>itemViewType</code> for the <code>episode</code> container style on all collection, you'll need to put <code>itemViewType: X</code> into the <code>default.sets.episode</code> layer. </li> <li>If you'd like to change the <code>tags</code> for all container styles on all collection, you'll need to put <code>tags: X</code> into the <code>default.sets.default</code> layer. </li> </ul>"},{"location":"features/collections/collection_config/set_params/","title":"Set Parameters","text":"<p>Configuration items within the <code>sets</code> element apply to the Container level and its tiles, and are parsed by ContainerConfigResolver. Hence these items affect the tiles and the container holding the RecyclerView for them.</p> <p>To understand how the container items work we need to match the sample json with the response obtained from the backend, in this case for the home collection, to be able to see how they relate to each other:</p> Set parameters <pre><code>{\n\"containers\": [\n    {\n        \"set\": {\n            \"refId\": \"62d5d17c-96e9-41f2-829b-71e6b683b440\",\n            \"refIdType\": \"setId\",\n            \"refType\": \"CuratedSet\",\n            \"type\": \"SetRef\",\n            \"text\": {\n                \"title\": {\n                    \"full\": {\n                        \"set\": {\n                            \"default\": {\n                                \"content\": \"Home\",\n                                \"language\": \"en-GB\",\n                                \"sourceEntity\": \"set\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"type\": \"HeroContainer\",\n        \"style\": \"hero\"\n    },\n    ...\n]\n}\n</code></pre> <p>in the <code>collections_config.json</code> example, <code>home</code> represents the name of the collection, with <code>default</code> being the special case that covers the configuration for items when no other specific override is given. Within each of these collections a list of <code>sets</code> follows indicating the specific configuration for any given container style.</p> <p>Thus, in the example above, <code>hero</code> would be the container style as it comes from the FEDSA response as <code>style</code>. And again, <code>default</code> is a special case that covers all possible containers within this particular collection, that do not have a specific configuration.</p> <p>Next, the <code>shelf_grid</code> entry matches against the container type in the response, in this case <code>HeroContainer</code>. For this, a mapper is set up in ContainerModels:</p> <pre><code>enum class ContainerType(val configKey: String) {\n    HeroFullBleedContainer(configKey = \"hero_full_bleed\"),\n    ShelfContainer(configKey = \"shelf_grid\"),\n    Other(configKey = \"not_in_config\");\n</code></pre> Model Representation <p></p> <p>Now for each of these triples <code>collection</code> + <code>container_style</code> and <code>type</code>, we can configure a number of parameters, which include:</p> <ul> <li> <p><code>tags</code>: Tags are an arbitrary number of strings that allow you to do later customizations for each element, by calling the function <code>config.containsSetTag(\"tag\")</code>. This is an array of String tags, the String tags from the different layers will be merged into one array. More information about the different layers could be found in the #different-layers-to-override-values topic.</p> </li> <li> <p><code>excludeTags</code>: is an array of SetTag values that should be excluded from <code>tags</code>.  </p> </li> <li> <p><code>title</code>: Indicates whether the container title should be displayed or not. Can be either <code>none</code> or <code>above</code></p> </li> <li> <p><code>titleStyle</code>: String value to change title styling. Possible options are: <code>CollectionTitle</code> and <code>H3</code>.</p> </li> <li> <p><code>render</code>:Whether to render the container at all or not.</p> </li> <li> <p><code>aspectRatio</code>: aspect ratio that each tile within the set will be given. This can be later retrieved from the config and enforced on the ShelfItem, for instance in <code>ShelfItemLayout</code></p> </li> <li> <p><code>tiles</code>: number of tiles that will be visible within the visible area of the app for any given device. This will be calculated and enforced in runtime.</p> </li> <li> <p><code>imageConfigRef</code>, <code>imageConfigsLogo</code>, <code>imageConfigsLogoCTA</code> and <code>imageConfigsFocused</code>: indicates the reference within the Image config determining how to present an image within the tile.</p> </li> <li> <p><code>itemMargin</code> : Margin between items within the list/grid</p> </li> <li> <p><code>itemViewType</code> : key of ItemViewType to determine how an asset tile within the container should be rendered.</p> </li> <li> <p><code>topGridMargin</code>, <code>bottomGridMargin</code>, <code>startGridMargin</code>, <code>endGridMargin</code>: represents the spacing of the container of the list of elements.</p> </li> <li> <p><code>list</code>: Boolean value to determine whether the content should render as a simple list.</p> </li> <li> <p><code>gridViewPlaceholderRows</code>: number of rows that will be visible as placeholders while converting a ReferenceSet to a ContentSet for a grid view set.</p> </li> <li> <p><code>customValues</code>: Json data that will be mapped into a <code>Map&lt;String, Any&gt;</code> to allow custom values.</p> </li> <li> <p><code>scaleOnFocus</code>: Float value to support different tile scaling on focus.</p> </li> <li> <p><code>scaleOnHover</code>: Float value to support different tile scaling on hover (Chromebook).</p> </li> <li> <p><code>fallbackImageDrawableTextSize</code>: Float value to determine the text size for fallback images.</p> </li> <li> <p><code>fallbackImageDrawableTextLineSpacing</code>: Float value to determine the text line spacing for fallback images.</p> </li> <li> <p><code>breakpoints</code>: allows to specify different values per a number of device discriminators, these being:             - <code>television</code>             - <code>land</code>             - <code>port</code>             - <code>sw420dp-port</code>             - <code>sw600dp-land</code>             - <code>sw600dp-port</code>             - <code>sw720dp-land</code>             - <code>sw720dp-port</code></p> </li> </ul> <p>This way we can specify a different aspect ratio, number of tiles or spacing on different device types. Note that unless we mark a default value you need to specify values for all discriminators.</p> Info <p>On runtime, the ContainerConfigResolverImpl will parse this config file and retrieve the appropriate values for the device it's running on, that is, if we are running on a mobile device with a width of more than 600dp, then the <code>aspectRatio</code> field within ContainerConfig will automatically be the right value.</p>"},{"location":"features/collections/collection_config/set_tags/","title":"Set Tag Values","text":"<p>The SetTag class is a convenient way to toggle some behavior for a container. In this subject, the possible SetTag values are being summed up and provided with some examples.</p>"},{"location":"features/collections/collection_config/set_tags/#disablefirstgridrowtoppadding","title":"DisableFirstGridRowTopPadding","text":"<p>Tag indicates if first grid shelf row shouldn't show the top padding. The ShelfGridItem implementation supports having a certain amount of top inset by default, using this tag would disable that.</p> Demo tag DisableFirstGridRowTopPadding No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#disableairingnotlive","title":"DisableAiringNotLive","text":"<p>Tag indicates if an <code>Airing</code> asset that is not live should be disabled. This is currently used for Studio Show episodes on upcoming and just ended states under the <code>Past and Upcoming</code> tab in the Studio Show series details page.</p>"},{"location":"features/collections/collection_config/set_tags/#displaylivebadge","title":"DisplayLiveBadge","text":"<p>Tag indicates if broadcast programs live badge should be displayed. This tag is applied by default on all our apps.</p>"},{"location":"features/collections/collection_config/set_tags/#hideupcomingreairbadge","title":"HideUpcomingReAirBadge","text":"<p>Tag indicates if broadcast programs upcoming Re-Air badge (secondary badge) should be hidden. This is currently used on the 0.71 aspect ratio tiles on all apps.</p> Demo tag HideUpcomingReAirBadge No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#loop","title":"Loop","text":"<p>Indicates whether the hero / heroFullBleed container should loop infinitely. With this tag, the user would be able to swipe through the hero carousel in an endless loop. This is currently used by the hero &amp; heroFullBleed implementation in Disney+.</p>"},{"location":"features/collections/collection_config/set_tags/#matchwidthvadergrid","title":"MatchWidthVaderGrid","text":"<p>Indicates whether the number of tiles should exactly match width of the vader grid.</p> Demo tag MatchWidthVaderGrid No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#tilesmatchassetcount","title":"TilesMatchAssetCount","text":"<p>Indicates that the number of assets should determine the tiles property of the ContainerConfig. This SetTag is a left-over from the initial Disney+ launch where the <code>originals</code> tile wouldn't be available. Applying this tag to a container will adjust the number of visible tiles to match the actual tile count.</p> Demo tag TilesMatchAssetCount No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#imagehideoriginalslogo","title":"ImageHideOriginalsLogo","text":"<p>Indicates if the tile should hide the originals logo for originals content. The originals logo on asset tiles is supposed to be hidden on episodes tiles and on the <code>originals</code> collection.</p> Demo tag ImageHideOriginalsLogo No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#imagetransparentplaceholder","title":"ImageTransparentPlaceholder","text":"<p>Indicates whether the default placeholder while loading images should be ignored.</p> Demo tag ImageTransparentPlaceholder No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#imagesupporttransparency","title":"ImageSupportTransparency","text":"<p>Indicates if the tile supports transparency. This is useful for images that represents a logo with transparent background, like brand or club/league logos.</p> Demo tag ImageSupportTransparency No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#pinscrollwindow","title":"PinScrollWindow","text":"<p>Indicates if scroll window should be pinned to top for current focus view. This is used to enforce the RecyclerView to snap scroll state to top of the RecyclerView. This is mainly used by the <code>brand</code> and <code>featured</code> container on the <code>home</code> collection.</p> Demo tag PinScrollWindow No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#routetoplayback","title":"RouteToPlayback","text":"<p>Indicates if an <code>AiringItem</code> should route to playback instead of to the details page.</p>"},{"location":"features/collections/collection_config/set_tags/#noaspectratiobasedminheight","title":"NoAspectRatioBasedMinHeight","text":"<p>Indicates if the ShelfNoSnapItem should not set the minimum height based on the aspectRatio. This is useful on containers where the tile doesn't match the aspectRatio because there is an additional metadata view on the side (ContinueWatching on Star+), or the collection view doesn't take the full width (explore with grid keyboard).</p> Demo tag NoAspectRatioBasedMinHeight No Tag With Tag"},{"location":"features/collections/collection_config/set_tags/#focusedassetvideoartsupport","title":"FocusedAssetVideoArtSupport","text":"<p>Indicates if the set supports playback of VideoArt on asset focus. I.e. this is used for all sets on brand page &amp; the heroInteractive set on home / espn page.</p>"},{"location":"features/collections/collection_config/set_tags/#leftfocusdoesnotopennav","title":"LeftFocusDoesNotOpenNav","text":"<p>Indicates that focusing left will not open the nav bar. This was introduced when adding the grid keyboard on search. Focusing left needs to focus that grid keyboard, not open the nav bar.</p>"},{"location":"features/collections/collection_config/set_tags/#alphafocuseffectenabled","title":"AlphaFocusEffectEnabled","text":"<p>Indicates that an alpha animation will be applied when focusing/unfocusing the item. Unfocused items will have their alpha dimmed.</p> <p>This tag will be ignored programmatically on lite mode devices</p> Demo tag AlphaFocusEffectEnabled No Tag With Tag"},{"location":"features/collections/overview/asset/","title":"Asset","text":"<p>An asset is each of the elements in a ContentSet.</p>"},{"location":"features/collections/overview/collection/","title":"Collection","text":"<p>The top most concept is that of a Collection.</p> <p>A Collection is a group of ordered containers with a collection identifier that indicates something about the content. This is what the client devices call for displaying app screens such as <code>/home/</code> or <code>/explore/</code>.</p> <p>Essentially, a collection represents all the items presented on a page and is comprised of a list of containers, with each of these having a set.</p> <p>A simple example of the response model for the collections endpoint is as follows:</p> Collection response model <pre><code>{\n  \"data\": {\n    \"Collection\": {\n        \"callToAction\": null,\n        \"collectionGroup\": {\n            \"collectionGroupId\": \"0830390a-b0f3-4420-8a7f-2e541798f9e8\",\n            \"contentClass\": \"home\",\n            \"key\": \"home\",\n            \"slugs\": [{\n                \"language\": \"en\",\n                \"value\": \"home\"\n            }]\n        },\n        \"collectionId\": \"3ea37bc7-5439-48e2-a0e2-e920e5ce9867\",\n        \"containers\": [\n            {\n                \"set\": {\n                }\n            },\n            {\n                \"set\": {\n                }\n            }\n        ],\n        \"text\": {\n            \"title\": {\n                \"full\": {\n                    \"collection\": {\n                        \"default\": {\n                            \"content\": \"Home\",\n                            \"language\": \"en-GB\",\n                            \"sourceEntity\": \"collection\"\n                        }\n                    }\n                }\n            }\n        },\n        \"type\": \"StandardCollection\",\n        \"subType\": \"StandardCollection\",\n        \"videoArt\": []\n    }\n  }\n}\n</code></pre>"},{"location":"features/collections/overview/collection/#collection-metadata","title":"Collection metadata","text":"<p>The response of a collection request contains several metadata values. This subject is used to sum up the most important values and explain what these mean. As an example, see the response of the <code>home</code> collection request in the collection subject.</p>"},{"location":"features/collections/overview/collection/#contentclass","title":"contentClass","text":"<p>The <code>contentClass</code> is a key which is used to determine what type of collection needs to be resolved. This will be combined with the <code>slug</code> value to link to a specific collection, where the <code>contentClass</code> presents the collection type and <code>slug</code> the unique identifier. The collection will be resolved by the <code>getCollection</code> endpoint.</p> <p>To resolve a collection, both the <code>contentClass</code> and <code>slug</code> values are part of the endpoint. Possible values for the <code>contentClass</code> are: <code>home</code>, <code>watchlist</code>, <code>contentType</code>, <code>originals</code>, <code>espn</code>, <code>explore</code>, <code>brand</code>, <code>avatars</code>, <code>editorial</code>, <code>character</code>.</p> <p>See the implementation SlugProvider for a complete list of used collections.</p> Endpoint example <p>The endpoint looks like this: <code>/svc/content/Collection/StandardCollection/version/5.1/region/*/audience/*/maturity/*/language/*/contentClass/$CONTENT_CLASS/slug/$SLUG</code> where the <code>CONTENT_CLASS</code> and <code>SLUG</code> placeholders should be replaced by the contentClass and slug values.</p> Some examples to illustrate the usage of the <code>contentClass</code> and <code>slug</code> values in the endpoint. <p><pre><code>contentClass/home/slug/home\ncontentClass/watchlist/slug/watchlist\ncontentClass/contentType/slug/movies\ncontentClass/contentType/slug/series\ncontentClass/character/slug/black-widow\ncontentClass/editorial/slug/halloween\ncontentClass/brand/slug/disney\ncontentClass/brand/slug/marvel\ncontentClass/explore/slug/explore\n</code></pre> </p>"},{"location":"features/collections/overview/collection/#slug","title":"slug","text":"<p>Slugs represent vanity urls defined for a specific collection and can be used to identify that collection in some cases, through the <code>getCollection</code> endpoint. In that case, they are mapped into a CollectionIdentifier as a <code>Slug</code></p>"},{"location":"features/collections/overview/collection/#collectiongroupid","title":"collectionGroupId","text":"<p>Uniquely identifies the collection in order to retrieve it through the <code>getCollectionById</code> endpoint. It's mapped into a CollectionIdentifier as a <code>CollectionGroupId</code>.</p> <p>The <code>collectionGroupId</code> is used for nested collections which are commonly used for sports content (leagues, teams, competitions and so on). For a complete overview on the access path via the <code>getCollectionById</code> endpoint, see the FEDSA nested collection documentation.</p> <p>The response does contain a <code>collectionGroupId</code> of the parent collection and does an additional request to resolve the parent collection if needed.</p> Endpoint example <p>The endpoint looks like this: <code>/svc/content/Collection/StandardCollection/version/5.1/region/*/audience/*/maturity/*/language/*/collectionGroupId/$COLLECTION_GROUP_ID</code> where the <code>$COLLECTION_GROUP_ID</code> placeholder will be replaced by the unique collectionGroupId value.</p> Some examples to illustrate the usage of <code>collectionGroupId</code> values when loading the <code>soccer</code> collection with the <code>ligue 1</code> child collection selected. <pre><code>collectionGroupId/7df2c5de-8dcf-4f59-9eeb-c63c1107abcc // Soccer collection\ncollectionGroupId/3469921c-8baf-4b18-ab12-e26a238ab583 // Ligue-1 collection\n</code></pre> <p></p>"},{"location":"features/collections/overview/collection/#collectionid-key","title":"collectionId &amp; key","text":"<p>Unique collection identifier &amp; key which are used for analytics purposes.</p>"},{"location":"features/collections/overview/collections/","title":"Collections","text":"<p>Collections is a big feature within Dominguez, as most of the screens that display a list of elements, are modelled as a Collection. This includes pages such as Partner pages (Star, Disney, Star Wars...), the Search screen, the Home screens, or the List of Avatars.</p> <p>A specific terminology was devised from the Content perspective to refer to the different parts that comprise the concept of a Collection.</p> Terminology <p> </p>"},{"location":"features/collections/overview/container/","title":"Container","text":"<p>The presentation layer of a set defining how it is displayed on client devices, a Container wraps the set object with additional info that indicates how to render that object in the screen.</p> Container response model <pre><code>{\n    \"set\": {\n        ...\n    },\n    \"type\": \"HeroContainer\",\n    \"style\": \"hero\"\n}\n</code></pre> Type and Style <p>Containers mainly have a <code>type</code> (which can be a <code>grid</code>, a <code>hero</code>, a <code>full_bleed</code> or a <code>shelf</code>); and a <code>style</code>, which determines the differences in how to render a particular type. More information about the container <code>style</code> could be found in this documentation.</p> <p>Thus, while type defines the structural nature of the container (for instance, whether to present a grid or a linear collection or shelf, style merely defines a name that will be used to determine how to render that container in terms of cosmetics.</p>"},{"location":"features/collections/overview/set/","title":"Set","text":"<p>A Set is each of the lists within a Collection. They are held by a Container, and encapsulate a group of individual Assets (Series, Seasons, Videos...) or links to other collections (ContentAssets). There are two types of Sets, ContentSet and ReferenceSet.</p>"},{"location":"features/collections/overview/set/#contentset","title":"ContentSet","text":"<p>Content sets return the list of assets directly within the <code>items</code> key.</p> ContentSet response model <pre><code>{\n\"set\": {\n    \"items\": [],\n    \"meta\": {\n    \"hits\": 5,\n    \"offset\": 0,\n    \"page_size\": 15\n    },\n    \"setId\": \"e5f44966-12f4-4047-92e8-a2edb09cf5c3\",\n    \"text\": {\n    \"title\": {\n        \"full\": {\n        \"set\": {\n            \"default\": {\n            \"content\": \"Brands\",\n            \"language\": \"en-GB\",\n            \"sourceEntity\": \"set\"\n            }\n        }\n        }\n    }\n    },\n    \"type\": \"CuratedSet\"\n},\n\"type\": \"GridContainer\",\n\"style\": \"brand\"\n}\n</code></pre>"},{"location":"features/collections/overview/set/#referenceset","title":"ReferenceSet","text":"<p>Reference sets are returned as a skeleton for a set, they have a type of <code>SetRef</code> and contain a <code>refId</code> that can then be used to retrieve the actual list of assets. They, thus, eventually resolve into a ContentSet.</p> ReferenceSet response model <pre><code>{\n\"set\": {\n    \"refId\": \"4fab9f98-416e-4d79-b8e8-2752f9eac1a3\",\n    \"refIdType\": \"setId\",\n    \"refType\": \"CuratedSet\",\n    \"type\": \"SetRef\",\n    \"text\": {\n    \"title\": {\n        \"full\": {\n        \"set\": {\n            \"default\": {\n            \"content\": \"Movies\",\n            \"language\": \"en\",\n            \"sourceEntity\": \"set\"\n            }\n        }\n        }\n    }\n    }\n},\n\"type\": \"ShelfContainer\",\n\"style\": \"editorialPanelLarge\",\n}\n</code></pre> <p>Understanding the way the ReferenceSets are resolved in the app is not immediate. It is done through the CollectionViewModel which implements the interface ShelfBindListener, which gets passed into the Container holding the RecyclerView that would contain the tiles. Upon binding, the actual request is performed, as seen in CollectionViewModel.</p> onShelfItemBound <pre><code>override fun onShelfItemBound(list: PagedList&lt;Asset&gt;) {\n    if (list is ReferenceSet) {\n        state.firstOrError()\n            .map { it.collection?.containersBySetId?.get(list.setId) }\n            .flatMap { contentSetRepository.contentSetOnce(it) }\n            .onErrorReturn { list.toEmptyContentSet() }\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .autoDisposable(viewModelScope)\n            .subscribe(this::onSetLoaded, { Timber.e(it) })\n    }\n}\n</code></pre>"},{"location":"features/containers/container_style/","title":"Container Style","text":"<p>The container styles could be divided into 2 categories:</p> <ul> <li> <p>FEDSA Container Styles</p> </li> <li> <p>Local Container Styles</p> </li> </ul>"},{"location":"features/containers/container_style/#fedsa-container-styles","title":"FEDSA Container Styles","text":"<p>This category represents the container styles that are being returned from the Content API. These container styles are a 1-on-1 mapping with the values listed in the the FEDSA Documentation.</p>"},{"location":"features/containers/container_style/#local-container-styles","title":"Local Container Styles","text":"<p>This category represents the container styles that are hardcoded locally.</p> <p>Each style in this category has been added to allow having a style configuration for a page that isn't built based on a collection.</p> <p>Example</p> <p>Each tab on the detail page has its own hardcoded container style to support different UI per tab.</p>"},{"location":"features/containers/fedsa_container_styles/","title":"FEDSA Container Styles","text":"<p>Here is an overview of the available FEDSA container styles. Most of the container styles are using the default ItemViewType. When a different ItemViewType is used, it is mentioned explicitly per container style.</p> containerStyle Available in D+ Available in S+ Comments <code>brand</code> X <code>brandSix</code> X <code>character</code> X X <code>collectionLogos</code> X <code>contentType</code> X Mobile / Tablet only <code>continueWatching</code> X <code>ContinueWatchingSet</code> X <code>default</code> X X <code>editorial</code> X X <code>editorialPanel</code> X X <code>editorialPanelLarge</code> X X <code>episode</code> X X <code>featured</code> X Appears on kids profiles only. <code>hero</code> X <code>heroInline</code> X X <code>heroInlineGE</code> X X <code>heroInlineSlim</code> X X <code>heroInteractive</code> X <code>heroSingle</code> X <code>poster</code> X X <code>results</code> X X <code>star</code> X <code>WatchlistSet</code> X X"},{"location":"features/containers/fedsa_container_styles/#brand","title":"brand","text":"<p>The <code>brand</code> style represents the different brand tiles. This row could be found as second row beneath the hero container on the D+ home screen only. It does contain the 5 different brand tiles. It uses the brand ItemViewType.</p> Demo brand <p></p>"},{"location":"features/containers/fedsa_container_styles/#brandsix","title":"brandSix","text":"<p>The <code>brandSix</code> style represents the different brand tiles. This is basically the same as the <code>brand</code> style, but it has the <code>Star</code> brand in addition. It does contain the 6 different brand tiles. It uses the brand ItemViewType.</p> <p>Note</p> <p>This style will only be visible for Welch supported countries.</p> Demo brand <p></p>"},{"location":"features/containers/fedsa_container_styles/#character","title":"character","text":"<p>The <code>character</code> style is used on the avatar selection screen in the profile setting screen. It uses the character ItemViewType.</p> Demo character <p></p>"},{"location":"features/containers/fedsa_container_styles/#collectionlogos","title":"collectionLogos","text":"<p>The <code>collectionLogos</code> style is used to show any sport, league or team collection tile. Since this is related to sport content only, the container style is available in Star+ only. There are some examples on the <code>home</code> and <code>espn</code> collection. It uses the sportsCategory ItemViewType.</p> Demo collectionLogos <p></p>"},{"location":"features/containers/fedsa_container_styles/#contenttype","title":"contentType","text":"<p>The <code>contentType</code> style is used to show the different categories (<code>Originals</code>, <code>Movies</code> and <code>Series</code>) on the explore collection in Disney+. It's being presented on mobile and tablet devices only. It uses the category ItemViewType.</p> Demo contentType <p></p>"},{"location":"features/containers/fedsa_container_styles/#continuewatching","title":"continueWatching","text":"<p>The <code>continueWatching</code> style represents the content with an active bookmark. This is used in Star+ only and could be found on the <code>home</code> collection. It uses the bookmarkV2 ItemViewType.  </p> Demo continueWatching <p></p>"},{"location":"features/containers/fedsa_container_styles/#continuewatchingset","title":"ContinueWatchingSet","text":"<p>The <code>ContinueWatchingSet</code> style represents the content with an active bookmark. This is the equivalent of <code>continueWatching</code> container style, but it is used in Disney+ only. It uses the bookmark ItemViewType.</p> Demo ContinueWatchingSet <p></p>"},{"location":"features/containers/fedsa_container_styles/#editorial","title":"editorial","text":"<p>The <code>editorial</code> style is used to display the content is the most basic way (same as the default style). This style could be found on most of the collection screens. It uses the default ItemViewType.</p> Demo editorial Mobile Television"},{"location":"features/containers/fedsa_container_styles/#editorialpanel","title":"editorialPanel","text":"<p>The <code>editorialPanel</code> style uses the editorialPanel. There are several examples on the <code>home</code> and <code>espn</code> collection in Star+.</p> <p>Note</p> <p>This container style is set up for Disney+ as well, but at the moment only showing in the heroInline container style on television devices.</p> Demo editorialPanel <p></p>"},{"location":"features/containers/fedsa_container_styles/#editorialpanellarge","title":"editorialPanelLarge","text":"<p>This is the same style as editorialPanel but with a little difference in the number of visible tiles per row.  </p>"},{"location":"features/containers/fedsa_container_styles/#episode","title":"episode","text":"<p>The <code>episode</code> style looks like the default style, but displays the item with different images. The <code>thumbnail</code> images are being presented instead. There are not so many places where this style is used, but there might be some examples in any of the nested collections of <code>The Simpsons</code> collection in Disney+. It uses the episode ItemViewType.</p> <p>Relevant deep links might be https://www.disneyplus.com/franchise/the-simpsons and https://www.disneyplus.com/franchise/the-simpsons-sports.</p> Demo episode Mobile Television"},{"location":"features/containers/fedsa_container_styles/#featured","title":"featured","text":"<p>The <code>featured</code> style represents the different featured tiles. This row could be found as second row beneath the hero container on the Disney+ home screen on a kids profile only. It uses the featured ItemViewType.</p> Demo featured <p></p>"},{"location":"features/containers/fedsa_container_styles/#hero-container-style","title":"hero container style","text":"<p>For the <code>hero</code> container style, there are 2 different possible <code>containerType</code>s available. The <code>containerType</code> defines what kind of hero view the user will see. There is a <code>hero</code> and <code>hero_full_bleed</code> container type. Both hero container types are limited to the first row of the <code>home</code> collection of Disney+ only.</p>"},{"location":"features/containers/fedsa_container_styles/#hero","title":"hero","text":"<p>This is the default containerType used for the <code>hero</code> style. It will display a container with just one completely visible tile and a small portion of the previous / next tile on each side. Since this is a infinite loop, the user might scroll in both directions through the content. It uses a 1.78 aspect ratio for mobile and 3.91 for tablet / television devices. The asset item implementation with this style could be found in the HeroViewPagerItem.</p> Demo hero <p></p>"},{"location":"features/containers/fedsa_container_styles/#hero_full_bleed","title":"hero_full_bleed","text":"<p>This is the additional containerType used by D+ television devices only. It displays the hero content in a more immersive way where the user is able to navigate through the items in a horizontal direction. Note that, compared to the <code>hero</code> implementation, there is no glimpse of the previous / next item. The asset item implementation with this style could be found in the FullBleedItem.</p> Demo hero_full_bleed <p></p>"},{"location":"features/containers/fedsa_container_styles/#heroinline","title":"heroInline","text":"<p>The <code>heroInline</code> container could be found on the <code>home</code> and <code>espn</code> collection. It uses the heroInline ItemViewType.</p> Demo heroInline <p></p>"},{"location":"features/containers/fedsa_container_styles/#heroinlinege","title":"heroInlineGE","text":"<p>The <code>heroInlineGE</code> container could be found on the <code>home</code>, <code>espn</code>, <code>movies</code> (Star+ only), <code>series</code> (Star+ only), <code>character</code>, <code>editorial</code>,  <code>franchise</code>, <code>sport</code>, <code>league</code>, <code>marqueeEvent</code> collections. It uses the heroInlineGE ItemViewType.</p> Demo heroInline <p></p>"},{"location":"features/containers/fedsa_container_styles/#heroinlineslim","title":"heroInlineSlim","text":"<p>The <code>heroInlineSlim</code> container could be found on the <code>home</code>, <code>espn</code>, <code>movies</code>, <code>series</code>, <code>character</code>, <code>editorial</code>,  <code>franchise</code>, <code>sport</code>, <code>league</code>, <code>marqueeEvent</code> collections. It uses the heroInlineSlim ItemViewType.</p> Demo heroInline <p></p>"},{"location":"features/containers/fedsa_container_styles/#herointeractive","title":"heroInteractive","text":"<p>The <code>heroInteractive</code> container could be found on the <code>home</code> and <code>espn</code> collection in Star+ only. It uses the heroInteractive ItemViewType.</p> Demo heroInteractive <p></p>"},{"location":"features/containers/fedsa_container_styles/#herosingle","title":"heroSingle","text":"<p>The <code>heroSingle</code> container could be found on the <code>home</code> and <code>espn</code> collection in Star+ only. It uses the heroSingle ItemViewType.</p> Demo heroSingle <p></p>"},{"location":"features/containers/fedsa_container_styles/#poster","title":"poster","text":"<p>The <code>poster</code> style is used to display a basic tile just as the editorial style does. Compared to the <code>editorial</code> style, this style uses the 0.71 aspect ratio on all devices. It uses the default ItemViewType.</p> Demo poster <p></p>"},{"location":"features/containers/fedsa_container_styles/#results","title":"results","text":"<p>It uses the default ItemViewType on Disney+ and the editorialPanel ItemViewType on Star+.</p> Demo results <p></p>"},{"location":"features/containers/fedsa_container_styles/#star","title":"star","text":"<p>The <code>star</code> style is used on Disney+ onboarding page for a Star enabled country (NL for example). You can test it by resetting the star onboarding flow of your Disney+ account override account tool <code>More options - Reset Star Onboarding</code></p> Demo star <p></p>"},{"location":"features/containers/fedsa_container_styles/#watchlistset","title":"WatchlistSet","text":"<p>The <code>WatchlistSet</code> is used to display a container with items that are on your watchlist. There is a <code>WatchlistSet</code> on the <code>home</code> collection on Disney+ with a Australian location override on QA environment only. Make sure there are some assets in your watchlist. It uses the default ItemViewType.</p> Demo WatchlistSet <p></p>"},{"location":"features/containers/item_view_type/","title":"ItemViewType","text":"<p>Let's start with an overview of all the possible ItemViewType's.</p> <ul> <li>ItemViewType used for the Titles Contents</li> <li>ItemViewType used for the Hero Contents</li> <li>ItemViewType used for Brand, Categories and Others.</li> </ul>"},{"location":"features/containers/item_view_type_content/","title":"ItemViewType used for display Titles Content","text":""},{"location":"features/containers/item_view_type_content/#itemviewtypebookmark","title":"ItemViewType.bookmark","text":"<p>For each asset with <code>bookmark</code> as <code>ItemViewType</code>, an ContinueWatchingItem will be created.</p> Demo bookmark Mobile Television"},{"location":"features/containers/item_view_type_content/#itemviewtypebookmarkv2","title":"ItemViewType.bookmarkV2","text":"<p>For each asset with <code>bookmarkV2</code> as <code>ItemViewType</code>, an ContinueWatchingItem will be created.</p> Demo bookmarkV2 Mobile Television"},{"location":"features/containers/item_view_type_content/#itemviewtypedefault","title":"ItemViewType.default","text":"<p>The <code>default</code> ItemViewType is more or less the most used type in both the Disney+ and Star+ apps. It displays a basic tile with an image only. It uses the 0.71 ratio for mobile and 1.78 ratio for tablet / television devices. The implementation of this ItemViewType could be found in the ShelfListItem with the <code>shelf_list_item</code> layout.</p> Demo default <p></p>"},{"location":"features/containers/item_view_type_content/#itemviewtypeeditorialpanel","title":"ItemViewType.editorialPanel","text":"<p>The <code>editorialPanel</code> ItemViewType is used to display any sport related content, but also movies / series could be displayed. It shows a metadata block below the image. The implementation of this ItemViewType could be found in the PanelItem.</p> Demo editorialPanel <p></p>"},{"location":"features/containers/item_view_type_content/#itemviewtypeepisode","title":"ItemViewType.episode","text":"<p>The <code>episode</code> ItemViewType is used to display episode content. Compared to the default ItemViewType, the episodic <code>thumbnail</code> images will be displayed. It also displays some additional episode title and other metadata. The implementation of this ItemViewType could be found in the ShelfListItem with the <code>shelf_list_item_episode</code> layout.</p> Demo episode Mobile Television"},{"location":"features/containers/item_view_type_content/#itemviewtypefeatured","title":"ItemViewType.featured","text":"<p>The <code>featured</code> ItemViewType does look like the default ItemViewType, but it has a bigger rounded corner radius. The implementation of this ItemViewType could be found in the ShelfListItem with the <code>featured_shelf_list_item</code> layout.</p> Demo featured <p></p>"},{"location":"features/containers/item_view_type_hero/","title":"Hero ItemViewType","text":""},{"location":"features/containers/item_view_type_hero/#itemviewtypeheroinline","title":"ItemViewType.heroInline","text":"<p>The <code>heroInline</code> ItemViewType represents a collection in an immersive way. There is a huge difference between the mobile and television implementation of the <code>heroInline</code> ItemViewType. The implementation of this ItemViewType could be found in the HeroInlineItem.  </p> <p>On mobile and tablet, it will just display the collection as one big clickable tile that takes you to the collection landing page. On television, a immersive collection image is visible with a scrollable shelf to present asset items with the EditorialPanel ItemViewType.</p> Demo heroInline Mobile Television"},{"location":"features/containers/item_view_type_hero/#itemviewtypeheroinlineslim","title":"ItemViewType.heroInlineSlim","text":"<p>The <code>heroInlineSlim</code> ItemViewType represents a collection in an immersive way. There is a huge difference between the mobile and television implementation of the <code>heroInlineSlim</code> ItemViewType. The implementation of this ItemViewType could be found in the HeroInlineItem.</p> <p>On mobile and tablet, it will just display the collection as one big clickable tile that takes you to the collection landing page. On television, a immersive collection image is visible with a scrollable shelf to present asset items with the EditorialPanel ItemViewType.</p> Demo heroInlineSlim Mobile Tablet Television"},{"location":"features/containers/item_view_type_hero/#itemviewtypeheroinlinege","title":"ItemViewType.heroInlineGE","text":"<p>The <code>heroInlineGE</code> ItemViewType represents a collection in an immersive way. There is a huge difference between the mobile and television implementation of the <code>heroInlineGE</code> ItemViewType. The implementation of this ItemViewType could be found in the HeroInlineItem.</p> <p>On mobile and tablet, it will just display the collection as one big clickable tile that takes you to the collection landing page. On television, a immersive collection image is visible with a scrollable shelf to present asset items with the EditorialPanel ItemViewType.</p> Demo heroInlineSlim Mobile Tablet Television"},{"location":"features/containers/item_view_type_hero/#itemviewtypeherointeractive","title":"ItemViewType.heroInteractive","text":"<p>The <code>heroInteractive</code> ItemViewType represents an immersive view type for showing content in a hero container. There is a huge difference between the mobile and television implementation of the <code>heroInteractive</code> style.</p> <p>For mobile / tablet devices, the default <code>HeroViewPagerItem</code> will be used as described in hero subject. In addition to the 1.78 &amp; 3.91 aspect ratio, 0.8 might be used as well.</p> <p>For television devices, there is 3.0 aspect ratio media block and shelf beneath with max 5 content tiles. Whenever one of the tiles gets focused, the logo and background image in the media block will be replaced by the selected asset images.</p> <p>The asset item implementation with this style for television devices could be found in the HeroInteractiveItem.</p>"},{"location":"features/containers/item_view_type_hero/#background-video-support","title":"Background video support","text":"<p>The <code>heroInteractive</code> implementation on television is one of the places where we have support for background videos. After focussing an asset that contains some <code>VideoArt</code>, it will replace the images first and then play the <code>VideoArt</code> in the media block.</p> <p>Note that there are a few conditions to have background video support, see BackgroundVideoSupport for more details.</p> Demo heroInteractive Mobile Television"},{"location":"features/containers/item_view_type_hero/#itemviewtypeherosingle","title":"ItemViewType.heroSingle","text":"<p>The <code>heroSingle</code> ItemViewType represents an immersive view type for showing a single item in a hero container. Same as the <code>heroInteractive</code> style, there is a difference between the mobile and television implementation.</p> <p>For mobile / tablet devices, the default <code>HeroViewPagerItem</code> will be used as described in hero subject. In addition to the 1.78 &amp; 3.91 aspect ratio, 0.8 might be used as well. Since this is limited to a single asset, it might not look like the default hero container as the user will not be able to scroll through.</p> <p>For television devices, there is 3.0 aspect ratio media block with a background, logo, some metadata and a button. The asset item implementation with this style for television devices could be found in the HeroSingleItem.</p> <p>Compared to <code>heroInteractive</code>, the <code>heroSingle</code> ItemViewType doesn't have background video support.</p> Demo heroSingle Mobile Television"},{"location":"features/containers/item_view_type_others/","title":"Others ItemViewType","text":""},{"location":"features/containers/item_view_type_others/#itemviewtypebrand","title":"ItemViewType.brand","text":"<p>The <code>brand</code> ItemViewType is used for the brand tiles on the Disney+ <code>home</code> collection. In general, it might look like the default ItemViewType.</p> <p>On television devices, whenever the user focuses a brand tile, the tile background will be replaced by the playback of its brand <code>VideoArt</code>.</p> <p>The implementation of this ItemViewType could be found in the ShelfListItem with either the <code>animated_brand_shelf_list_item</code> or <code>brand_shelf_list_item</code> layout.</p> Demo brand <p></p>"},{"location":"features/containers/item_view_type_others/#itemviewtypecategory","title":"ItemViewType.category","text":"<p>The <code>category</code> ItemViewType is used to show the collection tiles with a different content type, like <code>Originals</code>, <code>Movies</code> and <code>Series</code>. It does contain a small icon and a simple title below.</p> <p>The implementation of this ItemViewType could be found in the ShelfCategoryItem.</p> Demo category <p></p>"},{"location":"features/containers/item_view_type_others/#itemviewtypecharacter","title":"ItemViewType.character","text":"<p>The <code>character</code> ItemViewType is used to show the different avatar icons in a circular view.</p> <p>The implementation of this ItemViewType could be found in the ShelfListItem with the <code>shelf_list_item_avatar</code> layout.</p> Demo character <p></p>"},{"location":"features/containers/item_view_type_others/#itemviewtypesportscategory","title":"ItemViewType.sportsCategory","text":"<p>The <code>sportsCategory</code> ItemViewType is used to display any sport, league or team collection tile. It displays a circular view with a logo.</p> <p>On television, the asset title will be visible once the user moves focus to the tile.</p> <p>The implementation of this ItemViewType could be found in the ShelfListItem with the <code>shelf_list_item_sports_category</code> layout.</p> Demo sportsCategory Mobile Television"},{"location":"features/containers/local_container_styles/","title":"Local Container Styles","text":""},{"location":"features/containers/local_container_styles/#categories","title":"categories","text":"<p>The <code>categories</code> style is used by the search feature on Star+. It represents the category buttons on top of the search results list. The implementation of this style could be found in SearchCategoriesItem.</p> Demo categories <p></p>"},{"location":"features/containers/local_container_styles/#default","title":"default","text":"<p>This is the default containerStyle. If a container style has not been specified in one of the <code>collections_config.json</code> files, it will fallback to the <code>default</code> container style.</p> Demo default Mobile Television"},{"location":"features/containers/local_container_styles/#episodes","title":"episodes","text":"<p>The <code>episodes</code> style is used for the <code>Episodes</code> tab on the content detail page on mobile and tablet.</p> Demo episodes <p></p>"},{"location":"features/containers/local_container_styles/#extras","title":"extras","text":"<p>The <code>extras</code> style is used for the <code>Extra</code> tab on the content detail page on mobile and tablet.</p> Demo extras <p></p>"},{"location":"features/containers/local_container_styles/#extrasv2","title":"extrasV2","text":"<p>The <code>extrasV2</code> style is used for the <code>Extra</code> tab on the content detail page on television.</p> Demo extrasV2 <p></p>"},{"location":"features/containers/local_container_styles/#related","title":"related","text":"<p>The <code>related</code> style is used for the <code>Suggested</code> tab on the content detail page.  </p> Demo related Mobile Television"},{"location":"features/containers/local_container_styles/#seasonsv2","title":"seasonsV2","text":"<p>The <code>seasonsV2</code> style is used for the <code>Episodes</code> tab on the content detail page on television.</p> Demo seasonsV2 <p></p>"},{"location":"features/containers/local_container_styles/#versions","title":"versions","text":"<p>The <code>versions</code> style is used for IMAX content where it represents the different versions in a tab. See the IMAX Documentation for exact steps to find the <code>Versions</code> tab.</p> Demo versions <p></p>"},{"location":"features/containers/local_container_styles/#star-maturityrating-collection","title":"star (MaturityRating collection)","text":"<p>The <code>star</code> style is used in the maturity rating onboarding flow for Welch supported countries. It represents the asset carousel in the background. Therefore, the <code>maturityRating</code> collection has been added with the <code>star</code> style.</p> Demo star <p></p>"},{"location":"features/containers/overview/","title":"Overview","text":"<p>If you're working on any collection related feature, you might have heard about the commonly used <code>containerStyle</code> and <code>ItemViewType</code> terms.</p> <p>These terms might cause some confusion because they are somewhat related to each other. This documentation is used to provide some clarity on the difference and to provide an overview of all the possibilities.</p>"},{"location":"features/containers/overview/#relation-between-container-style-and-itemviewtype","title":"Relation between Container Style and ItemViewType","text":"<p>The <code>containerStyle</code> is a key used to determine in what style the container should render.</p> <p>These style definitions are defined in one of the <code>collections_config.json</code>, <code>collections_config_star.json</code>, <code>collections_config_disney.json</code> files. In each style definition, it is possible to define a different <code>itemViewType</code>.</p> <p>The <code>itemViewType</code> value is used to determine how a tile should render within the container. In other words, the <code>containerStyle</code> value is linked to container-level and <code>itemViewType</code> is linked to item-level.</p> <p>Info</p> <p>By separating the <code>containerStyle</code> and <code>itemViewType</code> values, it gives us the opportunity to easily switch between the way each tile gets rendered.</p> <p>Example</p> <p>The <code>editorialPanel</code> and <code>editorialPanelLarge</code> container style are both referencing the <code>editorialPanel</code> ItemViewType. In this example, the style definition is used to define a different tile count per container, while the tile should render the same for both container styles.</p>"},{"location":"features/ctv/","title":"CTV Activation","text":"<p>CTV activation allows users to login to a TV device using a mobile device on the same network.</p>"},{"location":"features/ctv/#feature-info","title":"Feature Info","text":"<ul> <li>Mahmoud has given a great presentation on what this feature is and how it works. You can check out the slides or a recording.</li> <li>To communicate between mobile and TV, we use the Companion library.</li> <li>We use the same app ID for both D+ and S+. This means users can do CTV activation across products: using a S+ mobile to authenticate a D+ TV and vice versa.</li> <li>There are two different implementations of the feature.</li> </ul>"},{"location":"features/ctv/#v1","title":"V1","text":"<p>The V1 and initial implementation uses credentials stored in Google Smart Lock.</p> <ul> <li>Sequence diagrams.</li> </ul>"},{"location":"features/ctv/#v2","title":"V2","text":"<p>The V2 implementation works with any account logged in on the mobile device, regardless of whether Smart Lock is enabled or what password manager is used.</p> <ul> <li>Sequence diagrams.</li> <li>Technical doc</li> </ul>"},{"location":"features/ctv/#availability","title":"Availability","text":"Availability  Disney+  Star+  Mobile  TV  Regions  All regions"},{"location":"features/ctv/#how-to-test","title":"How to test","text":""},{"location":"features/ctv/#v1_1","title":"V1","text":"<ul> <li>Use a physical TV device and a physical mobile device that are on the same network.</li> <li>Google Password Manager needs to be enabled on your mobile device.</li> <li>Make sure you have credentials stored in Google Password Manager for the app you're testing. You can check this on passwords.google.com. If you don't have credentials stored, login to the app with Google. Make sure \"Offer so save passwords\" is enabled in the Google Password Manager settings.</li> <li>Make sure both devices point to the same environment in Jarvis</li> <li>Disable CTV activation V2. Replace  in the following ADB command with either <code>com.disney.disneyplus</code> or <code>com.disney.starplus</code> and run it. <code>adb shell am broadcast -n com.disney.disneyplus.jarvis/.AdbInteractionBroadcastReceiver -a com.disney.disneyplus.jarvis.SET_ACTIVE_CONFIG --es encodedJson WwogIHsKICAgICJuYW1lIjogIkNUViBBY3RpdmF0aW9uIHYyIiwKICAgICJ1bmlxdWVLZXkiOiAiY3R2X2FjdGl2YXRpb25fdjIiLAogICAgInRyYW5zZm9ybU1hcCI6IHsKICAgICAgImN0dkFjdGl2YXRpb24iOiB7CiAgICAgICAgInYyRW5hYmxlZCI6IGZhbHNlCiAgICAgIH0KICAgIH0KICB9Cl0K --es &lt;TARGET_PACKAGE&gt;</code> <li>Be logged out on TV</li> <li>Be logged in on Mobile</li> <li>Start TV app</li> <li>Start Mobile app</li> <li>A dialog to login on TV should appear on mobile</li>"},{"location":"features/ctv/#v2_1","title":"V2","text":"<ul> <li>Use a physical TV device and a physical mobile device that are on the same network.</li> <li>Make sure both devices point to the same environment in Jarvis</li> <li>Be logged out on TV</li> <li>Be logged in on Mobile</li> <li>Start TV app</li> <li>Start Mobile app</li> <li>A dialog to login on TV should appear on mobile</li> </ul>"},{"location":"features/ctv/#relevant-classes","title":"Relevant classes","text":"<p>All relevant code is located in the <code>ctvActivation</code> module.</p>"},{"location":"features/deep-linking/","title":"Deep Linking in Dominguez","text":"<p>Doc to reference supported deep links (URLs tab)</p>"},{"location":"features/deep-linking/#how-to-add-support-for-a-deep-link","title":"How to add support for a deep link","text":""},{"location":"features/deep-linking/#deep-link-which-requires-auth","title":"Deep link which requires auth","text":""},{"location":"features/deep-linking/#step-1-handle-the-deep-link","title":"Step 1 - Handle the deep link","text":"<p>The first step for handling deep links is getting it from the Intent. This happens in MainActivity and can either come from the intent in onCreate (only when saved instance state is not null) or when onNewIntent is called. MainActivity will populate DeepLinkViewModel which will parse the deep link into and OkHttpUrl. If the app is already active and logged in this will emit it through a subject to the right place. See Handle deep link while created.</p>"},{"location":"features/deep-linking/#step-2-ensure-the-right-main-tab-is-selected","title":"Step 2 - Ensure the right main tab is selected","text":"<p>Step two is to decide what the top level tab will be for the deep link. This influences both the selected tab at the bottom, and if the deep linked screen has back navigation to what page it should go back. To determine this you need to make sure that the right menu id is returned in GlobalNavDeepLinkMapper for your deep link.</p>"},{"location":"features/deep-linking/#step-3-final-handling-of-the-deep-link","title":"Step 3 - Final handling of the deep link","text":"<p>At this point a TabFragment is the lowest level at which a deep link can be handled. It gives the opportunity to start a single screen over the root screen but then consumes the deeplink so any information that is still required in that other screen should be passed to it in a bundle format.</p>"},{"location":"features/deep-linking/#nothing-extra-needed","title":"Nothing extra needed","text":"<p>If the root fragment is where you need to be, you need to inject DeepLinkViewModel, verify that the link points to where you are now and then mark it complete. by calling <code>deepLinkViewModel.clearDeepLink()</code>.</p>"},{"location":"features/deep-linking/#right-fragment-extra-parsing-needed","title":"Right fragment, extra parsing needed","text":"<p>Example for this case is search. If step 2 is done correctly you are now at the search fragment, but a search deep link can also contain a query parameter <code>q=marvel</code>. In this case you can read that from the deep link and then mark it handled.</p>"},{"location":"features/deep-linking/#deep-link-into-a-deeper-level-fragmentactivity","title":"Deep link into a deeper level fragment/activity","text":"<p>Note, this currently only works for fragments that have their binding module included in the TabFragmentBindingModule.FragmentModule.</p> <p>If you need to deep link into another fragment than the root, you can implement a DeepLinkHandler for that feature which should implement and use dagger multi-binding to integrate. The DeepLinkHandler can implement <code>createDeepLinkedFragment(HttpUrl)</code> and <code>createDeepLinkedActivity(HttpUrl)</code> to handle the creation of the next screen.</p> <p>At this point this <code>DeepLinkHandler</code> should completely handle the deep link. and if you would need to go into an even deeper level, that fragment should be stared from the child fragment, which should be indicated using arguments in the created fragment.</p>"},{"location":"features/deep-linking/#handle-deep-link-while-created","title":"Handle deep link while created","text":"<p>Once started, the MobileGlobalNavViewModel will observe any new deep links coming in through [onNewIntent]. This will then replace the current <code>TabFragment</code> with a new one that get's created with the correct deep link handling. This satisfies the requirement that deep links should clear the current back stack.</p>"},{"location":"features/deep-linking/#why-the-multi-bindings-approach","title":"Why the multi-bindings approach","text":"<p>The multi binds approach is used here to be able to delegate the deep link handling to specific features and not have one deep link god-class which knows about all fragments that allow to be deep linked into.</p>"},{"location":"features/deep-linking/#deep-link-which-does-not-require-auth","title":"Deep link which does not require auth","text":"<ul> <li>TBD</li> </ul>"},{"location":"features/deep-linking/#deep-links-in-logcat","title":"Deep links in logcat","text":"<ul> <li>There is a new initiative to display the deep link URL in the logcat for screens accessible through deep link.</li> <li>This is done in order to help create better testing notes for PRs and Jira tickets.</li> <li>Don't hesitate to add such a log on the screen you're working on when you implement a new deep link.</li> <li>For now, content detail and collection screens are supported. Opening such a screen will trigger a debug logcat message looking like:</li> </ul> <pre><code>[\u2026] D/Deeplink: adb shell am start -a android.intent.action.VIEW -d https://www.starplus.com/movies/kingsman-the-secret-service/KU1ZHosjEuhK/related\n</code></pre> <p>Enable these messages on your build with the following command:</p> <pre><code>adb shell setprop log.tag.DmgzDeeplink DEBUG\n</code></pre> <ul> <li>For more information, see CollectionDeeplinkLogger, DetailDeeplinkLogger and DeeplinkLog.</li> </ul>"},{"location":"features/deep-linking/#appasset-links","title":"App/Asset Links","text":"<p>When opening a deeplink to one of the applications, it is important that the mapping has been set up to identify the application as the owner of a specific link. This was introduced in Android 6.0 Marshmallow and is known as App Links. To find out more, please read the Asset Link documentation.</p>"},{"location":"features/deep-linking/#quick-reference","title":"Quick Reference","text":"<ul> <li>Quick reference to a list of valid deep links in case someone needs to grab one</li> <li>TODO - Put these into a markdown table with values Mobile? TV? Star+? etc.<ul> <li>Reminder until then:<ul> <li>Certain content is not available in all regions</li> <li>Downloads is not available on TV</li> <li>Star is not available in all countries</li> </ul> </li> </ul> </li> </ul>"},{"location":"features/deep-linking/#home-tabs","title":"Home Tabs","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/home\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/search\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/downloads\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/account\n</code></pre>"},{"location":"features/deep-linking/#search","title":"Search","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/movies\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/originals\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/character/hawkeye\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/editorial/female-leads\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/franchise/marvel-the-infinity-saga\n</code></pre>"},{"location":"features/deep-linking/#legal","title":"Legal","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/legal\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/legal/privacy-policy\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/legal/terms-of-use\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/legal/eu-privacy-rights\n</code></pre>"},{"location":"features/deep-linking/#series-detail-pages","title":"Series Detail Pages","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series/the-book-of-boba-fett/57TL7zLNu2wf/episodes\\?addToWatchlist\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series/the-book-of-boba-fett/57TL7zLNu2wf/episodes\\?download\\=true\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series/the-book-of-boba-fett/57TL7zLNu2wf/extras\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series/agents-of-shield/2UT4VQrwpVgi/episodes\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series/agents-of-shield/2UT4VQrwpVgi/details\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series/agents-of-shield/2UT4VQrwpVgi/related\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/series/agents-of-shield/2UT4VQrwpVgi/season/4\n</code></pre>"},{"location":"features/deep-linking/#movie-detail-pages","title":"Movie Detail Pages","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/movies/star-wars-the-empire-strikes-back-episode-v/iqtDTZAewwYl\\?addToWatchlist\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/movies/star-wars-the-empire-strikes-back-episode-v/iqtDTZAewwYl\\?download\\=true\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/movies/star-wars-the-empire-strikes-back-episode-v/iqtDTZAewwYl/related\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/movies/star-wars-the-empire-strikes-back-episode-v/iqtDTZAewwYl/extras\n</code></pre>"},{"location":"features/deep-linking/#playback","title":"Playback","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/video/3de87281-eae4-4e5a-924b-f1888e4c4814\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/video/90ff6e09-afd3-4d46-a2cb-80e3767e67ea\n</code></pre>"},{"location":"features/deep-linking/#brands","title":"Brands","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/brand/pixar\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/brand/disney\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/brand/marvel\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/brand/star-wars\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/brand/national-geographic\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/brand/star\n</code></pre>"},{"location":"features/deep-linking/#profiles","title":"Profiles","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/account/edit-profiles\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/account/add-profile\n</code></pre>"},{"location":"features/deep-linking/#account-app-settings","title":"Account / App Settings","text":"<pre><code>adb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/account/app-settings/download-quality\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/account/app-settings/cellular-data-usage\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/account/change-password\nadb shell am start -a android.intent.action.VIEW -d https://www.disneyplus.com/account/change-email\n</code></pre>"},{"location":"features/dictionaries/dictionaries-implementation-extras/","title":"Miscellaneous","text":"<p>Page collecting different secondary matters related to our dictionaries implementation.</p>"},{"location":"features/dictionaries/dictionaries-implementation-extras/#lint-checks","title":"Lint checks","text":"<p>To help migrating from the legacy implementation to this current implementation there are a few new lint checks for:</p> <ul> <li>XML usage of non \u201cts\u201d prefixed string resources</li> <li>getString usage. There are a few cases were getString should be used, for these cases we can add a SuppressWarning annotation in the method/class.</li> </ul> <p>These lint checks can be found in here</p> <p>Besides lint checks we also have a few Discouraged annotations to make sure developers use direct access as much as possible within the Dictionaries class instead of the Dictionary getString or Dictionaries getString methods.</p>"},{"location":"features/dictionaries/dictionaries-implementation-extras/#other-important-dictionary-matters","title":"Other important dictionary matters","text":""},{"location":"features/dictionaries/dictionaries-implementation-extras/#restrict-onboarding-language-rol","title":"Restrict Onboarding Language - ROL","text":"<p>Currently, our app handles two different languages at runtime:</p> <ul> <li>User language. This is the language we will use in the most cases of our app. It is the \"regular\" or \"common\" language.</li> <li>Restricted onboarding language. For some countries, due to legal aspects or translation limitations, we cannot use the User Languages when stating important or legal matters. That's where the ROL language comes in hand. For example: If your device is set to German, but you are in China, we do not have translations for our Chinese legal text in the German language to display</li> </ul> <p>The ROL language is used for all onboarding screens and legal text before the user is logged in. When a user is logged in, all screens except the following use the profile's chosen language:</p> <ul> <li>Paywall<ul> <li>Annual Upgrade</li> <li>Premier Access</li> </ul> </li> <li>Legal center</li> </ul> <p>In order to enforce ROL languages we have the <code>@RestrictedLanguage</code> qualifier. We will use this qualifier whenever injecting <code>Dictionaries</code>. The two different languages to use while downloading dictionaries are being observed, as previously mentioned, by the DictionaryRequestProvider.</p>"},{"location":"features/dictionaries/dictionaries-implementation-extras/#how-does-the-languages-preferences-work-in-insight","title":"How does the languages preferences work in insight?","text":"<ol> <li>We send up the language preferences the user has selected on their device to the globalization API via <code>\"preferredLanguages\"</code>.</li> <li>The globalization API will map the locale values (<code>\"preferredLanguages\"</code> sent) on their end. Here is an example mapping where they perform for Hong Kong / <code>zh-HK</code></li> <li>The globalization API will respond with a <code>\"uiLanguage\"</code> value. This is the onboarding / legal text ROL language. This <code>\"uiLanguage\"</code> value is based on:<ul> <li>The values and order of <code>\"preferredLanguages\"</code> sent</li> <li>The user's location (which is based on the IP address)</li> </ul> </li> <li>At this point, what it was explained for DictionaryRequestProvider would come in.</li> </ol> <p>All of this can be confusing, so here are a few examples:</p> <p>Considering the user is in Hong Kong (HK) and the ROL Rules for Hong Kong are:</p> <ul> <li>Subscriber Agreement Languages - zh-HK &amp; en-GB</li> <li>Fallback - English (en-GB)</li> </ul> Example 1 <ul> <li>User has their device languages in this order: Simplified Chinese, English (UK), German</li> <li>Onboarding language will be in Simplified Chinese since we send up <code>zh</code> to the globalization API, and they map that <code>zh</code> value to <code>zh-HK</code></li> </ul> Example 2 <ul> <li>User has their device languages in this order: German, Simplified Chinese, English (UK)</li> <li>We do not have our Chinese legal text translated in German (their preferred device language)</li> <li>Onboarding language will be in Simplified Chinese since we send up <code>zh</code> to the globalization API, and they map that <code>zh</code> value to <code>zh-HK</code></li> </ul> Example 3 <ul> <li>User has their device languages in this order: German, English (UK), Simplified Chinese</li> <li>We do not have our Chinese legal text translated in German (their preferred device language)</li> <li>Onboarding language will be in English (UK) since that has higher priority than Simplified Chinese</li> </ul>"},{"location":"features/dictionaries/dictionaries-implementation-extras/#tips","title":"Tips","text":"<ul> <li>Exact ROL configurations from services can be found here:<ul> <li>Disney+ Disney+ has environment specific overrides you can find in the parent folder</li> <li>Star+</li> </ul> </li> <li>Globalization API responses by version</li> <li>Original ticket (which includes huge table of ROL rules)</li> <li>Extra globalization docs</li> <li>You may need to use Jarvis to toggle on <code>Localization</code> -&gt; <code>Globalization API version 1.x.x</code> if you are not seeing the values you expect</li> <li>When you need to select a specific CJK language, it can be difficult to know which one is which. This google sheets mapping can help</li> </ul>"},{"location":"features/dictionaries/dictionaries-implementation/","title":"Dictionaries Implementation","text":""},{"location":"features/dictionaries/dictionaries-implementation/#introduction","title":"Introduction","text":"<p>This page will proceed to explain how our current dictionaries implementation works.</p> <p>There's two important and distinct parts for our dictionaries implementation details:</p> <ul> <li>Downloading dictionaries at runtime to use them. This means, on startup of the app, we will retrieve the latest pinned dictionaries remotely and download them.</li> <li>Accessing the previously downloaded dictionaries from anywhere in our codebase to assign correct values in our UI.</li> </ul> <p>After this two topics, this documentation focus on some extra important matters about our dictionaries implementation.</p>"},{"location":"features/dictionaries/dictionaries-implementation/#downloading-dictionaries-at-runtime","title":"Downloading dictionaries at runtime","text":"<p>In our app, on start up, we download dictionaries and leave them ready to be used. When they are downloaded, they are also cached. If the user has no internet connection but has cached dictionaries, these will be used. Contrary if the user has no internet connection and no cached dictionaries, an error will be shown.</p> <p>Downloading dictionaries starts when the app triggers a LoadConfigsAction. This action will, among others, load our dictionaries by calling the DictionariesProvider <code>intialize</code> method.</p> <p>From there on the following classes will be used to retrieve dictionaries (in order):</p>"},{"location":"features/dictionaries/dictionaries-implementation/#dictionarylanguagemerger","title":"DictionaryLanguageMerger","text":"<p>This class is in charge of loading dictionaries while avoiding duplicated dictionary requests whenever the user has the same language for both UI and legal (for more info on this please visit Restrict Onboarding Language (ROL)). All requests and their results will be kept in memory while the app is still alive. In order to do this it calls the DictionaryLoaderclass and uses the DictionaryRequestProvider class to retrieve the dictionary request to perform.</p> <p>It also implements interfaces relevant for:</p> <ul> <li>waiting until dictionaries are loaded</li> <li>checking if they are loaded in a certain moment in time.</li> <li>preloading dictionaries for a certain language. This can be called before doing a language profile switch to ensure that the dictionaries for it have been loaded correctly.</li> </ul>"},{"location":"features/dictionaries/dictionaries-implementation/#dictionaryrequestprovider","title":"DictionaryRequestProvider","text":"<p>Class in charge of exposing a stream and emitting new dictionary requests to load. This happens by listening to the SessionStateRepository and LocalizationRepository and expose a new dictionary Request whenever either the session state or the globalization config has changed. This stream will be observed by the DictionaryLanguageMerger to retrieve new dictionaries accordingly.</p>"},{"location":"features/dictionaries/dictionaries-implementation/#dictionaryloader","title":"DictionaryLoader","text":"<p>This is the class in charge of loading dictionaries according to a dictionary request. It will first load cached dictionaries and check if their versions are the same as the ones being requested. If that's the case, cached dictionaries will be returned, otherwise new dictionaries will be downloaded and returned. The dictionaries returned type is KeyValueDictionary. In order to perform the loading, it uses the DictionaryRepository</p>"},{"location":"features/dictionaries/dictionaries-implementation/#accessing-dictionaries-in-our-codebase","title":"Accessing dictionaries in our codebase","text":"<p>In order to allow developers to access the downloaded dictionaries we have implemented a solution that allows type-safe easy access.</p>"},{"location":"features/dictionaries/dictionaries-implementation/#dictionaries-gradle-convention-plugin","title":"Dictionaries gradle convention plugin","text":"<p>To begin with, we have a dictionaries convention plugin that is only included in the dictionariesApi feature api module. This plugin registers two important gradle tasks related to our dictionaries accessing implementation:</p> <ul> <li>GenerateDictionarySchemasTask</li> <li>GenerateDictionaryExtensionsTask</li> </ul>"},{"location":"features/dictionaries/dictionaries-implementation/#generatedictionaryschemastask","title":"GenerateDictionarySchemasTask","text":"<p>This task is in charge of downloading the latest dictionaries and generate dictionary schemas out of them. A dictionary schema is a json file that holds all the relevant information from a certain dictionary and the respective keys. This schemas will be later used by our GenerateDictionaryExtensionsTask as an input. An example of a schema can be found here</p> <p>It will read the latest dictionary versions from our dictionary_config_bundle.json, download and parse them to finally save them into json files under a directory that won't be bundled in the app.</p> <p>This task must be manually run by developers at the time of pinning the dictionaries (See Dictionary Pinning). For that there's a convenience make command: <code>make updateDictionaries</code></p> <p>In case the developer forgets to commit the updated dictionary schemas when pinning dictionaries locally, there's currently a github action running that checks it and fails the build if it is the case. This github action runs a script that will use a sha-256 checksum to validate that the combination of dictionary versions (from the dictionary_bundle_config.json file) together with the schemas are correct.</p>"},{"location":"features/dictionaries/dictionaries-implementation/#generatedictionaryextensionstask","title":"GenerateDictionaryExtensionsTask","text":"<p>This task is in charge of generating extension properties and functions to allow us to access dictionaries and their values in an easier way. For this it takes as an input the dictionary schemas (which are the outcome of the GenerateDictionarySchemasTask) and uses KotlinPoet and Jackson.</p> <p>This task will be automatically run whenever kotlin code gets compiled or resources are generated.</p> <p>The outcome of this task are the dictionary extensions and string resources. These can be found under the <code>dictionariesApi/build/generated</code> folder when you build the app. The first ones under <code>kotlin</code> and the second ones under <code>res/dictionaries</code>.</p> Examples of how this generated code looks like <pre><code>&lt;resources&gt;\n    &lt;!--\n    billing_creditcard_cardpin key is not present in all platforms, partners and/or languages. Current usages are for:\n\n    Platforms: android, android-tv\n    Partners:\n    Disney -&gt; Languages (cs, da, de, el, en, en-GB, es-419, es-ES, fi, fr-CA, fr-FR, hu, it, ja, ko, nl, no, pl, pt-PT, pt-BR, ro, sk, sv, tr, zh-Hans, zh-Hant, zh-HK)\n    --&gt;\n    &lt;string name=\"ts_accessibility_billing_creditcard_cardpin\"&gt;ts_accessibility_billing_creditcard_cardpin&lt;/string&gt;\n\n    &lt;string name=\"ts_accessibility_billing_creditcard_cvv\"&gt;ts_accessibility_billing_creditcard_cvv&lt;/string&gt;\n\n    &lt;string name=\"ts_accessibility_billing_creditcard_cvvhelptip\"&gt;ts_accessibility_billing_creditcard_cvvhelptip\n    &lt;/string&gt;\n\n&lt;/resources&gt;\n</code></pre> <pre><code>/**\n * additional_content_info key is nullable because it is not present in all platforms, partners\n * and/or languages. Current usages are for:\n *\n * Platforms: android\n * Partners:\n * Disney -&gt; Languages (cs, da, de, el, en, en-GB, es-419, es-ES, fi, fr-CA, fr-FR, hu, it, ja, ko,\n * nl, no, pl, pt-PT, pt-BR, ro, sk, sv, tr, zh-Hans, zh-Hant, zh-HK)\n * Star -&gt; Languages (en, es-419, pt-BR)\n * Hulu -&gt; Languages (en)\n */\npublic inline fun AccessibilityDictionary.additional_content_info(additional_content_title: String): String? =\n    getString(\"additional_content_info\", mapOf(\"additional_content_title\" to additional_content_title))\n\npublic inline val AccessibilityDictionary.addprofile_pageload: String\n    get() = getString(\"addprofile_pageload\")\n\npublic inline fun AccessibilityDictionary.air_window_live(startTime: String, endTime: String): String = \n    getString(\"air_window_live\", mapOf(\"startTime\" to startTime, \"endTime\" to endTime))\n</code></pre> <p>It is worth noticing that, in the previous examples, some autogenerated properties/functions and string resources contain a javadoc/comment on top. This is to make clear whenever a certain key is not present in all variants and/or languages. You can also notice that, because of this reason, for the kotlin case the return type changes from <code>String</code> to <code>String?</code></p>"},{"location":"features/dictionaries/dictionaries-implementation/#offlinefallback-dictionary-string-resources","title":"Offline/Fallback dictionary string resources","text":"<p>Our dictionaries implementation is currently internet connection dependant. What we mean with this is that the user needs to have a proper internet connection after opening the app for the first time in order to be able to use them. If the user has no internet connection at this point then we will show an error message for it. And since dictionaries couldn't be downloaded we need to have the strings we will show in the error message bundled.This is an example of why we also have offline/fallback dictionary string resources.</p> <p>To sum up, we will use this offline/fallback string resources only when app needs to use strings before dictionaries have been loaded.</p> <p>To implement the generation and bundling of these string resources we have a few different parts in place:</p>"},{"location":"features/dictionaries/dictionaries-implementation/#dictionary_offline_keysjson","title":"dictionary_offline_keys.json","text":"<p>We have a dictionary_offline_keys.json file in the root of the project that contains all the offline/fallback dictionary keys that should be downloaded and bundled into the apps (mobile and tv).</p>"},{"location":"features/dictionaries/dictionaries-implementation/#generatedictionaryfallbackstask","title":"GenerateDictionaryFallbacksTask","text":"<p>The application gradle convention plugin registers this task which is in charge of downloading all dictionaries, retrieving the dictionary keys stated in the dictionary_offline_keys.json file and generate the correct string resources files inside our apps.</p> <p>The files are name after each dictionary in the following way: <code>offline_[dictionary name]_dictionary_keys.xml</code> and the string resources using <code>fallback_</code> as a prefix.</p> <p>You can see this fallback files, for example for the disney mobile app, here.</p> <p>This task must be run manually. If you are pinning dictionaries, you can use the <code>make updateDictionaries</code> which runs also this task.</p>"},{"location":"features/dictionaries/dictionaries-implementation/#fallbackdictionary","title":"FallbackDictionary","text":"<p>The FallbackDictionary class takes care of mapping the requested dictionary string to the correct fallback key.</p> <p>If you add a new offline dictionary key, you must add the mapping here.</p>"},{"location":"features/dictionaries/dictionaries-implementation/#earlydictionaryaccessexception","title":"EarlyDictionaryAccessException","text":"<p>This exception allows us to track in Sentry whenever the app requests a dictionary key before dictionaries are downloaded and there's no offline/fallback string for it bundled in the app. You can check in Sentry for <code>EarlyDictionaryAccessException</code> to see the latest early accesses.</p>"},{"location":"features/dictionaries/dictionaries-implementation/#custom-layoutinflater-to-resolve-xml-string-resources","title":"Custom LayoutInflater to resolve XML string resources","text":"<p>We have in our codebase a custom LayoutInflater to allow XML dictionaries usage. For more info please check the XML Challenge.</p>"},{"location":"features/dictionaries/dictionaries_migration_guide/","title":"Type-safe Dictionaries API Migration Guide","text":"<p>We have implemented a new way of using dictionaries in our app and the goal of this guide is to help you go through the migration to it.</p>"},{"location":"features/dictionaries/dictionaries_migration_guide/#kotlin","title":"Kotlin","text":""},{"location":"features/dictionaries/dictionaries_migration_guide/#use-dictionaries-instead-of-stringdictionary","title":"Use Dictionaries instead of StringDictionary","text":"<p>First make sure that the feature module you're migrating includes the dependency dictionariesApi, as this is necessary to be able to use Dictionaries.</p> <pre><code>implementation project(':features:dictionariesApi')\n</code></pre> <p>Second you need to replace any StringDictionary occurrence with Dictionaries.</p> Example <p>Before</p> <pre><code>import com.bamtechmedia.dominguez.config.StringDictionary\n\nclass SomeClassUsingDictionaries @Inject constructor(\n    private val dictionary: StringDictionary,\n    // Other parameters\n)\n</code></pre> <p>After</p> <pre><code>import com.bamtechmedia.dominguez.dictionaries.Dictionaries\n\nclass SomeClassUsingDictionaries @Inject constructor(\n    private val dictionaries: Dictionaries,\n    // Other parameters\n)\n</code></pre> <p>If the <code>StringDictionary</code> property is annotated with @RestrictedLanguage, you will need to keep it when migrating to <code>Dictionaries</code>.</p> <p>Then, each dictionary usage in this class needs to be updated, the approach depends on whether the key is passed in as a String resource or a String literal</p>"},{"location":"features/dictionaries/dictionaries_migration_guide/#stringres-access","title":"StringRes access","text":"<p>For the StringRes access type it is necessary for you to check what is the actual key. For this you can navigate into the string resource and check for the dictionary and the real key in the following way:</p> <pre><code>&lt;string name=\"network_error_header\"&gt;ns_application_network_error_header&lt;/string&gt;\n</code></pre> dictionary actual key application network_error_header <p>As you can see the actual key is everything that comes after the dictionary.</p> Then you can proceed to migrate the key in the following way <p>Before</p> <pre><code>localizedTitle = dictionary.string(R.string.network_error_header)\n</code></pre> <p>After</p> <pre><code>localizedTitle = dictionaries.application.network_error_header\n</code></pre> <p>Before</p> <pre><code>localizedTitle = dictionary.optionalString(R.string.connection_error_header)\n</code></pre> <p>After</p> <pre><code>localizedTitle =\n    dictionaries.application.connection_error_header ?: \"Fallback for variants or languages were key is not present\"\n</code></pre>"},{"location":"features/dictionaries/dictionaries_migration_guide/#string-literal-access","title":"String literal access","text":"<p>When having a string literal access, as well as with StringRes access, you need to analyze the string to get the dictionary and the actual key.</p> <pre><code>dictionary.string(\"ns_sdk-errors_unexpectederror\")\n</code></pre> dictionary actual key sdk-errors unexpectederror Then you can proceed to migrate the key in the following way <p>Before</p> <pre><code>localized = dictionary.string(\"ns_sdk-errors_unexpectederror\")\n</code></pre> <p>After</p> <pre><code>localized = dictionaries.sdkErrors.unexpectederror\n</code></pre> <p>Before</p> <pre><code>localized = dictionary.optionalString(\"ns_sdk-errors_unexpectederror\")\n</code></pre> <p>After</p> <pre><code>localized = dictionaries.sdkErrors.unexpectederror ?: \"Fallback for variants or languages were key is not present\"\n</code></pre> <p>For the case of having dynamic keys (keys that are only known/formed at runtime) you will need to use the getString accessor.</p> Example <p>Before</p> <pre><code>val index = \"1\"\n\nval imageKey = dictionary.string(\"ns_identity_image_learn_more_${index}_logo\")\n</code></pre> <p>After</p> <pre><code>val index = \"1\"\n\nval imageKey = dictionary.identity.getString(\"image_learn_more_${index}_logo\")\n</code></pre> <p>Warning</p> <p>This last migration type should never be used for regular string literal access!! Only use it when having dynamically formed dictionary keys.</p>"},{"location":"features/dictionaries/dictionaries_migration_guide/#withresourcekey-access","title":"withResourceKey access","text":"<p>Another way of currently accessing dictionary values is by getting the dictionary first and then using one of the previous methods but only with the actual key as a parameter.</p> Example <p>Before</p> <pre><code>val collectionNoContentAvailable = dictionary.withResourceKey(\"application\").optionalString(\"collection_no_content_available\")\n\nval collectionNoContentAvailableEmpty = dictionary.withResourceKey(\"application\").optionalString(\n    key = \"collection_no_content_available_empty\",\n    replacements = mapOf(\"collection_title\" to state.collection?.title)\n)\n</code></pre> <p>After</p> <pre><code>val collectionNoContentAvailable = dictionaries.application.collection_no_content_available\n\nval collectionNoContentAvailableEmpty = dictionaries.application.collection_no_content_available_empty(\n    collection_title = state.collection?.title\n)\n</code></pre>"},{"location":"features/dictionaries/dictionaries_migration_guide/#any-of-the-previous-ones-with-replacements","title":"Any of the previous ones with replacements","text":"<p>Replacements are passed as parameters of the extension functions now. There's no more need to create a map of replacement keys and values. You will only need to pass the values.  </p> <p>Important</p> <p>Sometimes you will see that replacement parameters are nullable. That means that some variants and/or languages might not contain those placeholders. If you find yourself in this situation go to cypher and make sure to cover all the different values of that key in the code (with correct replacements)</p> Example <p>Before</p> <pre><code>val replacements = mapOf(\"minLength\" to passwordRules.minLength, \"charTypes\" to passwordRules.charTypes)\n\npasswordInputLayout?.passwordMeterText = dictionary.string(R.string.password_reqs_enhanced, replacements)\n</code></pre> <p>After</p> <pre><code>passwordInputLayout?.passwordMeterText = dictionaries.application.password_reqs_enhanced(\n    minLength = passwordRules.minLength, charTypes = passwordRules.charTypes\n)\n</code></pre> <p>Warning</p> <p>All new dictionary extension properties and functions might return a nullable String value whenever a key is not present in all platforms, partners and/or languages. Make sure you double check the return type when migrating to prevent missing texts</p>"},{"location":"features/dictionaries/dictionaries_migration_guide/#core-utils-dependency-removal","title":"Core utils dependency removal","text":"<p>Lastly, when you finish migrating all the kt files from a module it is important for you to check if you can remove the core-utils dependency from it. For this you can check for usages of any core-utils class within that module by, in AS, using the Find in Files feature (cmd + shift + F) to search for <code>com.bamtechmedia.dominguez.core.utils.</code>. If there's no ocurrence you can remove the core-utils dependency by deleting the following line from the build.gradle file: <code>implementation project(':core-utils')</code></p>"},{"location":"features/dictionaries/dictionaries_migration_guide/#xml","title":"XML","text":"<p>Migration for xml usages is pretty straight forward. You need to access the old key to see what dictionary to use and then type the key selecting from the autocompletion the \"ts\" prefixed key. If you don't find the \"ts\" equivalent key most likely that key contains replacements, so it cannot be used in xmls. Use the kotlin access instead through the correct binding.</p> Example <p>Before</p> <pre><code>&lt;TextView\n    android:id=\"@+id/welcomeDescriptionSub1\"\n    android:text=\"@string/welcome_sign_up_web\" /&gt;\n</code></pre> <p>In this case:</p> <pre><code>&lt;string name=\"welcome_sign_up_web\"&gt;ns_application_welcome_sign_up_web&lt;/string&gt;\n</code></pre> <p>After</p> <pre><code>&lt;TextView \n    android:id=\"@+id/welcomeDescriptionSub1\"\n    android:text=\"@string/ts_application_welcome_sign_up_web\" /&gt;\n</code></pre> <p>Warning</p> <p>Some new dictionary string resources might not be present in all platforms, partners and/or languages. Make sure you double check this when migrating to prevent missing texts.</p>"},{"location":"features/dictionaries/dictionaries_migration_guide/#testing","title":"Testing","text":"<p>In case you need it, we have a TestDictionaries class which provides an implementation of Dictionaries for testing purposes. To see an example of how to use it you can check the following PR.</p>"},{"location":"features/dictionaries/dictionary-pinning/","title":"Dictionary Pinning","text":"<p>Dictionaries are versioned. Within the app we download them using a remote configurable map that will provide us with the version for each dictionary variant. The process of updating these dictionary versions is what we call dictionary pinning.</p> <p>Dictionary pinning consist of two parts, remote and local pinning.</p>"},{"location":"features/dictionaries/dictionary-pinning/#remote-dictionary-pinning","title":"Remote dictionary pinning","text":"<p>We need to update the latest versions in our appconfig repository. These are the versions we will use at runtime to download the actual dictionaries and use them for the user language/region. For example ANDROID-5964: Dictionary pinning.</p> <ol> <li>Branch off of <code>prod-internal</code> from our app config repo</li> <li>Update the versions in <code>src/pinnedDictionaryVersions.json</code> to match the version number in the Pin dictionaries to Prod ticket. &gt; NOTE: You should update/verify all dictionaries, not only those in red. (At this time of writing, we are not using the dictionaries: commerce, off-device, promo, seo. You can skip those.)</li> <li>Run <code>./scripts/generate-output/script.main.kts</code> locally.</li> <li>Run <code>./scripts/compare-configs/script.main.kts</code> locally</li> <li>If the compare-config script reports a change try to identify if the change is actually a breaking one. Typically, you can ask about this in the slack thread about the dictionary pinning or check with your Team Lead/TPM. See the README on the compare-configs script for more details</li> <li>Put up a PR to merge all the changes into <code>prod-internal</code>. If there are potentially breaking changes, build will fail and merge will be blocked. Then, after confirming it's not a breaking change (as described in step 5) you can add the label <code>breaking-dictionary-change</code> to the PR so build will pass and unblock the merge.</li> <li>Once merged into <code>prod-internal</code> put up a PR to merge <code>prod-internal</code> into <code>prod</code></li> <li>Once the new dictionary versions are deployed to prod, send a message to <code>#platform_deployments</code> to announce the pinning deployment.</li> </ol>"},{"location":"features/dictionaries/dictionary-pinning/#local-dictionary-pinning","title":"Local dictionary pinning","text":"<p>We need to update the latest versions in our Dmgz codebase. These are the versions we use to access dictionaries in our codebase in an easy way (later explained in Using Dictionaries) For example: ANDROID-5964: Update pinned dictionaries</p> <ol> <li>In the Android Dmgz project update the dictionary_bundle_config.json to match the newly pinned versions.</li> <li>Update the dictionaries by running <code>make updateDictionaries</code> in the root of the project</li> <li>Final step is to make the PR for all the changes. If there is a release branch and the RC is not ready yet, point the PR to the release branch, otherwise to the development branch</li> </ol>"},{"location":"features/dictionaries/introduction/","title":"Dictionaries","text":"<p>This page is in charge of explaining how we handle dictionaries in the Dmgz codebase.</p>"},{"location":"features/dictionaries/introduction/#introduction","title":"Introduction","text":"<p>Currently, in our codebase, we use runtime downloaded dictionaries to retrieve the texts we show. These dictionaries are maps holding dictionary keys and the corresponding values. You can check Cypher to see the latest dictionaries and their structure.</p> <p>These dictionaries are created individually for every language, platform (so far mobile and tv) and app (so far disney, star and hulu) we support. They are also versioned. We can think of them as something like the following:</p> <pre><code>typealias DictionaryKey = String\ntypealias DictionaryValue = String\n\nclass Dictionary(resourceKey: String, map: Map&lt;DictionaryKey, DictionaryValue&gt;)\n\nval dictionaries = listOf(\n    Dictionary(\"application\", mapOf(\"btn_play\" to \"Play\")),\n    Dictionary(\"accessibility\", mapOf(\"main_button_a11y\" to \"Main button pressed\")),\n    // etc...\n)\n</code></pre> <p>In order to make it easier to read, the dictionaries documentation is divided into different pages per topic.</p>"},{"location":"features/dictionaries/introduction/#quick-access","title":"Quick access","text":"<ul> <li>Implementation</li> <li>Dictionary Pinning</li> <li>Using dictionaries</li> <li>Legacy implementation</li> <li>Migration guide</li> <li>XML Challenge</li> <li>Implementation extras</li> </ul>"},{"location":"features/dictionaries/legacy-dictionaries/","title":"Legacy Dictionaries Implementation","text":"<p>This page is about the legacy dictionaries implementation (prior to New Dictionaries API RFC)</p> <p>Since we are in the course of a dictionaries implementation migration (towards the previously mentioned RFC) we still have in our codebase the following old legacy dictionaries implementation. All of these are either currently Deprecated or on the way to become.</p> <p>Important</p> <p>If you are currently migrating form this legacy implementation to the new one, please check our Migration Guide</p>"},{"location":"features/dictionaries/legacy-dictionaries/#stringdictionary","title":"StringDictionary","text":"<p>Although our new implementation relies on the StringDictionary interface, it is meant to be deleted once we are fully migrated. This interface was in the legacy implementation the way to inject dictionaries in any place of our codebase and retrieve dictionary values.</p> <p>It provides a protocol to access dictionary values through either a string resource reference or string literal keys. It has also an optional alternative in case we don't know if the keys are present for every variant.</p>"},{"location":"features/dictionaries/legacy-dictionaries/#namespaceddictionary","title":"NameSpacedDictionary","text":"<p>The NameSpacedDictionary class is the concrete implementation of StringDictionary to represent all dictionaries. It would resolve StringRes and string literal keys into dictionary values. In our current implementation AllDictionaries would be the equivalent class and once migration is over, this will be deleted in favor of it.</p> <p>This class has the ability to split namespaced dictionary keys such as <code>ns_application_btn_play</code> into a dictionary resource key and the actual key and retrieve it from the dictionaries.</p>"},{"location":"features/dictionaries/legacy-dictionaries/#keyvaluedictionary","title":"KeyValueDictionary","text":"<p>The KeyValueDictionary class is also still used in our new implementation, but it will get replaced by a new Dictionary class in the future when the migration is over. It is a concrete implementation of StringDictionary as well but representing a single dictionary being able to resolve dictionary keys from it.</p>"},{"location":"features/dictionaries/legacy-dictionaries/#dictionaryresourcekeysgenerator","title":"DictionaryResourceKeysGenerator","text":"<p>The DictionaryResourceKeysGenerator is a script formerly used to generate namespaced string resources for the legacy dictionaries implementation. It is fully deprecated and shouldn't be used.</p>"},{"location":"features/dictionaries/using-dictionaries/","title":"Using dictionaries","text":"<p>In our codebase we can access dictionaries either via Kotlin or Xml (through our layouts).</p>"},{"location":"features/dictionaries/using-dictionaries/#kotlin","title":"Kotlin","text":"<p>You can use dictionaries in our codebase by injecting Dictionaries in your class (either via constructor or property) and access directly the dictionary and the key by using property or function extensions. If the value of the key requires placeholder replacements, you will need to pass them as parameters. For example:</p> <p>Suppose you want to use the <code>btn_play</code> key from the application dictionary. Which value looks as the following:</p> <p><code>btn_play = \"Play\"</code></p> <p>Then your code to access it will look like this:</p> <pre><code>@Inject\nlateinit var dictionaries: Dictionaries\n\ndictionaries.application.btn_play\n</code></pre> <p>In the case of using a key whose value contains replacements, let's say, <code>password_reqs_enhanced</code> also from the application dictionary:</p> <p><code>password_reqs_enhanced = \"Use a minimum of ${minLength} characters (case sensitive) with characters from ${charTypes} of the following: letters, numbers, special characters.\"</code></p> <p>Then your code will look like this:</p> <pre><code>@Inject\nlateinit var dictionaries: Dictionaries\n\nfun someFunction(passwordRules: PasswordRules) {\n\n    dictionaries.application.password_reqs_enhanced(\n        minLength = passwordRules.minLength, charTypes = passwordRules.charTypes\n    )\n}\n</code></pre> <p>Important</p> <p>If your usage is within the onboarding flow, you will need to annotate the Dictionary injection with @RestrictedLanguage. For more info please check Restricted Onboarding Language</p>"},{"location":"features/dictionaries/using-dictionaries/#dynamic-dictionary-keys","title":"Dynamic dictionary keys","text":"<p>Dynamic dictionary keys are keys where we don't know their full value at compile time, only at run time. These are keys based on some form of (server-side) state. A good example are dictionary keys with a Paywall Hash suffix. The Paywall hash is returned by the server based on the User's entitlement and location and needs to be appended to the key. For example:</p> <p><code>welcome_monthly_tagline_9cfb5d89da74ee3147a62af3c0b09c50 = \"No extra costs, no commitments. T&amp;Cs apply.\"</code></p> <p>The last \"9cfb5d89da74ee3147a62af3c0b09c50\" part will be only know at runtime, so we need to form the key dynamically.</p> <p>For this type of keys (and only for these) we can access dictionaries using <code>getString</code> in the following way:</p> <pre><code>@Inject\nlateinit var dictionaries: Dictionaries\n\ndictionaries.application.getString(\"welcome_monthly_tagline_9cfb5d89da74ee3147a62af3c0b09c50\")\n</code></pre> <p>And if it has replacements, for example:</p> <p><code>annual_value_prop_168c0486da803ce5a87b5990ba76c9a0 = \"(12 months at ${PRICE_PROP_1}/mo. Save over 15%)\"</code></p> <p>We would use it like the following:</p> <pre><code>@Inject\nlateinit var dictionaries: Dictionaries\n\nfun someFunction(price: String) {\n    dictionaries.application.getString(\n        \"welcome_monthly_tagline_9cfb5d89da74ee3147a62af3c0b09c50\",\n        mapOf(\"PRICE_PROP_1\" to price)\n    )\n}\n</code></pre>"},{"location":"features/dictionaries/using-dictionaries/#dynamic-dictionaries","title":"Dynamic dictionaries","text":"<p>There are a tiny amount of cases where we actually don't know not only the dictionary key but also the dictionary itself. For these cases, we have two ways of accessing dictionaries.</p> <p>When we have the dictionary resource key and the actual key separately:</p> <pre><code>@Inject\nlateinit var dictionaries: Dictionaries\n\nprivate val dictionary: String = \"application\"\n\nprivate val key: String = \"btn_play\"\n\nfun someFunction() {\n    dictionaries.getDictionary(dictionary).getString(key)\n}\n</code></pre> <p>When we have the dictionary resource key and the actual key all together:</p> <pre><code>@Inject\nlateinit var dictionaries: Dictionaries\n\nprivate val dictionaryKey: String = \"ns_application_btn_play\"\n\nprivate val dictionaryKeyAlternative: String = \"ts_application_btn_play\"\n\nfun someFunction() {\n    dictionaries.getString(dictionaryKey)\n\n    dictionaries.getString(dictionaryKeyAlternative)\n}\n</code></pre> <p>Important</p> <p>The previous two usages shown (Dynamic dictionary keys and Dynamic dictionaries) are only meant to be used in very special occasions. Make sure you need to use them and there's no other way to migrate to the first examples shown at the beginning of the section.</p>"},{"location":"features/dictionaries/using-dictionaries/#xml","title":"XML","text":"<p>Dictionary access through our xml layouts is pretty straight forward. You just have to type the key (with <code>ts</code> as prefix) into the xml attribute (android:text for example) and the value will get resolved. Some examples are:</p> <p>For android:text:</p> <pre><code>&lt;com.bamtechmedia.dominguez.widget.button.StandardButton\n        android:id=\"@+id/offButton\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"@dimen/btn_min_height\"\n        app:buttonType=\"secondary\"\n        android:text=\"@string/ts_application_btn_add_profile_kids_profile_off\"/&gt;\n</code></pre> <p>For android:contentDescription:</p> <pre><code>&lt;androidx.appcompat.widget.AppCompatImageView\n        android:id=\"@+id/up_next_back_btn\"\n        android:layout_width=\"@dimen/up_next_close_icon_size\"\n        android:layout_height=\"@dimen/up_next_close_icon_size\"\n        android:contentDescription=\"@string/ts_accessibility_btn_back\"\n        android:src=\"@drawable/ic_circle_back_black_resizable\"/&gt;\n</code></pre> <p>Important</p> <p>Currently we support the following widgets and their text related attributes: TextView, AppCompatTextView, EditText, EmptyStateView, SearchView, ImageView, StandardButton. This should cover the majority of our cases. The remaining custom views we have with custom attributes currently not supported will be migrated soon. For now, use Kotlin access for them</p>"},{"location":"features/dictionaries/using-dictionaries/#extra-important-notes","title":"Extra important notes","text":"<ul> <li>Keep in mind that assigning values through kotlin or xml means dictionary access and resolution. For the best performance, assign values either through Kotlin OR XML, not both.</li> <li>If you need to wait for dictionaries to be loaded in your code, DictionariesState.Provider has functions allowing us to wait for dictionaries to be loaded.</li> </ul>"},{"location":"features/dictionaries/using-dictionaries/#testing","title":"Testing","text":"<p>If you are working with unit test, and you need a Dictionaries fake implementation you can use TestDictionaries</p>"},{"location":"features/dictionaries/xml-challenge/","title":"XML Challenge","text":""},{"location":"features/dictionaries/xml-challenge/#the-problem","title":"The Problem","text":"<p>Some text in our app is set in our layout xmls. The only way to do this is through string resources, which represents a challenge for us because it doesn't allow us to use runtime downloaded dictionaries.</p>"},{"location":"features/dictionaries/xml-challenge/#solution","title":"Solution","text":"<p>To solve this problem the app hooks in to layout inflation using LayoutInflater.Factory2. This Factory gets a callback for every View that gets defined in a layout XML that gets inflated.</p> <p>Take the layout below as an example.</p> <pre><code>&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                                                   xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n                                                   android:layout_width=\"match_parent\"\n                                                   android:layout_height=\"match_parent\"\n                                                   android:paddingStart=\"70dp\"\n                                                   android:theme=\"@style/ThemeOverlay.Avatars\"&gt;\n\n    &lt;androidx.constraintlayout.widget.Guideline\n            android:id=\"@+id/guideline\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            app:layout_constraintGuide_percent=\"0.56\"/&gt;\n\n    &lt;TextView\n            android:id=\"@+id/titleTextView\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"/&gt;\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;\n</code></pre> <p>The method onCreateView(String, Context, AttributeSet) will be invoked three times. On each invocation the first argument will be the XML element name, so: <code>androidx.constraintlayout.widget.ConstraintLayout</code>, <code>androidx.constraintlayout.widget.Guideline</code> and <code>TextView</code> in that order.</p> <p>The <code>LayoutInflater.Factory2</code> is designed in such a way that the system will create an instance of the <code>View</code> if it returns null. This allows libraries and apps to decide if they want to create another class then what was requested in Layout. As an example the appcompat library will create an <code>AppCompatTextView</code> when the XML element is <code>TextView</code>, this results in support for certain newer features of TextView being available on older platforms. Check here for a full list of views that are being created by appcompat instead of framework classes.</p> <p>For dictionary strings the app does not want to replace this logic, but by using a delegation pattern it does allow us to:</p> <ul> <li>Adjust subclasses of <code>TextView</code> created by appcompat to set the dictionary value based on the string resource id.</li> <li>Create new instances for views that are not created by appcompat and set correct dictionary values for those.</li> </ul> <p>The factory is applied to the activity layout inflater, and all Fragments will be using a clone of that.</p> <p>Our custom LayoutInflater will delegate view creation and attribute resolution to Helper classes. For example, for TextView's referenced in layouts TextViewLayoutInflaterHelper will do the job.</p> <p>This Helper classes will use DictionaryLayoutInflaterHelper to resolve the dictionary keys present in the text attributes from the widgets and assign them correctly.</p> <p>The string resources that we use in our xmls will resolve to a combination of dictionary + key so that the DictionaryLayoutInflaterHelper can split it and retrieve the dictionary value at runtime correctly.</p> <p>All of this might be confusing or hard to understand. We will try to explain it also with an example:</p> <p>Currently, in our fragment_kids_mode_selection.xml we have:</p> <pre><code>&lt;com.bamtechmedia.dominguez.widget.button.StandardButton\n        android:id=\"@+id/offButton\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"@dimen/btn_min_height\"\n        android:layout_marginTop=\"32dp\"\n        android:minWidth=\"85dp\"\n        android:focusable=\"true\"\n        app:buttonType=\"secondary\"\n        android:text=\"@string/ts_application_btn_add_profile_kids_profile_off\"\n        android:focusedByDefault=\"true\"\n        android:focusableInTouchMode=\"true\"\n        app:buttonBackground=\"@drawable/transparent_button_background\"\n        app:buttonTextColor=\"@color/color_basic_text\"\n        app:layout_constraintBottom_toTopOf=\"@+id/onButton\"\n        app:layout_constraintEnd_toEndOf=\"@id/twoThirdsGuideLine\"\n        app:layout_constraintStart_toStartOf=\"@id/oneThirdGuideLine\"\n        app:layout_constraintTop_toBottomOf=\"@+id/kidsModeDescription\"\n        app:layout_constraintVertical_bias=\"0.5\"/&gt;\n</code></pre> <p>And the string resource used in <code>android:text</code> is:</p> <pre><code>&lt;string name=\"ts_application_btn_add_profile_kids_profile_off\"&gt;ts_application_btn_add_profile_kids_profile_off&lt;/string&gt;\n</code></pre> <p>Our custom LayoutInflater (ConfigStringsLayoutInflater) will delegate the creation of the StandardButton to the StandardButtonLayoutInflaterHelper. This class will get the attribute <code>android:text</code> value (<code>ts_application_btn_add_profile_kids_profile_off</code> in this case) and pass it to the DictionaryLayoutInflaterHelper who will extract the dictionary and the key from the value and resolve it. For this example the dictionary would be <code>application</code>and the key would be <code>btn_add_profile_kids_profile_off</code>. And with this the dictionary key is resolved like the following:</p> <pre><code>dictionaries.getDictionary(dictionary).getString(key)\n</code></pre> <p>And StandardButtonLayoutInflaterHelper will assign the resulting value to the text attribute of the newly created view.</p>"},{"location":"features/glimpse/","title":"Glimpse","text":"<p>Glimpse is an internal analytics tool managed by the DSI team that captures specific events and user activities across the Disney+, Star+ and Hulu apps.</p> <p>The FEDSA team's documentation site contains a wealth of knowledge around the various components of Glimpse. It's highly encouraged that you read through some of the documentation there before continuing.</p>"},{"location":"features/glimpse/how_to/","title":"How To","text":"<p>The Glimpse implementation is built on top of the PageTracker logic implemented in the <code>mainApp</code> feature module. This logic determines what screens are deemed \"active\" to the user at any given time. The implementation uses this API internally, to determine when pageView/containerView tracking should occur.</p>"},{"location":"features/glimpse/how_to/#hawkeye","title":"Hawkeye","text":"<p>A master marksman, known for his extremely keen eyesight and accuracy</p> <p>Hawkeye is the name of the internal framework within the codebase used to track pageView, containerView, and engagement events via Glimpse.</p> <p>Tracking for a specific screen occurs through the use of the <code>Hawkeye</code> interface. This can be injected directly in an Activity, Fragment, or passed into a wrapper class for analytics (i.e. CollectionAnalytics, MovieDetailAnalytics, etc).</p> <p>The Activity/Fragment being tracked must then also implement both the <code>Hawkeye.Target</code> interface as well as the PageTracker's <code>TrackedPage</code> interface. The <code>Hawkeye.Target</code> interface is meant to be explicit in order to prevent erroneously injecting a <code>Hawkeye</code> instance into certain fragments which should not be tracked (i.e. Tier2DialogFragment). Behind the scenes the <code>Hawkeye.Factory</code> will create a backing ViewModel (<code>HawkeyeViewModel</code>). The ViewModel will subscribe to the PageTracker state to determine when the page is considered \"active\" and only then will start sending Glimpse events.</p> <pre><code>class DetailFragment() : Fragment(), Hawkeye.Target, TrackedPage {\n\n@Inject\nlateinit var hawkeye: Hawkeye\n\noverride val glimpseMigrationId: GlimpseMigrationId = GlimpseMigrationId.DETAIL_FRAGMENT\n\n...\n\n}\n</code></pre> <p>For Fragments which do not use Hilt yet, a convenience function has been added.</p> <pre><code>class DetailFragment() : Fragment(), Hawkeye.Target, TrackedPage {\n\nprivate val hawkeye by Hawkeye()\n\noverride val glimpseMigrationId: GlimpseMigrationId = GlimpseMigrationId.DETAIL_FRAGMENT\n\n...\n\n}\n</code></pre>"},{"location":"features/glimpse/how_to/#tracking-a-pageview-event","title":"Tracking a PageView Event","text":"<p>PageView tracking may occur when <code>markPage</code> is called on the <code>Hawkeye</code> interface. This method will set some page info for a screen and queue up a PageView event to be triggered when the screen reaches a state where it considered the active page (as determined by the <code>HawkeyeViewModel</code>).</p> <p>If the screen is already active, then the PageView event will be triggered at the time of calling <code>markPage</code>. It is important to emphasize that there should never be a need to override lifecycle methods to invoke <code>markPage</code>, as the framework internally handles when a page becomes active (i.e. overriding onStart/onResume to call markPage). In most cases, it will be common to call <code>markPage</code> from the <code>init</code> constructor of the ViewModel.</p> <p>Example:</p> <pre><code>init {\n    hawkeye.markPage(HawkeyePage(...))\n}\n</code></pre> <p>Commonly this would be abstracted into an \"Analytics\" class which contains all the analytics logic</p> <pre><code>// in DetailViewModel\ninit {\n    detailAnalytics.markPage()\n}\n</code></pre> <pre><code>class DetailAnalytics @Inject constructor(\n    hawkeye: Hawkeye\n) {\n\n    fun markPage() {\n        hawkeye.markPage(HawkeyePage(...))\n    }\n\n}\n</code></pre> <p>The method <code>markPage</code> accepts a <code>HawkeyePage</code> which holds additional info needed in order to track the PageView.</p>"},{"location":"features/glimpse/how_to/#tracking-a-containerview-event","title":"Tracking a ContainerView Event","text":"<p>ContainerView tracking can be performed by calling <code>hawkeye.markContainers</code> and passing a list of <code>HawkeyeContainer</code>.</p> <p>Example:</p> <pre><code>hawkeye.markContainers(\n    listOf(\n        HawkeyeContainer(\n            containerLookupId = CONTAINER_ID\n            containerType = GlimpseContainerType.CTA_BUTTON,\n            containerKey = \"onboarding_cta\",\n            elements = listOf(\n                HawkeyeElement.StaticElement(\n                    containerLookupId = CONTAINER_ID,\n                    elementLookupId = ELEMENT_LOOKUP_ID,\n                    elementId = elementId,\n                    elementType = ElementType.TYPE_BUTTON,\n                    elementIdType = ElementIdType.BUTTON,\n                    elementIndex = 0,\n                    contentType = \"other\",\n                    programType = \"other\"\n                )\n            )\n        )\n)\n</code></pre> <p>ContainerView tracking will only occur after a Page is set using <code>markPage</code>. If <code>markContainers</code> is called before <code>markPage</code> any ContainerViews passed will be queued up and fired once a <code>markPage</code> is invoked (assuming the page is also \"active\" at that time).</p> <p>Important</p> <p>In some cases ContainerView tracking is much more complex (Collection and Detail pages). For a how to on tracking in these scenarios, see the RecyclerView     tracking approach.</p>"},{"location":"features/glimpse/how_to/#purpose-of-containerlookupid","title":"Purpose of containerLookupId","text":"<p>The <code>containerLookupId</code> is used to store the necessary info about a container and any elements. When an input or interaction event occurs this ID is also passed along in order to retrieve the necessary container and element info. This ID should be unique and is created and provided by the feature. It is important to note that this IS NOT the same thing as the containerViewId. The <code>containerViewId</code> logic (that existed in the v2 implementation) is no longer exposed to the features and is internal to the <code>HawkeyeViewModel</code>.</p>"},{"location":"features/glimpse/how_to/#tracking-interactioninput-events","title":"Tracking Interaction/Input Events","text":"<p>Simply call the corresponding method on the <code>Hawkeye</code> interface, passing the necessary info about the element to be tracked.</p> <pre><code>hawkeye.fireInteraction(\n    containerLookupId = CONTAINER_ID,\n    elementId = \"done\",\n    interactionType = InteractionType.SELECT\n)\n</code></pre> <pre><code>hawkeye.fireInput(\n    containerLookupId = CONTAINER_ID,\n    elementId = \"search_input\",\n    inputValue = \"test\",\n    inputType = InputType.INPUT_FORM\n)\n</code></pre>"},{"location":"features/glimpse/how_to/#staticelement-dynamicelement-and-collectionelement","title":"StaticElement, DynamicElement, and CollectionElement","text":"<p>These exist in an effort to clean up the calling sites where Glimpse tracking occurs.</p> <ul> <li>StaticElement<ul> <li>Used when the elementId does not change. For example, a \"Done\" or \"Save\" button on the edit profile screen.</li> </ul> </li> <li>DynamicElement<ul> <li>Typically used for Elements which have Input events associated with them. These elements usually have elementIds which change. For example, a search field within search or the auto play toggle on edit profile.</li> </ul> </li> <li>CollectionElement<ul> <li>Represents an Element tied to a Polaris collection. Additional properties are required when tracking these elements.</li> </ul> </li> </ul> <p>DynamicElement</p> <p>If the element has a dynamic elementId (i.e. <code>auto_play_on</code> vs <code>auto_play_off</code>). You will need to set and pass an <code>ElementLookupId</code> as well.</p> <pre><code>hawkeye.fireInput(\n    containerLookupId = CONTAINER_ID,\n    elementLookupId = AUTO_PLAY\n    elementId = \"auto_play_on\",\n    inputValue = \"on\",\n    inputType = InputType.TOGGLE\n)\n\ncompanion {\n  private const val AUTO_PLAY = ElementLookupId(\"auto_play_toggle\")\n}\n</code></pre> <p>Internally, the framework will use the <code>containerLookupId</code> and <code>elementLookupId</code> to pull out the necessary info for the event. These IDs should match the IDs that were passed when the <code>HawkeyeContainer</code> was created.</p>"},{"location":"features/glimpse/how_to_recyclerview_tracking/","title":"Glimpse RecyclerView Tracking","text":"<p>Our screens often have multiple dynamic containers (collections and detail pages) which can make it challenging to track what the user sees as they navigate. See the below image as an example.</p> <ul> <li>Green outline = container to be tracked</li> <li>Blue outline = elements within a container</li> </ul> <p></p>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#overview-of-implementation","title":"Overview of implementation","text":"<ul> <li><code>RecyclerViewContainerTracking</code> creates <code>PositionItemDecoration</code> and adds them to RecyclerViews</li> <li><code>PositionItemDecoration</code> reports visible positions to the <code>ViewedItemsTracker</code></li> <li><code>ViewedItemsTracker</code> emits untracked positions</li> <li><code>HawkeyeContainerTracker</code> subscribes to <code>ViewedItemsTracker</code> and maps the untracked positions to <code>Flowable&lt;List&lt;HawkeyeContainer&gt;&gt;</code></li> <li><code>HawkeyeViewModel</code> subscribes to stream of <code>HawkeyeContainers</code> from <code>HawkeyeContainerTracker</code></li> <li><code>HawkeyeViewModel</code> passes these containers to the <code>GlimpseApi</code> for tracking</li> </ul>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#getting-started","title":"Getting Started","text":"<p>Before implementing, ensure you've setup PageView tracking for the screen. See the \"How To\" guide here. This approach assumes the screen is built using Recyclerviews and Groupie Items.</p>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#1-use-recyclerviewcontainertracking-to-report-visible-positions-of-the-recyclerviews","title":"1) Use RecyclerViewContainerTracking to report visible positions of the RecyclerViews","text":"<p>A screen may contain a parent recyclerview and any number of child recyclerviews (for nested scrolling items).</p>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#bind-the-parent-recyclerview","title":"Bind the parent RecyclerView","text":"<p>Use <code>trackParentVisibility(YOUR_RECYCLER_VIEW)</code> from <code>RecyclerViewContainerTracking</code></p> <pre><code>class DetailPresenter @Inject constructor(\n    private val fragment: Fragment,\n    private val recyclerViewContainerTracking: RecyclerViewContainerTracking\n) {\n\n    private val binding by fragment.viewBinding { FragmentDetailBinding.bind(it) }\n\n    /**\n     * Initial setup of the Detail page view\n     */\n    fun setup() {\n        binding.detailRecyclerView?.let { recyclerViewContainerTracking.trackParentVisibility(it) }\n    }\n</code></pre>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#optional-bind-child-recyclerviews","title":"(Optional) Bind child RecyclerViews","text":"<p>If a screen contains Groupie Items which have nested RecyclerViews (collection pages). The <code>RecyclerViewContainerTracking</code> class can be used to report their positions as well.</p> <p>In <code>onCreateViewHolder</code> child items should invoke <code>trackVisibilityInParent(recyclerView, positionInParent)</code>. When Items are bound or rebound in the RecyclerView they will need to be updated so that the underlying decoration is updated with the correct position in the parent. This occurs in <code>onBindViewHolder/bind</code>.</p> <pre><code>class CarouselItem(\n    private val containerTracking: RecyclerViewContainerTracking,\n    private val adapter: GroupAdapter&lt;GroupieViewHolder&gt;,\n    private val positionInParent: Int\n) : Item() {\n\n    ...\n\n    override fun createViewHolder(itemView: View): ViewHolder {\n        return super.createViewHolder(itemView).also { viewHolder -&gt;\n            ...                        \n            containerTracking.trackVisibilityInParent(recyclerView, positionInParent)\n        }\n    }\n\n    override fun bind(viewHolder: ViewHolder, position: Int) {\n        ...\n        containerTracking.bindVisibilityTrackingInParent(recyclerView, positionInParent)\n    }\n}\n</code></pre>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#2-implement-hawkeyetargetitem-interface-on-the-groupie-item-that-should-be-tracked","title":"2) Implement HawkeyeTargetItem interface on the Groupie Item that should be tracked","text":""},{"location":"features/glimpse/how_to_recyclerview_tracking/#for-simple-items-items-with-no-additional-elements-or-nested-scrolling-children","title":"For \"simple\" Items (Items with no additional elements or nested scrolling children)","text":"<p>Use the <code>ElementTarget</code> interface</p> <pre><code>class CarouselCardItem(\n    private val id: ViewLookupId,\n) : Item&lt;GroupieViewHolder&gt;(), HawkeyeTargetItem.ElementTarget {\n\n    override fun bind(viewHolder: GroupieViewHolder, position: Int) {\n        viewHolder.root.setTag(R.id.view_lookup_tag_key, id)\n    }\n\n    override val viewLookupId: String\n        get() = id\n    override val lookupInfo: HawkeyeTargetInfo?\n        get() = HawkeyeTargetInfo(...)\n}\n</code></pre> <ul> <li>The <code>ElementTarget</code> interface requires a <code>ViewLookupId</code> and <code>HawkeyeTargetInfo</code>.  <ul> <li><code>ViewLookupId</code> is a unique ID for every item. It is used to \"lookup\" additional data (HawkeyeTargetInfo) about the view for analytics purposes.</li> <li><code>HawkeyeTargetInfo</code> is a marker interface to be implemented by features to provide customizable analytic payload data</li> </ul> </li> </ul> <p>What is HawkeyeTargetInfo?</p> <p><code>RecyclerViewContainerTracking</code> handles automatically looping through the items in the RecyclerView and registering the analytic payload data (<code>HawkeyeTargetInfo</code>) to a shared map. When items become visible to the user, the visible positions will be looked up in this map and their <code>HawkeyeTargetInfo</code> will be retrieved. The <code>HawkeyeTargetInfo</code> is a marker interface and thus customizable to the feature. For example,  the Collections feature will have very different payload data than that of the Detail feature.</p> <p>Example of the <code>HawkeyeTargetInfo</code> used in Collections:</p> <pre><code>/**\n * Collections feature implementation of [HawkeyeTargetInfo]. Contains required data for tracking items\n * within a Collection.\n */\nsealed class CollectionsItemLookupInfo(\n    val config: ContainerConfig,\n) : HawkeyeTargetInfo {\n\n    /**\n     * An item that is backed by an Asset\n     * @property asset - the backing [Asset] tied to this item or null if not available/loaded yet.\n     * @property indexInSet - the index of this item within the overall set\n     * @property additionalElements - list of additional elements to track in addition to the asset (i.e. \"details\" button\n     * on some hero containers)\n     */\n    class AssetLookupInfo(\n        config: ContainerConfig,\n        val asset: Asset?,\n        val indexInSet: Int,\n        val additionalElements: List&lt;AdditionalElement&gt;? = emptyList()\n    ) : CollectionsItemLookupInfo(config)\n\n    ...\n</code></pre>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#for-items-with-nested-scrolling-ie-shelves-on-collection-pages","title":"For Items with nested scrolling (i.e. shelves on collection pages)","text":"<p>Use the <code>ContainerTarget</code> interface</p> <pre><code>class CarouselItem(\n      private val childItems: List&lt;CarouselCardItem&gt;\n) : Item(), HawkeyeTargetItem.ContainerTarget {\n\n    ...\n\n    override fun bind(viewHolder: ViewHolder, position: Int) {\n        ...\n    }\n\n    override val children: List&lt;ElementTarget&gt;\n        get() = childItems.filterIsInstance&lt;ElementTarget&gt;()\n}\n</code></pre>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#3-implement-the-hawkeyecontainertracker-interface","title":"3) Implement the HawkeyeContainerTracker interface","text":"<pre><code>/**\n * Responsible for converting untracked positions exposed by the ViewedItemsTracker into HawkeyeContainers\n * to be tracked by Glimpse.\n */\ninterface HawkeyeContainerTracker {\n\n    /**\n     * A stream of HawkeyeContainers as they become visible to the user.\n     */\n    fun containersStream(): Flowable&lt;List&lt;HawkeyeContainer&gt;&gt;\n}\n</code></pre> <ul> <li>This class requires the most \"manual\" work.</li> <li>It is responsible for taking the positions emitted by the <code>ViewedItemsTracker</code> and mapping them into <code>HawkeyeContainers</code> using the <code>HawkeyeLookupRegistry</code>.</li> <li>The logic within this class will vary depending on the feature</li> </ul> <p>Here is an example (pseudo) that acheives this:</p> <pre><code>class GlimpseSomeFeatureContainerTracker @Inject constructor(\n    private val viewedItemsTracker: ViewedItemsTracker,\n    private val lookupRegistry: HawkeyeLookupRegistry\n) : HawkeyeContainerTracker {\n\n    override fun containersStream(): Flowable&lt;List&lt;HawkeyeContainer&gt;&gt; =\n        viewedItemsTracker.stateStream\n            .map { untrackedPositions -&gt;\n                when (untrackedPositions) {\n                    is ParentPositions -&gt; mapParentToContainer(untrackedPositions)\n                    is ChildPositions -&gt; mapChildToContainer(untrackedPositions)\n                }\n            }\n\n    private fun mapParentToContainer(parentPositions: ParentPositions): List&lt;HawkeyeContainer?&gt; =\n        parentPositions.positions\n            .map { position -&gt;\n                // in real app log or handle error if viewLookupId is missing\n                val viewLookupId = parentPositions.getViewLookupId(position) ?: return@map null\n                // in real app log or handle error if lookupInfo is missing\n                val lookupInfo = lookupRegistry.getInfo(viewLookupId) ?: return@map null\n                return@map HawkeyeContainer(\n                    containerType = GlimpseContainerType.SHELF,\n                    containerKey = lookupInfo.containerKey,\n                    elements = emptyList(),\n                    verticalPosition = position,\n                    horizontalPosition = 0\n                )\n            }\n\n    private fun mapChildToContainer(childPositions: ChildPositions): List&lt;HawkeyeContainer?&gt; =\n        ...\n}\n</code></pre> <p>Tip</p> <p>Additional real-world examples can be found in the project. See HawkeyeCollectionsContainerTracker or DetailHawkeyeContainerTracker.</p>"},{"location":"features/glimpse/how_to_recyclerview_tracking/#4-bind-the-newly-created-hawkeyecontainertracker-to-the-hawkeye-instance","title":"4) Bind the newly created HawkeyeContainerTracker to the Hawkeye instance","text":"<pre><code>@AndroidEntryPoint\nclass SomeFeature : Fragment(), TrackedPage, Hawkeye.Target {\n\n    ...\n\n    @Inject\n    lateinit var containerTracker: GlimpseSomeFeatureContainerTracker\n\n    @Inject\n    lateinit var hawkeye: Hawkeye\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        hawkeye.markPage(HawkeyePage(pageName = PageName.SOME_FEATURE))\n        // attach the GlimpseSomeFeatureContainerTracker to enable automatic item tracking\n        hawkeye.setContainerTrackers(listOf(containerTracker))\n    }\n\n    override val glimpseMigrationId: GlimpseMigrationId\n        get() = GlimpseMigrationId.DISCOVER\n\n}\n</code></pre> <p>Note</p> <p>In production code, we would normal abstract the Hawkeye logic from the Fragment and move it into its own Analytics class.</p> <p>The <code>HawkeyeViewModel</code> will automatically handle the subscription to the <code>HawkeyeContainerTracker</code> and pass along the emitted GlimpseContainers to <code>GlimpseApi</code> for tracking.</p> <p>With the above setup you should now see containers automatically firing! </p>"},{"location":"features/glimpse/migration_workflow/","title":"Migration Workflow","text":"<p>The codebase is currently transitioning to using the new Glimpse framework (called Hawkeye) outlined here. This page documents the process of migrating an existing screen to the new framework. This process will be updated and continually improved upon as we migrate more and more pages.</p>"},{"location":"features/glimpse/migration_workflow/#glimpsemigrationid","title":"GlimpseMigrationId","text":"<p>During the migration process, the screen that implements <code>Hawkeye.Target</code> will require returning a <code>GlimpseMigrationId</code>. This ID helps in enabling/disabling the new implementation for specific pages via configs. If a screen supports both the new (Hawkeye) and the old (v2) implementations, make sure to update the AnalyticsSection in the old implementation to pass the <code>GlimpseMigrationId</code> also. This allows disabling the old events if the new implementation is enabled (preventing duplicate events from sending).</p>"},{"location":"features/glimpse/migration_workflow/#migrating-an-existing-page","title":"Migrating an Existing Page","text":"<p>Due to the complexity of the migration, several tools can be used to verify and test the new implementation for a given page.</p>"},{"location":"features/glimpse/migration_workflow/#1-enable-charles","title":"1) Enable Charles","text":"<p>This will allow you to see events being sent to the validation endpoint.</p> <p></p>"},{"location":"features/glimpse/migration_workflow/#2-enable-jarvis-toggles-under-glimpse-section","title":"2) Enable Jarvis Toggles (under Glimpse section)","text":""},{"location":"features/glimpse/migration_workflow/#enable-hawkeye-validation","title":"Enable Hawkeye validation","text":"<p>This toggle enables the FED validation endpoint in Charles for the new implementation and also enables the GlimpseIntegrationValidator. This class compares the events of the new implementation with the events of the old implementation to ensure consistency and identify any potential issues.</p>"},{"location":"features/glimpse/migration_workflow/#enable-hora-validation","title":"Enable Hora validation","text":"<p>This toggle enables the new EDS (engineering data strategy) service. This service \"is used to validate events from the various Disney streaming applications with the goal of making sure the data is of high quality. Hora uses an aggregate validation system, sending the same event to multiple downstream services to verify that the data is acceptable.\" Hora performs a series of checks on the events and returns a list of successful and unsuccessful validations.</p>"},{"location":"features/glimpse/migration_workflow/#3-add-the-glimpsemigrationid-to-the-analyticsection-legacyv2","title":"3) Add the GlimpseMigrationId to the AnalyticSection (legacy/v2)","text":"<p>Ensure you have added the GlimpseMigrationId for the page you are updating to its legacy <code>AnalyticsSection</code>. The legacy Glimpse implementation has Fragments implement the <code>AnalyticsStateProvider</code> or <code>RxAnalyticsStateProvider</code> to provide details about the page being tracked.</p> <pre><code>override fun getAnalyticsSection(): AnalyticsSection =\n        AnalyticsSection(\n            pageName = AnalyticsPage.WELCOME.pageName,\n            glimpseV2PageName = PageName.PAGE_WELCOME,\n            pageId = \"welcome\",\n            pageKey = \"welcome\",\n            glimpseMigrationId = GlimpseMigrationId.WELCOME\n        )\n</code></pre>"},{"location":"features/glimpse/migration_workflow/#4-add-the-glimpsemigrationid-to-supportedglimpsehawkeyepages-in-glimpseconfig","title":"4) Add the GlimpseMigrationId to supportedGlimpseHawkeyePages in GlimpseConfig","text":""},{"location":"features/glimpse/migration_workflow/#supportedglimpsehawkeyepages","title":"supportedGlimpseHawkeyePages","text":"<p>The <code>supportedGlimpseHawkeyePages</code> is a list of string representations of GlimpseMigrationIds for which Hawkeye should be used. If added to this list, the old Glimpse implementation will not be used. This allows us to enable and disable the new implementation on a per-screen basis.</p> <pre><code> private val supportedGlimpseHawkeyePages: List&lt;GlimpseMigrationId&gt;\n        get() = listOf(\n            GlimpseMigrationId.PLAN_SELECTOR,\n            GlimpseMigrationId.CHANGE_SUBSCRIPTION,\n            GlimpseMigrationId.CUSTOMER_SERVICE,\n            GlimpseMigrationId.DATA_USAGE_TV,\n            GlimpseMigrationId.DOB_ENTER\n         )\n</code></pre>"},{"location":"features/glimpse/migration_workflow/#disabledglimpsehawkeyepages","title":"disabledGlimpseHawkeyePages","text":"<p>This is an additional config that can be used so that we are able to turn off Hawkeye on specific pages. There may be occasions where we may need to temporarily rollback the new framework on a page if there are issues in production. When a GlimpseMigrationId is added to this list, the legacy Glimpse implementation will be used instead (assuming the page supports it).</p>"},{"location":"features/glimpse/migration_workflow/#5-implement-glimpse-events","title":"5) Implement Glimpse Events","text":"<p>Following the documentation outlined here. Add the necessary Glimpse events for a screen.</p>"},{"location":"features/glimpse/migration_workflow/#6-test-the-implementation","title":"6) Test the Implementation","text":"<ul> <li>Run the app and navigate to the screen you've added events for.</li> <li>Perform whatever actions you may need to trigger the events (scrolling, clicking, etc).</li> <li>Navigate away from the screen being tested (ideally via an interaction event)</li> <li>When you navigate away from the current screen being tested to another screen, both the <code>GlimpseIntegrationValidator</code> (local) and the Hora validation (remote) will perform their checks (assuming they are both enabled). If there are any errors a notification will pop up on the device.</li> <li>Hora will perform the validation on all Glimpse events between two pageViews. <code>| pageView -&gt; containerViews -&gt; interaction -&gt; pageView |</code></li> <li>The debug logs are also helpful when testing and may provide more context.</li> </ul> <ul> <li>Clicking \"Share Report\" will allow you to copy or share the report. Below is an example:</li> </ul> <pre><code>Glimpse Validation Report:\nMetrics:\n  - 3 total errors\n  - 2 pages with errors\n  - 3 unique pages\nFindings:\ncollection:pixar\n  - com.bamtechmedia.dominguez.analytics.glimpse.hawkeye.validator.GlimpseValidationError$GeneralEventError$MissingEvents@a6ccd4\ncollection:home\n  - MismatchContainerView(containerKey=fdbaabd5-aefc-4397-bc33-ef4e4f3f7ccf, fieldsNotEqual=[elements], fieldsOnlyInHawkeye=[], fieldsOnlyInV2=[])\n  - UnknownContainerView(containerKey=fdbaabd5-aefc-4397-bc33-ef4e4f3f7ccf)\nApp Version: 2.7.local-dev\n</code></pre> <p>It may not be obvious which container the error message belongs to. For instance, on Collection pages (Discover, Landing, Brand, etc) a collection's container keys are a unique id. If that is the case, Pluck can be used to identify the container. Just plug in the containerKey from the error message.</p> <p>This validation and report is continually being improved. It is not perfect but it does help quickly identify and catch potential issues with the new implementation. The goal is to eventually automate this and use these checks in tests.</p>"},{"location":"features/glimpse/requirements/","title":"Requirements","text":"<p>As the requirements for various Glimpse events are spread out amongst various DGI tickets, this is an effort to consolidate them in one place.</p>"},{"location":"features/glimpse/requirements/#impression","title":"Impression","text":"<p>An event that tracks what the user sees. Tracked as <code>pageView</code> and <code>containerView</code> events.</p>"},{"location":"features/glimpse/requirements/#pageview","title":"PageView","text":"<p>The schema for a pageView event can be found here.</p> <ul> <li>A pageView event fires when a screen immediately starts loading.</li> <li>A pageView event fires when changing the orientation results in updates to the layout. If the layout does not change, then a new pageView should not fire.</li> <li>A pageView event fires when a user returns to a screen they were previously on (i.e. back nav or returning to 'Home').</li> <li>A pageView event fires when the app is foreground (from the background). At this point, any visible containerViews should also re-impress with the new pageViewId.</li> <li>A pageView event fires only for the currently visible and topmost screen. If a screen contains an overlay. The overlay pageView and subsequent events should fire first. Once the overlay is dismissed then the bottom screen should fire its events.</li> <li>A pageView is the first event that should fire when a new screen loads. containerViews, interactions, and input events should always come after the pageView. A pageView will have a timestamp property appended to it, this timestamp should always be earlier than any of the pages other events (containerView, interaction, etc).</li> <li>A pageView event fires each time a video player screen loads, regardless of how a user landed on the video (i.e. clicking play button, deeplink, autoplay, etc.)</li> <li>A pageView event will always be followed by at least 1 containerView</li> <li>A pageView's pageViewId is randomly generated and must be unique forever.</li> <li>A pageView's pageViewId needs to be reused in subsequent events (containerView, interaction, etc) within the same page instance</li> <li>A pageView's pageViewId must be regenerated whenever a new pageView event occurs</li> </ul>"},{"location":"features/glimpse/requirements/#containerview","title":"ContainerView","text":"<p>The schema for a containerView event can be found here.</p> <ul> <li>A containerView event should fire when any part of an element (&gt;= 1 pixel up to 100% present) is on the page (even if it's not clickable).</li> <li>A containerView event should fire again when a user returns to a screen they were previously on (i.e. back nav or returning to 'Home').</li> <li>A containerView should include an array <code>elements</code> which gives details on the current Elements being shown. This should include both Elements that are only peeking (1 pixel) as well as Elements that are 100% in view</li> <li>A containerView event will only fire the first time the element comes into view on a page (peeking or fully visible).</li> <li>A containerView event should fire for each containerView that is scrolled by even if the user scrolls very fast in a short amount of time (i.e. user swipes to bottom of page quickly, containerViews should fire for each item scrolled by, regardless of speed).</li> <li>A containerView event should fire if the contents/elements of a container change. For example, on search as the user types into the search bar if the elements in the search results are changing, then a new containerView should fire each time it updates/changes.</li> <li>A containerView event should fire when additional elements are loaded into a container. For example, if a user scrolls horizontally on a container and additional elements are loaded in async, a containerView should fire with the new array of elements.</li> <li>A containerView should only fire once on a page, if the user scrolls up and down on a page, only track the first impression.</li> <li>A containerView event should always fire after the initial pageView event for a given page. The containerView timestamp should come after the timestamp of the pageView event.</li> <li>A containerView for a carousel item should only fire when that hero element is in the user's viewport and is considered a \"new\" element (the user has not previously seen it). If the user has already seen the same hero tile during a specific pageView instance, a new containerView should not fire (i.e. there should be no re-impressions, so each tile in the hero will only fire once for that pageView instance).</li> <li>A containerView's containerViewId is randomly generated and must be unique forever.</li> <li>A containerView's containerViewId needs to be reused in subsequent events (interaction, input, etc) within the same page instance.</li> <li>A containerView's containerViewId must be regenerated if a page reloads or the user comes back to a page they were previously on.</li> </ul>"},{"location":"features/glimpse/requirements/#engagement","title":"Engagement","text":"<p>An event that tracks an action implicitly taken by a user (ie a button click). Tracked as an <code>interaction</code> or <code>input</code> event</p>"},{"location":"features/glimpse/requirements/#interaction","title":"Interaction","text":"<p>The schema for interaction events can be found here.</p> <ul> <li>An interaction event should fire whenever the user interacts with an <code>Element</code>, not Containers or Pages. For example, clicking, focusing, deeplinking or even hitting the back button.</li> <li>An interaction event should always contain the containerViewId that corresponds to the containerView instance of the element that was interacted with.</li> </ul>"},{"location":"features/glimpse/requirements/#input","title":"Input","text":"<p>The schema for input events can be found here.</p> <ul> <li>An input event should fire whenever the user types into the app (search, profile edits) or changes the state of a checkbox or toggle.</li> <li>An input event should only be fired once the user stops typing for a certain amount of time (200ms).</li> <li>An input event should always contain the containerViewId that corresponds to the containerView instance of the element that was interacted with.</li> </ul>"},{"location":"features/imax/","title":"IMAX","text":"<p>Disney has partnered with IMAX to provide specific titles in a new \"IMAX Enhanced\" version in Disney+. This version will exist side-by-side with the \"standard\" or widescreen version. IMAX variant will only be available for movies, not series.</p> <p></p> IMAX Version <p></p> Widescreen Version <p>How to check if IMAX variant is available</p> <p>Example of a video with a default 16x9 and an IMAX variant:</p> <pre><code>{\n  \"type\": \"DmcVideo\",\n  \"mediaMetadata\": {\n    \"facets\": [{\n      \"label\": \"default\",\n      \"activeAspectRatio\": 2.39\n    },\n    {\n      \"label\": \"ImageAspectRatio=190\",\n      \"activeAspectRatio\": 1.90\n    }]\n  }\n}\n</code></pre> <p>Here <code>\"label\": \"ImageAspectRatio=190\"</code> indicates an IMAX version. In <code>PlayableImaxCheckImpl.kt</code> class, the <code>hasImax</code> method is used to determine if a movie has IMAX support and this is also the place where the feature flag is being checked. And, if needed, you only have to inject the <code>PlayableImaxCheck.kt</code> interface. Also the visibility of all IMAX related components (badges, promo labels, versions tab &amp; on detail tab) is based on the <code>hasImax</code> check.</p> <pre><code>/**\n * Helper class to determine if the given [Playable] has IMAX support while taking the feature / debug flags from\n * [ImaxConfig] into account.\n */\nclass PlayableImaxCheckImpl @Inject constructor(private val imaxConfig: ImaxConfig) : PlayableImaxCheck {\n\n    /**\n     * Method to check if given [playable] has IMAX feature support. Note that this is protected by the\n     * 'contentDetail.isImaxEnabled' feature flag.\n     */\n    override fun hasImax(playable: Playable): Boolean =\n        imaxConfig.isImaxEnabled &amp;&amp; playable is Movie &amp;&amp; playable.hasFacetWithLabel(imaxConfig.imaxFacetLabel)\n}\n</code></pre>"},{"location":"features/imax/#imax-ui-indications","title":"IMAX UI indications","text":""},{"location":"features/imax/#versions-tab","title":"Versions Tab","text":"<p>If a movie is available in IMAX version then its Details screen should show the new Versions tab that will contain previews for both the IMAX Enhanced version and the widescreen version of the film.</p> Versions Tab <p></p> <p>The implementations of <code>DetailsTabHelper.kt</code> interface is used for creating tabs on the Details page and for Versions tab, <code>VersionsTabHelper.kt</code> is the implementation class. This tab will contain playable item for both IMAX and widescreen versions. The item UI is different on mobile than that for TV so there are separate presenters each, <code>DetailVersionMobilePresenter.kt</code> and <code>DetailVersionTvPresenter.kt</code>. Furthermore, have separate Playable item for mobile and TV, <code>DetailPlayableMobileItem.kt</code> and <code>DetailPlayableTvItem.kt</code> respectively. When any version is clicked, the <code>onPlayableClick</code> method of <code>PlayableItemHelperImpl.kt</code> is called and along with <code>Playable</code> and <code>DetailAnalyticsInfo</code> , <code>PlaybackOrigin</code> data is passed to this method. And, depending on <code>PlaybackOrigin</code> value the playback preference is set, whether to play the content in IMAX or Widescreen version. Also, for both version items the movie <code>Playable</code> will be same and hence there isn't a separate bookmark for each version. More info about playback preference in IMAX Playback preference section.</p>"},{"location":"features/imax/#badge","title":"Badge","text":"<p>If a title is available in IMAX variant, the IMAX enhanced badge should be present in the metadata row on the Details Page, as well as in the 'Available formats' section in Details Tab.</p> <p>Badge placement rules</p> <ul> <li>If an IMAX badge is available and more than 2 badges, wrap metadata text to the next line.</li> <li>The IMAX badge should always be displayed first, before the HD or 4K Ultra HD badges and before the Dolby badge (if applicable).</li> <li>Suppress additional badges if Dolby Vision badge is present (mobile and tablet only).</li> </ul> IMAX badge IMAX badge in header IMAX badge in the Details tab <p>If DolbyVision and IMAX are both available, other additional badges should be removed(mobile and tablet only).</p> Additional badges visibility <p></p>"},{"location":"features/imax/#promo-label","title":"Promo Label","text":"<p>For a title that is available in IMAX Enhanced then IMAX promo label should be shown in Details Page header. However if there is any other promo label or premier access block, the IMAX promo label should not be visible. For example, if a \"Coming Soon\" label exists for the title, the \"Coming Soon\" label should be shown.</p> IMAX Enhanced promo label <p></p> <p>See <code>getPromoLabel</code> method of <code>DetailPromoLabelPresenter.kt</code> for promo label logic.</p>"},{"location":"features/imax/#imax-playback-preference","title":"IMAX Playback preference","text":"<p>The playback preference is whether the content should be played in IMAX version or default version and is dependent on from where the playback is initiated. Updating the preference should be done prior to playback and only if the current preference is different than the new preference. So for any title that is available in IMAX Enhanced should play the IMAX version by default when the Play button is pressed. If user has started playback in Widescreen version via the Versions tab, any Resume actions should playback the Widescreen version for that title likewise below table shows preference based on playback entry scenarios. See more information about toggle preference in this presentation</p> IMAX playback preference <p></p> <p>The <code>PlaybackOrigin.kt</code> is an enum class with types to identify from where the media playback is initiated and have a lambda to determine playback preference(IMAX, Widescreen, Unchanged). The <code>playbackOrigin</code> value is passed to <code>SessionStarter.kt</code> for setting the playback preference(boolean <code>preferImaxEnhanced</code>). So, when triggering the <code>ImaxPreferenceApi.updateImaxPreference</code> method, it will hit the <code>graphApi</code> to update the <code>PlaybackSetting.preferImaxEnhanced</code> attribute and the updation will only happen if the new preference differs from the current profile preference. Once that request is finished, the <code>mediaApi</code> could be hit to fetch the updated media. See the implementation in <code>ImaxPreferenceApiImpl.kt</code> class.</p>"},{"location":"features/imax/#imax-download","title":"IMAX Download","text":"<p>When a user triggers a download request for an asset that has IMAX support, the IMAX profile preference should be updated to IMAX. That request should be completed before it fetches the media item with the MediaApi, which means that the movie will always be downloaded in IMAX format. <code>Downloadable</code> content is stored in a database, which is built on the <code>OfflineItem</code> entity. Normally, the <code>PlayableImaxCheck.hasImax(playable)</code> takes the <code>mediaMetadata</code>(see above JSON) from the playable to check whether the asset has IMAX support or not. The <code>OfflineItem</code> doesn't store the <code>mediaMetadata</code>, so <code>hasImax</code> has been added to the <code>DownloadState</code> object, which is stored as part of OfflineItem in the database.</p> <p>Download flow for content with IMAX support</p> <p>1)So whenever the user clicks on the download button, it will convert the asset to an OfflineItem instance; see <code>Downloadable.asOfflineItem</code> method in <code>OfflineContentStoreImpl.kt</code></p> <p>2)Check if it has IMAX support using <code>PlayableImaxCheck.hasImax(playable)</code> and stores that value into the <code>DownloadState.hasIMAX</code>; see <code>Downloadable.initialDownloadState()</code> method in <code>OfflineContentStoreImpl.kt</code></p> <p>3)Pass <code>hasImax</code> boolean to <code>DownloadSdkInteractor</code> <code>startDownload</code> and <code>predictedMediaSizeOnce</code>; see <code>DownloadsSdkInteractorImpl.kt</code></p> <p>4)Update playback preference; see <code>getMedia</code> in <code>DownloadsSdkInteractorImpl.kt</code></p>"},{"location":"features/imax/#feature-info","title":"Feature Info","text":""},{"location":"features/imax/#availability","title":"Availability","text":"Availability  Disney+  Star+  Mobile  TV  Regions  All regions"},{"location":"features/imax/#how-to-test","title":"How to test","text":"<p>Currently this feature is protected by a feature flag <code>contentDetail.isImaxEnabled</code>.</p> <ul> <li>On QA env, Black Panther and Avenger Endgame are the movies with IMAX support.</li> <li>On PROD env, a selection of Marvel movies already has IMAX Support, like Avengers Endgame.</li> </ul> <p>IMAX enabled in Prod: 11/11/2021.</p>"},{"location":"features/imax/#product-tickets","title":"Product Tickets","text":"<ul> <li>Jira link to IMAX tickets</li> </ul>"},{"location":"features/imax/#designs","title":"Designs","text":"<ul> <li>Mobile Zeplin specs</li> <li>Tablet Zeplin specs</li> <li>TV Zeplin specs</li> <li>FEDSA doc</li> </ul>"},{"location":"features/instrumentation-tests/","title":"Instrumentation Tests","text":""},{"location":"features/instrumentation-tests/#description","title":"Description","text":"<p>A set of tools, patterns, and guidelines related to instrumentation tests were designed to help developers in their day-to-day work and ultimately deliver higher-quality builds to QA.</p> <p>Having our Instrumentation Test Suite as part of the development workflow helps developers with some of the daily challenges they face. Two main points where these tests should play a significant role:</p> <ul> <li> <p>Fewer regressions: In addition to Unit Tests, they provide quicker feedback about new regressions introduced in the project, including in other apps that share the same code.</p> </li> <li> <p>Safety net for refactoring: These tests allow developers to have a safety net to add new features and apply refactoring where needed with greater confidence that existing functionality will not be affected.</p> </li> </ul>"},{"location":"features/instrumentation-tests/#walkthrough","title":"Walkthrough","text":"<p>This file contains instructions on how to create and run instrumentation tests for Disney+ and Star+ on all supported Android platforms: Google Mobile, Google TV, Fire Stick TV (Amazon TV), Fire Hd Tablet (Mobile Amazon).</p>"},{"location":"features/instrumentation-tests/#directory-architecture","title":"Directory Architecture","text":"<p>The first important thing to know is how instrumentation tests process is architected. In this case, we have three main modules to work with:</p> <ul> <li> <p>mobile: Folder which contains all mobile class tests</p> </li> <li> <p>tv: Folder which contains all TV class tests</p> </li> <li> <p>coreAndroidTest: Folder which contains screen, launcher and config classes.  </p> </li> </ul> <p>About the test flow, we are going to work with three main types of classes, which you will probably create or reuse:</p> <ul> <li> <p>Launcher Classes: Responsible for bringing the app to the point where the test should start</p> </li> <li> <p>Screen Classes: Represent a specific screen</p> </li> <li> <p>Test Classes:  Responsible for setting up some configs and running the tests</p> </li> <li> <p>R2D2, Stubs and extension classes: Classes that will help with additional configurations</p> </li> </ul> <p>Don't worry. We are going to explain all these classes in details.  </p> <p></p>"},{"location":"features/instrumentation-tests/#coreandroidtest-directory","title":"CoreAndroidTest Directory","text":"<p>This folder contains all Launcher, Screen and configuration classes that we are going to use in our tests. They are:</p>"},{"location":"features/instrumentation-tests/#screen-classes","title":"Screen Classes:","text":"<p>This class represents a real app screen (fragment/activity/layout) and it is responsible for all the assertions and interactions with this screen. For example, if you need to tap a button, move the cursor, change focus, navigate inside the screen or any other interaction with this layout's components, this type of class will take care of that. To build a screen class, first you will need to define the root screen id on init block or constructor of the class. After that you can start to write the functions that will interact with the screen. Also, each function that you write will have to return the screen class itself or the destination screen class in case you are navigating to other screen.</p> <pre><code>@Suppress(\"MagicNumber\", \"TooManyFunctions\")\nclass EditProfileScreen {\n\n    init {\n        withId(R.id.editProfileRootView).waitUntilIsDisplayed(10L)\n    }\n\n    /**\n     * Checks if the keyboard is showing, and closed it.\n     */\n    fun closeKeyBoardIfShown(): EditProfileScreen {\n        if (isKeyboardShown(true)) pressDpadBack()\n        return this\n    }\n\n    /**\n     * Asserts that the provided [profileName] is the currently entered input on the edit profile editText.\n     */\n    fun enterProfileName(profileName: String): EditProfileScreen {\n        withId(R.id.editFieldEditText).waitUntilIsDisplayed().perform(\n            replaceText(profileName),\n            closeSoftKeyboard()\n        )\n        return this\n    }\n\n    /**\n     * Asserts that the provided [profileName] is the currently entered input on the edit profile editText.\n     */\n    fun assertProfileNameInputEntered(profileName: String): EditProfileScreen {\n        withId(R.id.editFieldEditText).waitForExpectedCopy(profileName)\n        return this\n    }\n}\n</code></pre>"},{"location":"features/instrumentation-tests/#launcher-classes","title":"Launcher Classes:","text":"<p>This type of class is responsible for moving the app to the starting point of your test. For example, if you have to test the login flow, the LoginFlowLauncher class will be responsible for navigating to the login screen as quickly and simply as possible, so you can test the login flow. To build this class you will need to pass the destination screen class to test as type parameter of \"AndroidTestLauncher&lt;&gt;\" which you will inherit on your launcher class. You will have to override the <code>startingPoint</code> function that will reuse existing screen classes to navigate the application to the desired screen and then return this screen at the end. You also can set up configurations with R2D2 to mock api calls performed in the middle of this process and start at a specific point in the app. Your launcher may or may not start at the usual start of the app (usual start it is the user start, starting at welcome screen and following through login flow). For example, you can start on welcome flow passing through the login flow, or you can start already on home screen. It depends on your configuration and goals. Example: you need to test the profile screen, so you will set up R2D2 configuration to mock an already logged in user and start at home screen (or at profile picker screen in case of TV tests), select the desired profile, click on edit and entering the edit profile class. Then you can do the tests you want.</p> <pre><code>class EditProfileLauncher : AndroidTestLauncher&lt;EditProfileScreen&gt;() {\n\n    override val commonTestSetupTeardowns: Array&lt;ITestSetupTearDown&gt;\n        get() = arrayOf(\n            R2D2SetupLoginSuccess(\"v1/public/graphql/login_with_multiple_profiles.json\"),\n            R2D2SetupPaywall(AccountEntitlementContext.AccountActiveEntitlement())\n        )\n\n    override fun startingPoint(): EditProfileScreen =\n        ProfilePickerScreen()\n            .pressDpadDown() //Change focus to the edit profile button on who is watching\n            .pressDPadEnterSelectingProfileAndLandOnSelectProfile() //Press enter on  button and land on SelectProfile.\n            .pressDPadEnterSelectingProfileAndLandOnEditProfile() //Press enter on profile and land on EditProfileScreen\n}\n</code></pre>"},{"location":"features/instrumentation-tests/#r2d2-framework","title":"R2D2 Framework:","text":"<p>R2D2 is a network mocking framework that help us to simulate API calls and return the desired response needed on our tests. You will read some tips on how to use it here. However, if you want to read and understand more about it (which is strongly recommended), you can find the full R2D2 documentation here: R2D2 Framework You can use R2D2 in your launcher class to simulate an activated user, an user session and a lot of other configurations to make the application start at the desired point with the desired setup. For example:</p> <pre><code>override val commonTestSetupTeardowns: Array&lt;ITestSetupTearDown&gt;\n        get() = arrayOf(\n            R2D2SetupLoginSuccess(\"v1/public/graphql/login_with_multiple_profiles.json\"),\n            R2D2SetupPaywall(AccountEntitlementContext.AccountActiveEntitlement())\n        )\n</code></pre> <p>R2D2 can be used to stub responses in the middle of tests. For example:</p> <pre><code>@Test\nfun addNewProfileTest() {\n    launcher.launchAndNavToStartingPoint()\n        .selectEditProfilesButtonWithDpad()\n        .selectAddProfileWithDpad()\n        .tapSkipAvatarIconSelectionWithDpad()\n        .enterProfileName(NEW_PROFILE_NAME)\n        .r2d2 {\n            givenRequestInvoked(\"/v1/public/graphql\")\n                .whenPartialVariablesMatch(mapOf(\"operationName\" to \"createProfile\"))\n                .thenRespondWithFile(\"profiles/create_profile_response.json\")\n        }\n        .doneEditProfileWithDpad()\n        .assertProfileWithNameExists(NEW_PROFILE_NAME)\n}\n</code></pre> <p>For more information on what is possible with R2D2, please check the documentation.</p>"},{"location":"features/instrumentation-tests/#stubappconfigvalue-classes","title":"StubAppConfigValue Classes:","text":"<p>These classes override any value in the config to return an override setup for the provided configuration. With them, you can override time zone, geographic locations, user configs, payment status, account configuration and lots of other parameters. You will read some tips on how to use it here. However, if you want to read and understand more about it (which is strongly recommended), you can find the full Config documentation here: Config Docs You can use the StubAppConfigValue mostly on Test classes, to set up the configurations for your tests. For example:</p> <p>Stub to restrict UIDevice focus to the selected component:</p> <pre><code>StubAppConfigValue(true, \"focus\", arrayOf(\"useInputTextOnKeyListener\"))\n</code></pre> <p>Stub to set up paywall status:</p> <pre><code>StubAppConfigValue(true, \"session\", arrayOf(\"requestPaywallInMeQuery\"))\nStubAppConfigValue(true, \"session\", arrayOf(\"requestPaywallInRegisterMutation\"))\nStubAppConfigValue(true, \"session\", arrayOf(\"requestPaywallInLoginMutation\"))\n</code></pre> <p>Stub to set up the geography location:</p> <pre><code>StubAppConfigValue(\"US\", \"contentApi\", arrayOf(\"X-GEO-OVERRIDE\"))\n</code></pre> <p>Usage example:</p> <pre><code>@Test\nfun firstTimeUser_isTakenToPaywallUponRegistration_debugDictEnabled_withoutPaywallHash() {\n    launcher.launchAndNavToStartingPoint(\n        StubAppConfigValue(\n            true,\n            \"dictionaries\",\n            arrayOf(\"debugDictionaryEnabled\")\n        ),\n        R2D2SetupPaywall(\n            AccountEntitlementContext.AccountNeverEntitled(),\n            if (testBuildInfo.isAmazon) \"paywall/paywall_account_never_entitled_no_paywallhash_amazon.json\" else\n                \"paywall/paywall_account_never_entitled_no_paywallhash.json\"\n        ),\n        StubAuthFlow(AuthFlow.REGISTER),\n        R2D2StubLegalSiteConfig(),\n        StubAppConfigValue(true, \"focus\", arrayOf(\"useInputTextOnKeyListener\")),\n        R2D2StubRegisterFlow(),\n        R2D2BaseUnauthStubbing(),\n    )\n        .tapSignupButton()\n        .enterEmailOnTv(\"newuseremail@myemail.com\")\n        .tapContinueToGoToSignUpPasswordScreen()\n        .enterPasswordOnTV(\"Test123!\")\n        .tapContinueButtonAndLandOnPaywallScreen()\n        .assertPaywallScreenIsDisplayedDictKeysEnabled()\n        .assertCorrectPricesOnMonthlyButtonDictKeysEnabled()\n        .assertCorrectPricesOnYearlyButtonDictKeysEnabled()\n        .assertCorrectPricesOnYearlyButtonDictKeysEnabled().run {\n            if (testBuildInfo.isAmazon) {\n                assertYearlySubCtaTextNotDisplayedDictKeysEnabled()\n            } else {\n                assertCorrectPricesOnYearlySubCtaTextDictKeysEnabled()\n            }\n        }\n}\n</code></pre>"},{"location":"features/instrumentation-tests/#mobile-tv-directory","title":"Mobile &amp; Tv Directory","text":"<p>This folder contains all mobile and tv Test classes for both Amazon and Google platforms.</p>"},{"location":"features/instrumentation-tests/#test-classes","title":"Test Classes:","text":"<p>All classes are placed in their respective directories. <code>tv</code> module includes testing for both Google and Amazon STB devices. <code>mobile</code> module holds testing for both Google mobile devices and Amazon tablets. To run tests for Google or Amazon just change the <code>BuildVariant</code>. All the settings are ready for that so don't worry about it. To write test classes, it is recommended to follow the following architecture and patterns: First, you will create a test class which will inherit from \"AndroidTestBase\". With that, your class will have access to the launcher property, that you will need to override passing an instance of a specific launcher class related to your new test class. Also, you have to add <code>@HiltAndroidTest</code> and <code>@RunWith(AndroidJUnit4::class)</code> annotations to the scope of your class. After all the setup described above, you can write your first test function. It must start with the launcher function initialization to which you can pass all needed pre-configuration such as R2D2 mocking and Stubs. Then, with the screen class returned from the launcher function, you can start to write the actual test. Finally, the new test class will look like this:</p> <pre><code>@HiltAndroidTest\n@RunWith(AndroidJUnit4::class)\nclass EditProfileTest : AndroidTestBase() {\n\n    @BindValue\n    @JvmField\n    val preAuthenticatedTest: AutoLoginTestSetup =\n        AutoLoginTestSetup(username = \"vwmattr+03022021@gmail.com\", password = \"Test123!\")\n\n    override val launcher = EditProfileLauncher()\n\n    @Test\n    fun testFocusOnEditProfile() {\n        launcher.launchAndNavToStartingPoint(\n            StubAppConfigValue(true, \"focus\", arrayOf(\"useInputTextOnKeyListener\"))\n        )\n            .closeKeyBoardIfShown()\n            .pressDoubleDownIfNeeded()\n            .assertPositionOnRecycleHasFocus(1)\n            .pressDpadDown()\n            .assertPositionOnRecycleHasFocus(2)\n            .pressDpadDown()\n            .assertPositionOnRecycleHasFocus(3)\n            .pressDpadDown()\n            .assertPositionOnRecycleHasFocus(4)\n    }\n}\n</code></pre>"},{"location":"features/instrumentation-tests/#autologintestsetup","title":"AutoLoginTestSetup","text":"<p>This class, in combination with com.bamtechmedia.dominguez.config.TestDevConfig_AppModule], provides a mechanism to 'auto login' users from instrumentation tests.</p> <p>The test module <code>com.bamtechmedia.dominguez.config.TestDevConfig_AppModule</code> declares a <code>dagger.BindsOptionalOf</code> binding for this class. Tests that don't need to go through the login flow can declare a <code>dagger.hilt.android.testing.BindValue</code> which binds an instance of <code>AutoLoginTestSetup</code>.</p> <p>When the app starts, <code>com.bamtechmedia.dominguez.auth.autologin.DevConfigAutoLogin.credentialsMaybe</code> emits the provided credentials and the user will be automatically logged into the app.</p> <pre><code>@HiltAndroidTest \n@RunWith(AndroidJUnit4::class)\nclass LogOutFlowTest : AndroidTestBase() {\n\n    override val launcher = LogOutFlowLauncher()\n\n    @BindValue\n    @JvmField\n    val preAuthenticatedTest: AutoLoginTestSetup = AutoLoginTestSetup()\n\n    @Test\n    fun logOutFlow() {\n        launcher.launchAndNavToStartingPoint()\n            .logOutUser()\n\n        withId(R.id.welcomeButtonSignUp).waitUntilIsDisplayed()\n    }\n}\n</code></pre>"},{"location":"features/instrumentation-tests/#environmentoverridetestsetup","title":"EnvironmentOverrideTestSetup","text":"<p>This class allows developers to choose the Environment which tests should run against.</p> <p>Now that we have tests for both apps, Disney+ and Star+, a specific override of <code>com.bamtechmedia.dominguez.sdk.EnvironmentConfig</code> needs to be provided. The logic to determine which environment and app the test is using is part of <code>com.bamtechmedia.dominguez.di.TestSdk_AppModule.environmentConfigOverride</code> method.</p> <p>The test module <code>com.bamtechmedia.dominguez.di.TestSdk_AppModule</code> declares a <code>dagger.BindsOptionalOf</code> binding for this class. Given that, you can define the environment to be used in your tests declaring an instance of <code>EnvironmentOverrideTestSetup</code> with the desired environment.</p> <p>Info</p> <p>Note: When not declared, QA will be used as default environment.</p> <pre><code>class SmokeTest {\n\n      @BindValue\n      @JvmField\n      val environmentConfigTestSetup: EnvironmentOverrideTestSetup = EnvironmentOverrideTestSetup(\"prod\")\n\n      @Test\n      fun testMethod() { /* ...*/ }\n\n  }\n</code></pre>"},{"location":"features/instrumentation-tests/#androidtestfilter","title":"AndroidTestFilter","text":""},{"location":"features/instrumentation-tests/#androidtestfilter_1","title":"AndroidTestFilter:","text":"<p>Used to determine for which <code>Project</code> any given test/test class should be executed.</p>"},{"location":"features/instrumentation-tests/#nightlytestfilter","title":"NightlyTestFilter:","text":"<p>Filter used to determine if a test should be executed or not. This allows developers to tell CI and the Nightly build which tests are supported, and therefore, should run for a specific <code>Project</code>.</p> <p>To run a test on a single <code>Project</code>, e.g. <code>Project.STAR</code>, you need to add <code>AndroidTestFilter</code> to a test method or Test class:</p> <pre><code> @AndroidTestFilter(runTestFor = [Project.STAR])\n class WelcomeScreenTest : AndroidTestBase() { ... }\n</code></pre> <p>Test method:</p> <pre><code> @Test\n @AndroidTestFilter(runTestFor = [Project.STAR])\n fun marketSetupSuccess_showsSignUpScreen() { ... }\n</code></pre>"},{"location":"features/instrumentation-tests/#conclusion","title":"Conclusion","text":"<p>Wrap-up:</p> <ol> <li>Write the test class which will use launcher classes to navigate to the starting point of your test.</li> <li>Pass pre-configuration parameters for mocking and stubbing.</li> <li>Use screen classes to test assertions and interact with the screen (fragment/activity) to be tested.</li> <li>Set up Autologin, if required.</li> <li>Define whether is a <code>Project.STAR</code> test and/or <code>Project.Disney</code> test, setting up the @AndroidTestFilter</li> </ol>"},{"location":"features/instrumentation-tests/faq_troubleshooting/","title":"FAQ/Troubleshooting","text":""},{"location":"features/instrumentation-tests/faq_troubleshooting/#creating-instrumented-tests-for-different-languagelocale","title":"Creating instrumented tests for different language/locale","text":"<p>It's important to be able to run instrumentation tests in several languages, amongst others to know whether translations will fit within the expected UI. In order for that to work properly, a couple of steps need to be taken:</p>"},{"location":"features/instrumentation-tests/faq_troubleshooting/#globalization","title":"Globalization","text":"<p>Before logging in and for the dictionaries call, the application follows the language passed via globalization, even if the phone ui is set to a different one. So we need to stub it:</p> <pre><code>r2d2Config.givenRequestInvoked(\"/v1/public/graphql\")\n    .whenAggressiveMatch(ExpectedAggressiveMatch(\"query\", \"globalization\"))\n    .thenRespondWithFile(globalizationPath, replaceExisting = true)\n</code></pre>"},{"location":"features/instrumentation-tests/faq_troubleshooting/#loginprofile","title":"Login/Profile","text":"<p>After logging in, it follows the ui language set to the profile json, not depending entirely on globalization anymore, so a profile with the desired <code>appLanguage</code> should be present and selected in the login stub:</p> <pre><code>R2D2SetupLoginSuccess(\"v1/public/graphql/login_with_pt_profile.json\")\n</code></pre>"},{"location":"features/instrumentation-tests/faq_troubleshooting/#emulatordevice","title":"Emulator/Device","text":"<p>This is not a required change since we can change the device location via config with StubAppConfigValue</p> <pre><code>StubAppConfigValue(\"BR\", \"contentApi\", arrayOf(\"X-GEO-OVERRIDE\"))\n</code></pre> <p>And if needed/wanted you can change your emulator locale inside settings. If running on firebase test lab, <code>locale</code> can be configured the same as <code>model</code> and api <code>version</code>, but tests with different languages would need a different emulator from the others. Check build.gradle <code>devices</code> section for example.</p>"},{"location":"features/instrumentation-tests/faq_troubleshooting/#example","title":"Example","text":"<p>A good test that can be used for reference is SearchKoreanKeyboardTest</p>"},{"location":"features/instrumentation-tests/faq_troubleshooting/#todo-android-5096","title":"TODO ANDROID-5096","text":""},{"location":"features/instrumentation-tests/integrations/","title":"Integrations","text":""},{"location":"features/instrumentation-tests/integrations/#pr-integration","title":"PR Integration","text":"<p>Integration that allows developers to trigger instrumentation tests from PRs. It uses a GitHub Action that triggers the execution of instrumentation tests whenever an \"Instrumentation Test\" label is added to the PR. The tests run on Firebase Testlab for mobile and TV. This integration allows developers to get quicker feedback about regressions introduced in the code and makes it visible to the PR owner and its reviewers.</p> <p>Note</p> <p>Note that developers can add a label anytime, and a test failure will not prevent PRs from being merged. So it's up to the team to decide how to handle a failed test: Fix the issue in the same PR, or add the @IgnoreOnCI annotation with Jira ticket reference to track a known issue to be fixed later, while also keeping the nightly build stable.</p> <p>See Below a list of available labels:</p> <ul> <li><code>Edna Instrumentation Tests</code> - Runs all tv/mobile tests for Edna</li> <li><code>Mandalorian Instrumentation Tests</code> - Runs all tv/mobile tests for Mandalorian</li> <li><code>Russell Instrumentation Tests</code> - Runs all tv/mobile tests for Russell</li> <li><code>Tesseract Instrumentation Tests</code> - Runs all tv/mobile tests for Tesseract</li> <li><code>Bender Instrumentation Tests</code> - Runs all tv/mobile tests for Bender</li> <li><code>Playback Instrumentation Tests</code> - Special case that runs tests related to playback on real devices</li> <li><code>Core Instrumentation Tests</code> - Run the build containing all instrumented tests from the above teams</li> </ul> <p>Info</p> <p>Since emulators are not available on GitHub Actions, we can only run the instrumentation tests from mobile and tv modules, which are the ones running in Firebase TestLab. We are working on migrating instrumentation tests from other modules to TestLab as well.</p>"},{"location":"features/instrumentation-tests/integrations/#results","title":"Results","text":"<p>After adding a label to run the tests, click on the \"instrumentation_tests\" action link at the bottom of your PR to check the progress:</p> <p></p> <p>To see the results from Firebase TestLab, search for \"MatrixResultsReport\" on the logs. You should find the information about 4 runs, mobile/Disney+, TV/Disney+, mobile/Star+, and TV/Star+. They are not close to each other, though:</p> <p></p> <p>Then click on \"Matrices weblink\" to go to Firebase TestLab. There you'll find the test cases, logs and videos from each test:</p> <p></p> <p>Or you can go into your build scan, clicking on the link provided in the end of the build log.</p> <p></p> <p>And there you can see all the matrices related to that build.</p> <p></p> <p>Info</p> <ol> <li>Re-run tests: To re-run the same tests remove and add the label.</li> <li>Running tests for more than one team: Make sure you removed the previous label before adding the label related to the other team.</li> </ol>"},{"location":"features/instrumentation-tests/integrations/#mobilebot","title":"Mobilebot","text":"<p>This Slack integration allows developers to kick builds that execute instrumentation tests for which a specific team is responsible for. This integration is helpful when you wish to run several tests but don't have a PR ready.</p> <p>Steps to kick builds from slack:</p> <ol> <li> <p>Push your branch to the repository</p> </li> <li> <p>Go to the Slack channel: #dsplus-android-builds</p> </li> <li> <p>Send the command to kick a build:</p> </li> </ol> <pre><code>@mobilebot android-build-block Dmgz {branch name} {block name}\n</code></pre> <p>Example:</p> <pre><code>@mobilebot android-build-block Dmgz gb/DMGZAND-1111-r2d2-presentation mandalorian\n</code></pre> <p>Currently the mapping between team and tests is done based upon this wiki page.</p>"},{"location":"features/instrumentation-tests/integrations/#r2d2-test-script","title":"R2D2 Test Script","text":"<p>R2D2 Script makes running instrumentation tests easier.</p>"},{"location":"features/instrumentation-tests/integrations/#features","title":"Features","text":"<ul> <li> <p>Allow developers to easily run tests by using a .txt file with multiple tests or selecting which test class/method to run.</p> </li> <li> <p>Simple build variant selection, either run the tests for Disney+ or Star+</p> </li> <li> <p>Filter which tests to run by annotation, for example <code>@IgnoreOnCI</code> (Only available when not running from a file)</p> </li> <li> <p>Run Mobile and TV tests easily by simply having the device you want to run on already connected (Only 1 device at a time)</p> </li> </ul>"},{"location":"features/instrumentation-tests/integrations/#how-to","title":"How to","text":"<p>Simply run the following command on your terminal <code>./scripts/r2d2-tests.sh</code> and follow the script through.</p> <p>Here is a quick video on how to execute it from a file:</p> <p></p> <p>The contents of the file should contain a list of line separated test classes and optionally methods, eg:</p> <pre><code>com.bamtechmedia.dominguez.login.LoginFlowTest#loginFlowSuccess\ncom.bamtechmedia.dominguez.login.LogoutFlowTest\ncom.bamtechmedia.dominguez.logoutall.LogOutAllDevicesTest\n</code></pre> <p>And another one executing a single class:</p> <p></p>"},{"location":"features/instrumentation-tests/mobile/","title":"Mobile Instrumentation Tests","text":""},{"location":"features/instrumentation-tests/mobile/#setup","title":"Setup","text":"<ul> <li>Please create an emulator that is only used for mobile instrumentation tests</li> <li>Do not install <code>Jarvis</code> on that emulator</li> <li>Do not hook up charles to that emulator</li> <li>Here is an example of recommended emulator specs that will successfully run all of our mobile instrumentation tests listed below</li> </ul> Device API Target CPU/ABI Pixel 4 30 Android 11.0 (Google Play) x86_64"},{"location":"features/instrumentation-tests/mobile/#cli-commands","title":"CLI commands","text":"<ul> <li>List of up to date, currently passing commands to run mobile instrumentation tests</li> </ul>"},{"location":"features/instrumentation-tests/mobile/#disney","title":"Disney+","text":"Test class Command <code>AccountHoldTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.AccountHoldTest</code> <code>AccountSettingsStackedSubsTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.account.AccountSettingsStackedSubsTest</code> <code>AccountSettingsSubsTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.account.AccountSettingsSubsTest</code> <code>AgeVerificationFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.ageverify.AgeVerificationFlowTest</code> <code>AgeVerificationKoreanFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.ageverify.AgeVerificationKoreanFlowTest</code> <code>ChangeEmailTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.account.email.ChangeEmailTest</code> <code>ChangePasswordFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.account.password.ChangePasswordFlowTest</code> <code>DeepLinkAccountInfoTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkAccountInfoTest</code> <code>DeepLinkBrandPageTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkBrandPageTest</code> <code>DeepLinkDataUsageTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkDataUsageTest</code> <code>DeepLinkDownloadsTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkDownloadsTest</code> <code>DeepLinkEditorialTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkEditorialTest</code> <code>DeepLinkEditProfileTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkEditProfileTest</code> <code>DeepLinkHomeTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkHomeTest</code> <code>DeepLinkLegalTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkLegalTest</code> <code>DeepLinkMoviesTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkMoviesTest</code> <code>DeepLinkOriginalsTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkOriginalsTest</code> <code>DeepLinkSearchTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkSearchTest</code> <code>DeepLinkSeriesTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkSeriesTest</code> <code>DeepLinkTier2DialogTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkTier2DialogTest</code> <code>LegalCenterAuthenticatedTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.legal.LegalCenterAuthenticatedTest</code> <code>LegalCenterOnboardingTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.legal.LegalCenterOnboardingTest</code> <code>LoginFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginFlowTest</code> (fireTablet) <code>./gradlew :mobile:connectedMobileDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginForgotPasswordTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.otp.LoginForgotPasswordTest</code> <code>LogOutAllDevicesTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.logoutall.LogOutAllDevicesTest</code> <code>LogOutFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LogOutFlowTest</code> <code>MovieDetailsTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.details.MovieDetailsTest</code> <code>MovieDetailsTest</code> (fireTablet) <code>./gradlew :mobile:connectedMobileDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.details.MovieDetailsTest</code> <code>OtpLoginFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.OtpLoginFlowTest</code> <code>PaywallFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.PaywallFlowTest</code> <code>PaywallFlowTest</code> (fireTablet) <code>./gradlew :mobile:connectedMobileDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.PaywallFlowTest</code> <code>ProfilesFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.profiles.ProfilesFlowTest</code> <code>PlaybackLanguagesTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.playback.PlaybackLanguagesTest</code> <code>PlaybackTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.playback.PlaybackTest</code> <code>PlaybackUpNextTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.playback.PlaybackUpNextTest</code> <code>SearchScreenTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.search.SearchScreenTest</code> <code>SignupFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.signup.SignupFlowTest</code> <code>SignupFlowTest</code> (fireTablet) <code>./gradlew :mobile:connectedMobileDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.signup.SignupFlowTest</code> <code>SmokeTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.smoke.SmokeTest</code> <code>SmokeTest</code> (fireTablet) <code>./gradlew :mobile:connectedMobileDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.smoke.SmokeTest</code> <code>VerifyAccountFlowTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.account.verify.VerifyAccountFlowTest</code> <code>WelcomeScreenTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code> <code>WelcomeScreenTest</code> (fireTablet) <code>./gradlew :mobile:connectedMobileDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code> <code>WelchAddProfileTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.onboarding.WelchAddProfileTest</code> <code>WelchExistingProfileMigrationTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.onboarding.WelchExistingProfileMigrationTest</code> <code>WelchNewUserSignupTest</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.onboarding.WelchNewUserSignupTest</code> <code>DynamicTests</code> <code>./gradlew :mobile:connectedMobileDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.dynamic.DynamicTests</code>"},{"location":"features/instrumentation-tests/mobile/#star","title":"Star+","text":"Test class Star+ Command <code>AccountHoldTest</code> <code>AccountSettingsStackedSubsTest</code> <code>AccountSettingsSubsTest</code> <code>ChangeEmailTest</code> <code>DeepLinkDetailTest</code> <code>HomeBadgesTest</code> <code>./gradlew :mobile:connectedMobileStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.badges.HomeBadgesTest</code> <code>LegalCenterAuthenticatedTest</code> <code>LegalCenterOnboardingTest</code> <code>LoginFlowTest</code> <code>./gradlew :mobile:connectedMobileStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginFlowTest</code> (fireTablet) <code>./gradlew :mobile:connectedMobileStarAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginForgotPasswordTest</code> <code>LogOutAllDevicesTest</code> <code>LogOutFlowTest</code> <code>PaywallFlowTest</code> <code>./gradlew :mobile:connectedMobileStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.PaywallFlowTest</code> <code>ProfilesFlowTest</code> <code>WelcomeScreenTest</code> <code>./gradlew :mobile:connectedMobileStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code> <code>WelcomeScreenTest</code> (fireTablet) <code>./gradlew :mobile:connectedStarAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code>"},{"location":"features/instrumentation-tests/r2d2_framework/","title":"R2D2 Framework","text":"<p>R2D2 Framework makes writing instrumented tests easier and more predictable while using a clean and simple domain-specific language (DSL). It provides mechanisms that allow android developers to set up and manipulate the app\u2019s state while the tests are running.</p>"},{"location":"features/instrumentation-tests/r2d2_framework/#features","title":"Features","text":"<ul> <li>Manipulation of state before, during and after each test.</li> <li>Allows developers to easily override Http responses while running the tests.</li> <li>Simple DSL to write instrumentation tests.</li> </ul>"},{"location":"features/instrumentation-tests/r2d2_framework/#motivation","title":"Motivation","text":"<ul> <li>Hard to set up and reset states between tests when using the real remote services: Account, Paywall, Profiles, Language, etc.</li> <li>Avoid IP blocks - Your IP address could be blocked due the amount of requests being triggered while instrumented tests were running.</li> <li>Reduce flaky tests</li> </ul>"},{"location":"features/instrumentation-tests/r2d2_framework/#components","title":"Components","text":"<p>The R2D2 Framework has two main components: <code>R2D2Config</code> and <code>R2D2Interceptor</code>.</p> <p>Scope of R2D2 Framework and how it connects with \u201cexternal\u201d components (SDK and test suite):</p> <p></p>"},{"location":"features/instrumentation-tests/r2d2_framework/#r2d2config","title":"R2D2Config","text":"<p>This class centralizes the R2D2 Framework's configuration. It allows developers to register overrides for a specific request. All its methods are internal and used by specific components:</p> <ul> <li> <p><code>addOverride</code> and <code>replaceOverride</code> methods are used by <code>R2D2OverrideBuilder</code> to build and register <code>R2D2Override</code>s.</p> </li> <li> <p><code>getOrNull</code> is accessed by <code>R2D2Interceptor</code> to check for registered overrides which will be used to intercept requests and override responses.</p> </li> </ul>"},{"location":"features/instrumentation-tests/r2d2_framework/#r2d2overridebuilder","title":"R2D2OverrideBuilder","text":"<p>Builder which provides a fluent API to create and register <code>R2D2Override</code>s:</p> <pre><code>r2d2Config.givenRequestInvoked(\"/subscriptions\")\n            .whenAcceptAllVariables()\n            .thenRespondWithFile(\"subscriptions/subscriptions_subscribed_bamtech.json\")\n</code></pre>"},{"location":"features/instrumentation-tests/r2d2_framework/#r2d2interceptor","title":"R2D2Interceptor","text":"<p>It observes and potentially prevents requests to go out and hit the real server by providing a previously configured mock response instead. This is an implementation of <code>OkHttp</code>'s interceptor that can be added to an <code>OkHttpClient</code> (in our case, it\u2019s registered through the <code>SDK</code>).</p>"},{"location":"features/instrumentation-tests/r2d2_framework/#r2d2override","title":"R2D2Override","text":"<p>Represents the configuration and necessary information so that R2D2 framework can determine if a request should be intercepted and a custom response should be returned.</p>"},{"location":"features/instrumentation-tests/r2d2_framework/#r2d2response","title":"R2D2Response","text":"<p>Custom response to be returned for a registered <code>R2D2Override</code>.</p>"},{"location":"features/instrumentation-tests/r2d2_framework/#how-to","title":"How to","text":"<p>The code snippet below shows a test that registers an override for a specific request, starts the <code>MainActivity</code>, and asserts the expected <code>View</code> is visible:</p> <pre><code>r2d2.givenRequestInvoked(\"/v1/public/graphql\")\n    // Variable \"operationName\" needs to be equals to \"Check\". Any other variable will be ignored.\n    .whenPartialVariablesMatch(mapOf(\"operationName\" to \"check\"))\n    // Returns string as response\n    .thenRespond(\"\"\"\n          {\n              \"data\": {\n                \"check\": {\n                  \"__typename\": \"Operations\",\n                  \"operations\": [\"Login\", \"OTP\"]\n                }\n              },\n              \"extensions\": {\n                \"sdk\": {\n                  \"token\": null,\n                  \"session\": null,\n                  \"grant\": null\n                }\n              }\n        }\n    \"\"\")\n\n// Starts MainActivity. The Application class of the app is already created at this point.\nActivityScenario.launch(MainActivity::class.java).onActivity {\n\n    withId(R.id.welcomeButtonLogIn).waitUntilIsDisplayed().perform(click())\n    withId(R.id.editFieldEditText)\n        .waitUntilIsDisplayed()\n        .perform(replaceText(\"luke.skywalker@disneystreaming.com\")) // Enter email\n\n    clickButton(R.id.continueLoadingButton) // Taps the continue button on LoginEmail screen\n\n    withId(R.id.passwordOnboardingToolbar)\n        .waitUntilIsDisplayed() // Assert app navigates to LoginPassword screen as an existing user\n}\n</code></pre> <p>The following sequence diagram is a representation of the test above. It shows the moment <code>R2D2</code> is created and is ready to register overrides, as well as the flow related to request interception:</p> <p></p> <p>It is also possible to register/replace overrides in the middle of a test (when the application is already started for example):</p> <pre><code>r2d2Config.givenRequestInvoked(\"/paywall\")\n    .whenAcceptAllVariables()\n    .thenRespond(\"{ Example... }\", replaceExisting = true)\n</code></pre>"},{"location":"features/instrumentation-tests/r2d2_framework/#interception-flow","title":"Interception Flow","text":"<p><code>AndroidTestFramework_AppModule</code> binds <code>R2D2Interceptor</code> as one of the interceptors passed to the <code>SDK</code>. It will, therefore, intercept all requests that the app does through the <code>SDK</code>.</p> <p>When a request is intercepted by <code>R2D2Interceptor</code>, in combination with <code>R2D2Config</code>, it checks whether an override is registered for that specific request. If an override exists, the response associated with it is returned, otherwise, the request is dispatched to the real server:</p> <p></p>"},{"location":"features/instrumentation-tests/r2d2_framework/#matchers","title":"Matchers","text":"<p><code>VariablesMatcher</code>s are an important part of the logic that determines if a registered override should be used for a given request.</p> <p>A combination of the <code>path</code> of a request and the <code>variablesMatcher</code> will form the \"key\" which the override is registered with.</p>"},{"location":"features/instrumentation-tests/r2d2_framework/#key-combination","title":"\"Key\" combination","text":"<p>The <code>path</code> is the entire path of the URL. For a given <code>okhttp3.Request</code>, it is accessed via <code>okhttp3.HttpUrl.encodedPath</code>. Note that it will start with <code>\"/\"</code>. <code>variablesMatcher</code> is related to the request\u2019s variables. If <code>path</code> matches with <code>okhttp3.HttpUrl.encodedPath</code>, this matcher will be used to determine if the variables from the given request satisfy the \"match\" logic of the registered <code>VariablesMatcher</code>.</p>"},{"location":"features/instrumentation-tests/r2d2_framework/#matcher-implementations","title":"Matcher Implementations","text":""},{"location":"features/instrumentation-tests/r2d2_framework/#acceptallvariablesmatcher","title":"AcceptAllVariablesMatcher","text":"<p>Implementation of <code>VariablesMatcher</code> which always returns true. Used to indicate that the variables will be always accepted.</p> <p>Override:</p> <pre><code>r2d2Config.givenRequestInvoked(\"/subscriptions\")\n   .whenAcceptAllVariables()\n   .thenRespond(\" { \u201cdata\u201d: \u201cExample...\u201d } \")\n</code></pre> <p>Request matches </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/subscriptions</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"Example 1\",\n         \"var_2\" to \"Example 2\"\n     )\n</code></pre> <p>Request doesn\u2019t match </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/token</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"Example 1\",\n         \"var_2\" to \"Example 2\"\n     )\n</code></pre>"},{"location":"features/instrumentation-tests/r2d2_framework/#matchallvariablesmatcher","title":"MatchAllVariablesMatcher","text":"<p>Implementation of [VariablesMatcher] which makes sure every variable presented in a request should match the expected ones configured for an override.</p> <p>Override:</p> <pre><code>r2d2Config.givenRequestInvoked(\"/v1/public/graphql\")\n   .whenAllVariablesMatch(\n        mapOf(\"var_1\" to \"Example 1\", \"var_2\" to \"Example 2\")\n   )\n   .thenRespond(\" { \u201cdata\u201d: \u201cExample...\u201d } \")\n</code></pre> <p>Request matches </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/v1/public/graphql</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"Example 1\",\n         \"var_2\" to \"Example 2\"\n     )\n</code></pre> <p>Request doesn\u2019t match </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/v1/public/graphql</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"Example 1\",\n         \"var_2\" to \"Example text not expected\"\n     )\n</code></pre>"},{"location":"features/instrumentation-tests/r2d2_framework/#matchpartiallyvariablesmatcher","title":"MatchPartiallyVariablesMatcher","text":"<p>Implementation of [VariablesMatcher] which facilitates the configuration since it takes into account only the part of the variables in order to match request and override.</p> <p>Override:</p> <pre><code>r2d2Config.givenRequestInvoked(\"/v1/public/graphql\")\n   .whenPartialVariablesMatch(mapOf(\"var_2\" to \"Example 2\"))\n   .thenRespond(\" { \u201cdata\u201d: \u201cExample...\u201d } \")\n</code></pre> <p>Request matches </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/v1/public/graphql</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"Example 1\",\n         \"var_2\" to \"Example 2\"\n     )\n</code></pre> <p>Request doesn\u2019t match </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/v1/public/graphql</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"Example 1\",\n         \"var_2\" to \"Example text not expected\"\n     )\n</code></pre>"},{"location":"features/instrumentation-tests/r2d2_framework/#matchaggressivelyvariablesmatcher","title":"MatchAggressivelyVariablesMatcher","text":"<p>Implementation of <code>VariablesMatcher</code> which aggressively matches requests where the variable\u2019s value contains (doesn't have to be equalTo, just contains) the the expected text.</p> <p>Override:</p> <pre><code>r2d2Config.givenRequestInvoked(\"/v1/public/graphql\")\n   .whenAggressiveMatch(ExpectedAggressiveMatch(\"var_1\", \"bunch of\"))\n   .thenRespond(\" { \u201cdata\u201d: \u201cExample...\u201d } \")\n</code></pre> <p>Request matches </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/v1/public/graphql</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"var 1 and a bunch of other stuff\",\n         \"var_2\" to \"Example 2\"\n     )\n</code></pre> <p>Request doesn\u2019t match </p> <p>Endpoint: <code>https://global.edge.bamgrid.com/v1/public/graphql</code></p> <p>Variables:</p> <pre><code>mapOf(\n         \"var_1\" to \"Example 1\",\n         \"var_2\" to \"Example 2\"\n     )\n</code></pre>"},{"location":"features/instrumentation-tests/tv/","title":"TV Instrumentation Tests","text":""},{"location":"features/instrumentation-tests/tv/#setup","title":"Setup","text":"<ul> <li>Please create an emulator that is only used for TV instrumentation tests</li> <li>Do not install <code>Jarvis</code> on that emulator</li> <li>Do not hook up charles to that emulator</li> <li>Here is an example of recommended emulator specs that will successfully run all of our TV instrumentation tests listed below</li> </ul> Device API Target CPU/ABI Android TV 30 Android 11.0 (Android TV) x86 <p>Warning</p> <p>Using API 29 will not pass all tests</p>"},{"location":"features/instrumentation-tests/tv/#cli-commands","title":"CLI commands","text":"<ul> <li>List of up to date, currently passing commands to run TV instrumentation tests</li> </ul>"},{"location":"features/instrumentation-tests/tv/#disney","title":"Disney+","text":"Test class Disney+ Command <code>AccountHoldTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.AccountHoldTest</code> <code>AccountSettingsSubsTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.account.AccountSettingsSubsTest</code> <code>AgeVerificationFlowTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.ageverify.AgeVerificationFlowTest</code> <code>ChangeEmailTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.account.email.ChangeEmailTest</code> <code>DeepLinkAccountInfoTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkAccountInfoTest</code> <code>DeepLinkBrandPageTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkBrandPageTest</code> <code>DeepLinkEditorialTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkEditorialTest</code> <code>DeepLinkEditProfileTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkEditProfileTest</code> <code>DeepLinkHomeTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkHomeTest</code> <code>DeepLinkLegalTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkLegalTest</code> <code>DeepLinkMoviesTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkMoviesTest</code> <code>DeepLinkOriginalsTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkOriginalsTest</code> <code>DeepLinkSearchTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkSearchTest</code> <code>DeepLinkSeriesTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkSeriesTest</code> <code>DeepLinkTier2DialogTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.deeplink.DeepLinkTier2DialogTest</code> <code>EditProfileTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.profile.edit.EditProfileTest</code> <code>LegalCenterAuthenticatedTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.legal.LegalCenterAuthenticatedTest</code> <code>LegalCenterOnboardingTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.legal.LegalCenterOnboardingTest</code> <code>LoginFlowTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginFlowTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginForgotPasswordFocusTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.otp.LoginForgotPasswordFocusTest</code> <code>LoginScreenFocusTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginScreenFocusTest</code> <code>LogOutAllDevicesTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.logoutall.LogOutAllDevicesTest</code> <code>LogOutFlowTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LogOutFlowTest</code> <code>MovieDetailsTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.details.MovieDetailsTest</code> <code>MovieDetailsTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.details.MovieDetailsTest</code> <code>PaywallFlowTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.PaywallFlowTest</code> <code>PaywallFlowTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.PaywallFlowTest</code> <code>ProfilesFlowTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.profiles.ProfilesFlowTest</code> <code>PlaybackTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.playback.PlaybackTest</code> <code>PlaybackTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.playback.PlaybackTest</code> <code>PlaybackLanguagesTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.playback.PlaybackLanguagesTest</code> <code>PlaybackUpNextTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.playback.PlaybackUpNextTest</code> <code>SearchDefaultKeyboardTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.search.SearchDefaultKeyboardTest</code> <code>SearchJapaneseKeyboardTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.search.SearchJapaneseKeyboardTest</code> <code>SearchKoreanKeyboardTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.search.SearchKoreanKeyboardTest</code> <code>SearchScreenTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.search.SearchScreenTest</code> <code>SignupFlowTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.signup.SignupFlowTest</code> <code>SignupFlowTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.signup.SignupFlowTest</code> <code>SmokeTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.smoke.SmokeTest</code> <code>SmokeTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.smoke.SmokeTest</code> <code>WelchAddProfileTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.onboarding.WelchAddProfileTest</code> <code>WelchExistingProfileMigrationTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.onboarding.WelchExistingProfileMigrationTest</code> <code>WelchNewUserSignupTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.onboarding.WelchNewUserSignupTest</code> <code>WelcomeScreenFocusTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenFocusTest</code> <code>WelcomeScreenFocusTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenFocusTest</code> <code>WelcomeScreenTest</code> <code>./gradlew :tv:connectedTvDisneyGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code> <code>WelcomeScreenTest</code> (fireTV) <code>./gradlew :tv:connectedTvDisneyAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code>"},{"location":"features/instrumentation-tests/tv/#star","title":"Star+","text":"Test class Star+ Command <code>AccountHoldTest</code> <code>AccountSettingsSubsTest</code> <code>EditProfileTest</code> <code>LegalCenterAuthenticatedTest</code> <code>LegalCenterOnboardingTest</code> <code>LoginFlowTest</code> <code>./gradlew :tv:connectedTvStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginFlowTest</code> (fireTV) <code>./gradlew :tv:connectedTvStarAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.login.LoginFlowTest</code> <code>LoginForgotPasswordFocusTest</code> <code>LoginScreenFocusTest</code> <code>LogOutAllDevicesTest</code> <code>LogOutFlowTest</code> <code>PaywallFlowTest</code> <code>./gradlew :tv:connectedTvStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.PaywallFlowTest</code> <code>PaywallFlowTest</code> (fireTV) <code>./gradlew :tv:connectedTvStarAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.paywall.PaywallFlowTest</code> <code>WelcomeScreenFocusTest</code> <code>WelcomeScreenTest</code> <code>./gradlew :tv:connectedTvStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code> <code>WelcomeScreenTest</code> (fireTV) <code>./gradlew :tv:connectedTvStarAmazonDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.welcome.WelcomeScreenTest</code> <code>HomeBadgesTest</code> <code>./gradlew :tv:connectedTvStarGoogleDebugAndroidTest --continue --info -Pandroid.testInstrumentationRunnerArguments.class=com.bamtechmedia.dominguez.badges.HomeBadgesTest</code>"},{"location":"features/live-guide/","title":"Live Guide","text":"<p>[WIP]</p>"},{"location":"features/live-guide/#feature-diagram","title":"Feature diagram","text":""},{"location":"features/paywall/","title":"Paywall","text":""},{"location":"features/paywall/#refactor","title":"Refactor","text":"<p>A refactor of the paywall has begun. More information can be found here.</p>"},{"location":"features/paywall/#components","title":"Components","text":"<p>There are three important components that make up the entirety of what we call the \"Paywall\". They are outlined below.</p>"},{"location":"features/paywall/#paywall-service","title":"Paywall Service","text":"<p>The first is the Paywall service. This has the following responsibilities:</p> <ul> <li>Fetching SKU's</li> <li>Fetching the Paywall Hash</li> <li>Fetching the Entitlement Context<ul> <li>This value is used to determine the users current entitlement value.</li> <li>There are five options (as of 03/03/2021):<ul> <li><code>account_active_entitlement</code> - This means the user is currently subscribed to Disney+ with an active entitlement (meaning they can view content).</li> <li><code>account_expired_entitlement</code> - This means the user was previously entitled and their subscription lapsed. As a result, they cannot enter the application and will instead hit the paywall when logging in. This is used to take the user to what we call the \"Paywall Interstitial\" (see fragment) screen with text informing the user to \"restart\" their subscription.</li> <li><code>account_never_entitled</code> - This means the user is logged in but has never been entitled. As a result, they will be taken to the paywall. If the user is a first time user (meaning they're coming in from the registration screen), we skip the Paywall Interstitial screen and take the user directly to the paywall. Otherwise, we show the Interstitial informing them to \"complete\" their subscription. If a user completed Signup (created an account) but never completed a purchase, they would see the \"Complete Purchase\" version of the paywall interstitial page on subsequent logins, until an initial purchase has been made on this account. You can only ever be in this context once...between Signing Up and the first purchase.</li> <li><code>account_on_billing_hold</code> - This means the user is in an Account Hold state, and must be blocked from entering the application. Here, they will have a chance to fix their payment. For more information, see Terminology. For the conditions that must be met, see FEDSA-280.</li> <li><code>anonymous</code> - This means that the user is not logged in. The user should be directed to the welcome screen in this case.</li> </ul> </li> </ul> </li> </ul>"},{"location":"features/paywall/#market","title":"Market","text":"<p>The second is the <code>Market</code> component. This refers to the third party marketplaces that we support. As of today, the markets we support are:</p> <ul> <li>Google Play Billing</li> <li>Amazon IAP</li> </ul> <p>This is responsible for the following:</p> <ul> <li>Querying products - When the Paywall service (outlined above) returns SKU's, we pass those SKU's to the <code>Market</code> to fetch the product information. This includes ALL of the metadata associated with the product, including:<ul> <li>Pricing information</li> <li>Currency information</li> <li>The Market's also handle when and how to renew. It handles the grace period as well as the account holds.</li> </ul> </li> <li>Querying purchases - As of Google Play Billing 3.0, and since the beginning of Amazon, we are required to query the user's purchases on every app open. This will allow us to restore purchases for the user that may have been purchased outside of the application, as well as handle pending purchases.<ul> <li>For example, on Google Devices, it may be possible to redeem a promotion for a subscription or (in a future release) subscribe to the app directly in the Google Play Store before installing the app. For more information, see Handling purchases made outside your app and Handling pending transactions.</li> </ul> </li> <li>Making a purchase - Perhaps the second most important component of the app (behind playback), the  Market is responsible for purchasing subscriptions on Android.</li> </ul> <p>The Market delegates the actual work to the Disney Streaming IAP Library.  Read more about this below.</p>"},{"location":"features/paywall/#disney-streaming-iap-library","title":"Disney Streaming IAP Library","text":"<p>The Disney Streaming IAP Library is an internal library used to obfuscate the implementation details of the individual third party billing libaries. The below chart shows how this is done:</p> <p></p> <p>Effectively, the client apps interface with a shim called <code>Market</code>. Under the hood, the market is implemented by the proper third party library and exposed in the app based on the market flavor.</p> <ul> <li>The <code>GoogleBillingMarket</code> is provided via <code>storeGoogle</code>'s <code>Store_AppModule</code>.</li> <li>The <code>AmazonMarket</code> is provided via <code>storeAmazon</code>'s <code>Store_AppModule</code>.</li> </ul> <p>This allows the client app to interface with a single class and not need to worry about the implementation details.</p>"},{"location":"features/paywall/#activation-service","title":"Activation Service","text":"<p>The final component is the Activation service. This is another internal service to Disney Streaming that is responsible for the following:</p> <ul> <li>Redeeming a purchase - Once a purchase is made via the <code>Market</code>, we take the receipt (called an <code>orderId</code> for Google and a <code>receipt</code> for Amazon) and pass that along to activation services via the SDK.   If successful, this will entitle the device to be able to view content.</li> <li>Linking a subscription to an account - As of the time of this writing, the process of redeeming a purchase actually entitles the device not the account. As a result, we must link the entitlement to an account, if possible.   This is done through the SubscriptionApi.   Without this, when logging in to the same account on another device (the web for example), the user will hit the paywall. Note: an entitlement can only be linked to one account at a time and vice-versa.</li> <li>Restoring purchases - This differs from redeeming in that the purchase has already been redeemed. This can happen for users on Amazon/Google when they are attempting to sign in to an unentitled Disney+ account on a device with an entitled Google/Amazon account.</li> <li>Temporary Access - The user can be in the Temporary Access state in the event that a purchase fails to activate. For example, after a purchase is made and the app attempts to redeem via activation services, an error can occur (server side) when verifying the purchase. As a result, Activation services will grant temporary access to the device, allowing them to playback content.   Meanwhile, the app will attempt to fix the issue by retrying to redeem the purchase and thus verifying the purchase. According to Activation, temporary access lasts for as long as the session lasts.</li> <li>Acknowledging Google Purchases - As of Google Billing 2.0.0, any subscription must be acknowledged within 3 days of a purchase being made. If it is not, Google will refund the user. Historically, this was done in the android application (see <code>MarketInteractor.acknowledgePurchase</code>).   However, at launch in 2019, ~3% of all purchases were not acknowledged. This resulted in Google communicating that we need to fix that. Over 2020, we reduced that to ~0.5%.   In late 2020, activation implemented acknowledgement on the server. Since then, unacknowledged purchases have fallen to ~0.3%. Note: Amazon still requires us to \"consume\" the purchase.</li> </ul>"},{"location":"features/paywall/#setting-up-skus","title":"Setting up SKU's","text":"<p>See documentation on how to add SKU's to the Amazon and Google Play Store here</p>"},{"location":"features/paywall/#testing-purchases","title":"Testing Purchases","text":"<p>See documentation on testing purchases in the Testing Purchases documentation</p>"},{"location":"features/paywall/#important-resources","title":"Important Resources","text":"<ul> <li>Paywall Service Wiki</li> <li>List of currently supported SKU's:<ul> <li>Subscriptions - List of SKU's used for subscribing to the service.</li> <li>In App Products - List of SKU's used for Premier Access (or PPV).</li> </ul> </li> <li>Library Update Documentation</li> <li>Slack Channels<ul> <li><code>#activation</code> - Used to communicate with the Activation service folks</li> <li><code>#mobile-core-support</code> - Used to communicate with Mobile Core team, the team that maintains the libraries.</li> <li><code>#account_hold</code> - Used to discuss features around the Account Hold.</li> <li><code>#offer-management-support</code> - Used to communicate with the Offer Management team.</li> </ul> </li> </ul>"},{"location":"features/paywall/#terminology","title":"Terminology","text":"<ul> <li>SKU - An identifier for a specific product. Specifically, it stands for \"Stock keeping unit\". An example is <code>com.disney.yearly.disneyplus.google</code>.  </li> <li>Grace Period - A period of time where the users card was attempted to be charged, but failed. As a result, we grant them a \"grace period\" where they are able to continue to use the service. This can happen, for example, if the users credit card has expired. As of the time of this writing, we give users a seven day grace period. For more information, see here.</li> <li>Account Hold - A period of time where the users card was attempted to be charged, but failed, and the user has already surpassed their Grace Period. In this instance, the users subscription is still \"active\", but they are now unable to use the application. If the user remediates their payment issue, they are then able to re-gain access to the application. For more information, see here.</li> <li>Receipt - The response given to the app via the <code>Market</code> from Amazon. This is what activation uses to verify the purchase and entitle the device.</li> <li>orderId - The response given to the app via the <code>Market</code> from Google. This is what activation uses to verify the purchase and entitle the device.</li> <li>Temporary Access - A state that the user is placed in the event that Activation fails to properly communicate with Amazon's or Google's servers. The user will be able to temporarily access the application.</li> </ul>"},{"location":"features/paywall/#additional-reading","title":"Additional Reading","text":"<ul> <li>IAP Library Updates - Documentation on how to update the IAP library.</li> <li>SKU Lists:<ul> <li>Product SKU List - A list of all \"product\" SKU's. These are generally</li> <li>Subscription SKU List - A list of all subscriptions SKU's.</li> </ul> </li> <li>Refactor - Documentation on the ongoing paywall refactor effort.</li> <li>Setting up SKU's - Documentation on how to go about setting up a SKU.</li> <li>Testing IAP - Documentation on how to test the IAP flows.</li> </ul>"},{"location":"features/paywall/dplusday/","title":"Disney Plus Day","text":"<p>This document outlines the preparation steps, console setup, and testing, including the result from devices in 2022.</p> <ul> <li>Overall steps<ul> <li>Determine whether new SKU will be needed or can run promotion based off existing SKU  (Collaboration with the Paywall Team)</li> <li>Once decision is made, set up SKUs in the console.</li> <li>Set up Jarvis toggle for testing (Amazon only)</li> <li>Validate D+ day flow</li> <li>Set up the exact same app-config from Jarvis in prod on launch day.</li> </ul> </li> </ul>"},{"location":"features/paywall/dplusday/#preparation","title":"Preparation","text":"<ul> <li>Google<ul> <li>As of version 2.2, the DMGZ project reacts to intro price availability from the SKU from the Google billing library.<ul> <li>The Paywall Service returns the SKUs, and the app queries them from the app store to provide the subsection product to users.</li> <li>If the SKU has an intro price active, the code will display the intro price on the welcome/paywall screen.</li> </ul> </li> </ul> </li> <li>Amazon<ul> <li>As of version 2.2, the DMGZ project reacts to the intro price available from the app config.<ul> <li>With Amazon In-App Purchasing v2.0 library, it doesn't have intro price enabled, and only Amazon built-in dialog can show promotional price.</li> <li>We have a ticket to let the new SDK (Amazon Appstore SDK V3)will provide intro price instead of the app config.</li> <li>If the config has the intro price availability and the SKU's intro price is not expired from the amazon console, the code will display the intro price in the welcome/paywall screen.</li> <li>As of 9/16/2022, the DMGZ project reacts to the intro price available from the app config.<ul> <li>With IAP library V2, it doesn't have intro price enabled, and only Amazon built-in dialog can show promotional price.</li> <li>We have a ticket to let the new SDK provide intro price instead of the app config.</li> <li>If the config has the intro price availability and the date/time does not expire the SKU, the code will display the intro price in the welcome/paywall screen.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"features/paywall/dplusday/#console-setup","title":"Console setup","text":"<ul> <li>Google<ul> <li>Go to play store console</li> <li>Choose Disney App</li> <li>Click Subscriptions (From Monetize, right below In-App-Products) at the left menu</li> <li>On the Right top corner, Create Subscription.</li> <li>SKU name should be determined by paywall team.  (Phillipneris, Anna Anna.Marie.Phillipneris@disney.com or Gianni, Amanda Amanda.L.Gianni@disney.com)</li> <li>Enter the SKU for productId (40 characters limit) and descriptive product name product name</li> <li>Add base plan, save</li> <li>Add offer</li> </ul> </li> </ul> <ul> <li>Amazon<ul> <li>Go to Amazon developer console</li> <li>Choose Disney App</li> <li>Go to In-App Items from the left menu</li> <li>Create a new SKU or click exiting SKU</li> <li>Enabled promotional price, set 1 month, and one-time change</li> <li>Set all customers</li> <li>Set start date and end date (Amazon date is based on UT)</li> <li>Intro price function from SDK is not enabled as of Today (Sep 28th, have a ticket to enable it from code with the new app store SDK)</li> <li>The team has done applying config to update the intro price.</li> </ul> </li> </ul>"},{"location":"features/paywall/dplusday/#testing","title":"Testing","text":"<ul> <li>Google<ul> <li>Jarvis In App Purchase &amp; Paywall -&gt; D+ Day Config - Google</li> </ul> </li> <li>Amazon<ul> <li>Jarvis In App Purchase &amp; Paywall -&gt; D+ Day Config - Amazon - In Enabled Regions</li> <li>Currently it has 2022 date on the config</li> <li>After, ticket we do not need to have intro prices in the config.</li> <li>We still need to keep the introPricingEndDateTime since Amazon expiration date/time is set up for UTC timezone.</li> </ul> </li> <li>Recommend Fresh Install D+ app</li> <li>Check if the promo price shows up on the welcome screen</li> <li>After sign up, check the intro price shows up correctly on the paywall</li> <li>Verify if the platform's purchase dialog's price matches the expected promo price</li> <li>Screen shots are in here</li> </ul>"},{"location":"features/paywall/dplusday/#launch","title":"Launch","text":"<ul> <li>The launch started at 12 am EST/9 pm PST.</li> <li>Deploy any necessary client feature flag config to Prod at the launch time.</li> <li>Have one or two members monitor #disneyplus-support-general (Better to have an on-call spreadsheet prepared)</li> </ul>"},{"location":"features/paywall/dplusday/#helpful-notes-to-read","title":"Helpful notes to read","text":"<ul> <li>For 2022, it was our first time to launch amazon's new tier SKU with app store SDK 2.0</li> <li>Right after D+ day 2022, we upgraded the amazon app store SDK to 3.0.</li> <li>D+ 2022 SKU in Amazon plans to change the name to D plus premium to support the ad vs. the no-ad tier group.</li> <li>Amazon intro price date/time is based on UT, so make sure you give +/- day buffer to that console won't block the eligibility. The paywall service will be handling the promo time window.<ul> <li>ex: If a date is set to 9/28/2022 to end, it means it will end at 9/28/2022 at 8 pm EST/ 5 pm PST</li> </ul> </li> <li>Spike ticket for Disney Day 2022</li> <li>On-call docs</li> <li>Contact info who were involved in D+ day launch in 2022<ul> <li>Amazon: Rajan, Priya prirajan@amazon.com; N S, Goutham gouths@amazon.com</li> <li>Disney TAM: Coppola, Jason Jason.Coppola@disney.com; Koenig, Alana Alana.Koenig@disney.com;</li> <li>Disney DEV: Kim, Kisik kisik.kim@disneystreaming.com</li> </ul> </li> </ul>"},{"location":"features/paywall/iap_library_updates/","title":"Bamnet IAP Library Updates","text":"<p>Every once in a while, we will need to make an update to the Bamnet IAP library in order to fix an issue within the Disney+ application. This document details how we can go about doing that.</p>"},{"location":"features/paywall/iap_library_updates/#libraries","title":"Libraries","text":"<ul> <li>Disney Streaming IAP</li> <li>Base IAP</li> </ul>"},{"location":"features/paywall/iap_library_updates/#process","title":"Process","text":"<ul> <li>Pull down library: https://github.bamtech.co/mobile-core/android-bamnet-iap</li> <li>Make new branch</li> <li>Make necessary changes</li> <li>Update the <code>CHANGELOG.md</code> file with your changes<ul> <li>At the top of the changelog is a header called <code>master</code>. While we're working in the alpha stage, we place all updates there.</li> <li>There are multiple sections:<ul> <li><code>Breaking</code> - Place any breaking changes here. This includes anything such as new API's, changed parameters in existing API's, etc.</li> <li><code>Enhancements</code> - Any enhancements that were made in the update.</li> <li><code>Bug Fixes</code> - Any bug fixes that were implemented.</li> <li>When the final build is cut, these will be added to a new header.</li> </ul> </li> </ul> </li> <li>Test local integration with D+<ul> <li>Ensure that the library is in the same folder as the Dmgz project.</li> <li>Set <code>dominguez.includeIapBuild</code> to true in your local <code>~/.gradle/gradle.properties</code>.<ul> <li>Note that after syncing the Dmgz project, the IAP library will be included as a subproject. This allows you to make changes in the same Android Studio window as Dmgz.</li> </ul> </li> <li>Build the project as you would normally do.</li> <li>Test your changes and make adjustments if necessary.</li> <li>Now that you've tested locally and it all works, we need to push the changes to the IAP library and then the D+ app.<ul> <li>IAP Library<ul> <li>First, push up your changes.</li> <li>Then, make a PR. Tag Team Mandalorian to help review and possibly reach out to Shaun Rowe to delegate to the mobile core team.<ul> <li>Each PR in the Bam IAP Repository will need to be approved by someone from the Mobile core team.</li> </ul> </li> <li>Once the PR is merged, CI will publish the changes so that they are available to the D+ application.</li> </ul> </li> <li>D+ App<ul> <li>Once the changes are deployed, commit your changes.</li> <li>Build and run the app to ensure it is pulling from the new version properly.</li> <li>Push your changes and create the PR.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"features/paywall/lat_and_alpha_releases/","title":"Live App Testing and Alpha releases","text":"<p>This page details how to go about testing purchases on our IAP platforms.</p>"},{"location":"features/paywall/lat_and_alpha_releases/#lat-live-app-testing","title":"LAT (Live App Testing)","text":"<p>Normal debug builds do not interact with any Amazon service. For more info on this, see the Paywall Testing docs. To test interaction with Amazon services, we need to use Live App Testing (LAT) . LAT is a way to distribute test builds that interact with Amazon services.</p> <p>To do LAT releases, you need access to the Amazon developer console. To request access, reach out to an Android team lead.</p>"},{"location":"features/paywall/lat_and_alpha_releases/#uploading-a-lat-release","title":"Uploading a LAT release","text":"<ul> <li>Warning: do not end tests unless there is a specific request/reason for this. By stopping a   test, you will remove all the existing testers that are able to download the test.</li> <li>Download the release you want to upload from AppCenter. You   need to download both the Amazon TV and mobile APKs. You can also find the builds in   the <code>#dsplus-android-builds</code> Slack channel.</li> <li>Go to Amazon developer console and select   the app to release.<ul> <li>Note: you might need to switch User to find the proper app. Disney+ is managed by the Disney Electronic Content, Inc. user, while Star+ is managed by the Disney user. You can switch users by hovering over your profile icon in the top menu bar and selecting Change user.</li> <li>Disney+ listing ( only accessible when switched to the Disney Electronic Content, Inc. user).</li> <li>Star+ listing ( only accessible when switched to the Disney user).</li> </ul> </li> </ul> <ul> <li>Select Live App Testing in the menu.</li> <li>Select New Test.</li> <li>Select APK files. All metadata is copied from the previous release and usually does not need   to be changed.</li> <li>Replace the existing APKs with the new ones downloaded from App Center.</li> </ul> <ul> <li>Select Submit App.</li> <li>The release is now submitted. It will take a moment (usually less than an hour) for the release to   be processed and available. Do not stop any existing test. This will happen automatically when   the next release is processed. By stopping the previous release, you will remove all the existing   testers that are able to download the test.</li> </ul>"},{"location":"features/paywall/lat_and_alpha_releases/#alpha-internal-tracks","title":"Alpha &amp; Internal Tracks","text":"<p>Google provides multiple tracks for testing purposes. We utilize the Alpha closed track as well as the Internal test track. To do a release to the Google Play Store, you will need access to the Google Play Console . If you do not have access, please reach out to one of the leads.</p>"},{"location":"features/paywall/lat_and_alpha_releases/#obtain-aab-files","title":"Obtain AAB Files","text":"<p>We upload the Android App Bundles (AAB) to the Google Play Store. As a result, you will first need to obtain the AAB files.</p> <ul> <li>A build will be kicked in the #dsplus-android-builds Slack channel.</li> <li>Once the build successfully completes, links to the builds will be commented in a thread of the   original post. For example, you can see an example with the 2.3.0-rc1 builds   via this slack message.</li> <li>Find the Release AAB's. It will be structured in the following format:</li> </ul> <pre><code>build_status_android/Dmgz/release%2F2.3_4_mobileStarGoogleReleaseBundle: Uploaded successfully to https://bamazon-mobile-android-test-app-delivery.s3.amazonaws.com/2021-11-16_14-07-55_app-2.3.0-rc1-2111160-mobileStarGoogleRelease.zip with password: [PASSWORD_HERE]\n</code></pre> <ul> <li>It includes the following:<ul> <li>A link to a .zip file.</li> <li>The version of the app</li> <li>The variant of the build (e.g. <code>2.3.0-rc1-2111160-mobileStarGoogleRelease</code>)</li> <li>A password.</li> </ul> </li> <li>Copy the password</li> <li>Click the link. A zip file will be downloaded to your device.</li> <li>Open the zip file.</li> <li>Input the password.</li> <li>The <code>.aab</code> file will be placed in the same directory as the zip file.</li> <li>Do this for the Mobile and TV builds.</li> </ul>"},{"location":"features/paywall/lat_and_alpha_releases/#upload-to-the-google-play-store","title":"Upload to The Google Play Store","text":"<p>Next, we want to upload the AAB's to the Google Play Console.</p> <ul> <li>Open the Google Play Console.<ul> <li>Disney+</li> <li>Star+</li> </ul> </li> <li> <p>Submit to Internal Test track:</p> <ul> <li>Select <code>Testing -&gt; Internal Testing</code>. This will ensure we upload to the list of \"Internal\"   testers. This is a specific test track for internal testers. Find out   more here.   </li> <li>Click the <code>Create new release</code> button.    </li> <li>Locate the AAB's that you downloaded.</li> <li>Select all available AAB's (the TV and mobile files)</li> <li>Drag and drop into the available space    </li> <li>Scroll Down to the <code>Release Details</code></li> <li>Edit the Release Name so that it reflects the version name and build (e.g. <code>2.3.0-rc1</code>).</li> <li>For the release notes, it's sufficient to just do English and note the version:</li> </ul> <pre><code>&lt;en-US&gt;\n  2.3.0-rc1 - Internal\n&lt;/en-US&gt;\n</code></pre> <ul> <li>Click <code>Save</code></li> <li>Click <code>Review release</code></li> <li>Browse the information to make sure nothing is out of place. Ensure the build numbers are   as expected; ensure that no new unexepected permissions were added; etc.</li> <li>Click <code>Start rollout to Internal testing</code></li> <li>Click <code>Rollout</code>. This will begin immediately.</li> </ul> </li> <li> <p>Submit to Alpha Channel</p> <ul> <li>Click <code>Promote release -&gt; Closed testing -&gt; Alpha</code> </li> <li>This will create a new release with the uploaded AAB files that were added to the Internal   track.</li> <li>Ensure that all looks as it is supposed to.</li> <li>Remove the <code>Internal</code> portion in the release notes.</li> <li>If you made edits, click <code>Save</code>.</li> <li>Click <code>Review Release</code></li> <li>Again, ensure that everything looks in order.</li> <li>Scroll down to the <code>Staged roll-out</code> section. For alpha, there's no need to do a staged   rollout. Leave this value at 100%.</li> <li>Click <code>Start rollout to Alpha</code></li> <li>Click <code>Rollout</code></li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/","title":"One Time Payment SKU's","text":"<p>This document outlines the SKU's that are used for one time, in app payments within this project (for subscriptions, see subscription sku list). These are predominantly used for premier access.</p>"},{"location":"features/paywall/product_sku_list/#disney","title":"Disney","text":""},{"location":"features/paywall/product_sku_list/#prod-skus","title":"Prod SKU's","text":""},{"location":"features/paywall/product_sku_list/#raya","title":"Raya","text":"<ul> <li><code>73f2452b06fe1a3b36d919c51b245a84_disneygoogle</code> - NA/ANZ/EMEA<ul> <li>DMGZAND-7543</li> </ul> </li> <li><code>b10c4a097428f2be32190a12f3776efb_disneygoogle</code> - LATAM<ul> <li>DMGZAND-7543</li> </ul> </li> <li><code>a447990f945d6290b61eaca1d68765e6_disneyamazon</code> - LATAM<ul> <li>DMGZAND-7544</li> </ul> </li> <li><code>9398fea5b58cf93a6d12df0fc46889bc_disneyamazon</code> - NA/ANZ/EMEA<ul> <li>DMGZAND-7545</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#mulan","title":"Mulan","text":"<ul> <li><code>2856c3c376d24c05d95b9b510234a75b_disneyamazon</code><ul> <li>OMOP-292</li> </ul> </li> <li><code>838a0e7422e77bbbc260b0ed2fce8a8f_disneygoogle</code><ul> <li>OMOP-291</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#black-widow","title":"Black Widow","text":"<ul> <li><code>7d591dfdd998619cdbc861d8f0c731ea_disneygoogle</code> - NA/ANZ/EMEA<ul> <li>DMGZAND-8241</li> </ul> </li> <li><code>e918e746237e174d9ae4fa31c3241faf_disneygoogle</code> - LATAM<ul> <li>DMGZAND-8244</li> </ul> </li> <li><code>f5cdbc21480357585f2a9ce15548295a_disneyamazon</code> - LATAM<ul> <li>DMGZAND-8242</li> </ul> </li> <li><code>aa2604a17f253e60ed9e7c12847b1d9c_disneyamazon</code> - US/ANZ/EMEA/SG<ul> <li>DMGZAND-8245</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#cruella","title":"Cruella","text":"<ul> <li><code>95d296843653432c6aeb3a90a151ce2c_disneygoogle</code> - NA/ANZ/EMEA<ul> <li>DMGZAND-8247</li> </ul> </li> <li><code>849efa38f3d2c73d829217c362d46910_disneygoogle</code> - LATAM<ul> <li>DMGZAND-8248</li> </ul> </li> <li><code>b4b2ca47bc8b3b0397f1922d683cf730_disneyamazon</code> - LATAM<ul> <li>DMGZAND-8246</li> </ul> </li> <li><code>6c3fdcf846c46f13a51cfd993295d9f7_disneyamazon</code> - NA/ANZ/EMEA<ul> <li>DMGZAND-8249</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#jungle-cruise","title":"Jungle Cruise","text":"<ul> <li><code>97287272c9fca20fdb49ffc68f60c527_disneygoogle</code> - LATAM<ul> <li>DMGZAND-8509</li> </ul> </li> <li><code>932c271bc374b113905f2656a122bf7c_disneygoogle</code> - NA/ANZ/EMEA<ul> <li>DMGZAND-8521</li> </ul> </li> <li><code>9f52f908d6a3bedd95372efea22b0103_disneyamazon</code> - LATAM<ul> <li>DMGZAND-8519</li> </ul> </li> <li><code>6a55f6538530bfac355595b49711bbac_disneyamazon</code> - NA/ANZ/EMEA<ul> <li>DMGZAND-8520</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#test-skus","title":"Test SKU's","text":""},{"location":"features/paywall/product_sku_list/#jungle-book-qa","title":"Jungle Book QA","text":"<ul> <li><code>67e49241e4ab5f114b8aa256571593cd_disneygoogle</code><ul> <li>DMGZAND-8386</li> </ul> </li> <li><code>67e49241e4ab5f114b8aa256571593cd_disneyamazon</code><ul> <li>DMGZAND-8385</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#star","title":"Star","text":""},{"location":"features/paywall/product_sku_list/#prod-skus_1","title":"Prod SKU's","text":"<p>None as of now.</p>"},{"location":"features/paywall/product_sku_list/#test-skus_1","title":"Test SKU's","text":""},{"location":"features/paywall/product_sku_list/#finding-nemo","title":"Finding Nemo","text":"<ul> <li><code>4e13cb294f9743e5f5c44bd57ca1dc6b_starstarpafindingneamazon.amazon</code><ul> <li>ALCMYAND-410 / ALCMYANDST-313</li> </ul> </li> <li><code>0da131e7686ae6567d8e9241e13b06f3_starstarfindingnemogoogle.google</code><ul> <li>ALCMYAND-408 / ALCMYANDST-311</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#jungle-book","title":"Jungle Book","text":"<ul> <li><code>e24a0e177a4103ee7131c8a5a9510659_starstarpajunglebooamazon.amazon</code><ul> <li>ALCMYAND-411 / ALCMYANDST-314</li> </ul> </li> <li><code>d838d9f288f2dd683c6ce22a2b57d3b1_startestpagooglejunglebook.google</code><ul> <li>ALCMYAND-409 / ALCMYANDST-312</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#spies-in-disguise","title":"Spies in Disguise","text":"<ul> <li><code>bdd2cb32bfb92557ead2533a11cf5580_starstarpaspiesamazon.amazon</code><ul> <li>ALCMYAND-412 / ALCMYANDST-315</li> </ul> </li> <li><code>623216d49774783223f80f6fc8007ff4_startestpagooglespies.google</code><ul> <li>ALCMYAND-413 / ALCMYANDST-316</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#live-free-or-die-hard-deprecated-2021-06","title":"Live Free or Die Hard: - Deprecated 2021-06","text":"<ul> <li><code>com.star.ppv.starpremieraccesstest.google</code> - BO/BR/CL/CO/CR/MX/PY/PE<ul> <li>OMOP-1900</li> </ul> </li> <li><code>com.star.ppv.starpremieraccessamazon.amazon</code> - BR<ul> <li>OMOP-1903</li> </ul> </li> </ul>"},{"location":"features/paywall/product_sku_list/#12-rounds-deprecated-2021-06","title":"12 Rounds: - Deprecated 2021-06","text":"<ul> <li><code>com.star.ppv.starpremieraccesstest2.google</code> - BO/BR/CL/CO/CR/MX/PY/PE<ul> <li>OMOP-1900</li> </ul> </li> <li><code>com.star.ppv.premieramazonstar2.amazon</code> - BR<ul> <li>OMOP-1903</li> </ul> </li> </ul>"},{"location":"features/paywall/refactor/","title":"Paywall Refactor","text":"<p>This document outlines the details of the paywall refactor. This was started in late 2021 with the following goals:</p> <ul> <li>Update the Paywall to the latest standards of the codebase.</li> <li>Reduce complexity within the Paywall codebase.</li> <li>Remove redundant classes/files (such as <code>DmgzPaywall</code> and <code>PaywallProduct</code>) and replace with more recent classes such as <code>MarketProduct</code> and <code>Paywall&lt;SessionState.Product&gt;</code>.</li> </ul> <p>There are several ways that the paywall has come to be defined over the past several years, resulting in multiple \"types\". These types include:</p> <ul> <li>Subscription Paywall - The paywall that the users sees when entering the application as an unentitled user. This will allow the user to purchase a subscription. This is further broken down in to two additional types that simply alter the text on the screen:</li> <li>Complete Subscription - This indicates the user is a first time user and has never subscribed previously.</li> <li>Restart Subscription - This indicates the user has previously been subscribed, but their entitlement has expired.</li> <li>Premier Access Paywall - The paywall that the user sees when attempting to purchase a Premier access title. This is a single-button Paywall with an altered logo.</li> <li>Plan Switch Paywall - The paywall that the user sees when attempting to switch their current subscription from a Monthly subscription to a Yearly subscription.</li> <li>Promotion Paywall - The paywall that the user sees when attempting to purchase a subscription during a promotional period, such as the offer used in 2021 for Disney+ Day. The UI was significantly altered in this scenario to bring further attention to the monthly price.</li> </ul>"},{"location":"features/paywall/refactor/#implementation","title":"Implementation","text":""},{"location":"features/paywall/refactor/#class-diagram","title":"Class diagram","text":"<p>High level diagram of the UI set up:</p> <p></p>"},{"location":"features/paywall/refactor/#starting-the-paywall","title":"Starting the Paywall","text":"<p>To start the Paywall, one must define the proper <code>PaywallParameters</code> and pass that in to the <code>PaywallFragment.newInstance()</code> method. There are several options available that correspond with the types of paywall listed above.</p> <ul> <li><code>SubscriptionPaywall</code> - This will start the Paywall for the Subscription Paywall use case. Just like above, this is broken in to two types:</li> <li><code>CompleteSubscription</code> - This starts the Paywall in the \"Complete Subscription\" state and takes a boolean that determines if we're in the \"RegisterAccount\" flow (which will ensure that the proper subscription confirmation dialog is displayed for this use case, post purchase).</li> <li><code>RestartSubscription</code> - This starts the Paywall in the \"Restart Subscription\" state.  </li> <li><code>PremierAccess</code> - This will start the Paywall for the Premier Access use case to purchase a title. This takes a required <code>Parcelable</code>. As of right now, the only supported class type accepted is <code>Movie</code> from the <code>coreContentApi</code>.</li> <li><code>PlanSwitch</code> -  This will start the Paywall for the plan switch use case. This takes a <code>purchaseToken</code>, which is the token that represents the users current subscription. This is required in order to switch from their current subscription to the new SKU. Note: At this time, this is only supported on Google.</li> </ul>"},{"location":"features/paywall/refactor/#paywallfragment","title":"<code>PaywallFragment</code>","text":"<p>The UI is set up in a way that uses a single fragment that populates the UI based on the above described types. The XML contains common elements and a container view represented by a <code>ConstraintLayout</code>. This container is inflated by the <code>PaywallFragment</code>, and the contents of this view are defined in an instance of a <code>PaywallTypePresenter</code> that is selected. See Presenters for more information on how that is set up.</p> <p></p>"},{"location":"features/paywall/refactor/#presenters","title":"Presenters","text":"<p>There are two different presenters that will be used in setting up the UI for this fragment:</p> <ul> <li>The <code>CommonPaywallPresenter</code> which is responsible for the <code>PaywallFragment</code>'s overall UI.</li> <li>The <code>PaywallTypePresenter</code> which is an interface who's implementations will be responsible for setting up the UI within the container of the <code>CommonPaywallPresenter</code>. There will only be one instance of a <code>PaywallTypePresenter</code> at a time (scoped to the Fragment's view), but there are multiple that can be created.</li> </ul> <p>To see which type of presenter is created, see the following diagram:</p> <p></p> <p>The following is a sequence diagram that describes the interaction between classes:</p> <p></p>"},{"location":"features/paywall/refactor/#fetching-data","title":"Fetching Data","text":"<p>The data comes from a couple of places:</p> <ul> <li><code>SessionState</code> - which is pulled from our Orchestration API.</li> <li>The IAP Market - This is the Google Play Store or the Amazon App Store.</li> </ul> <p></p>"},{"location":"features/paywall/set_up_sku/","title":"Setting up SKU\u2019s","text":"<p>If you\u2019re reading this you\u2019re probably being asked to add SKU\u2019s to the Amazon and Google Play store. This guide will walk you through the steps including additional steps required for making the SKU's available for testing.</p>"},{"location":"features/paywall/set_up_sku/#before-you-begin","title":"Before you begin","text":"<p>Requirements</p> <p>Make sure to have access to the following things, if you have no access ask your team lead to get access:</p> <ul> <li>Access to the Amazon Developer Console</li> <li>Access to Firebase (Project: Disney Plus Internal)</li> <li>Access to the Google Play Developer Console</li> </ul>"},{"location":"features/paywall/set_up_sku/#important-information","title":"Important information","text":"<p>Check if the JIRA ticket contains following information:</p> <ul> <li>Friendly (SKU) Name</li> <li>Product Key</li> <li>Pricing\u2019s table</li> </ul>"},{"location":"features/paywall/set_up_sku/#amazon","title":"Amazon","text":""},{"location":"features/paywall/set_up_sku/#create-iap-item","title":"Create IAP Item","text":"<ul> <li>Go to the Amazon Developer console at https://developer.amazon.com/</li> <li>Hover your mouse over Apps &amp; Services and click on My Apps</li> <li>Click on the app that you want to add the SKU for</li> <li>On the left pane go to In-App Items</li> <li>Now click on the button Add Single IAP</li> </ul> <p>There are a couple of IAP\u2019s you can add. Here\u2019s a brief explanation what they mean:</p> Type Description Consumable Currently we do not use this one. A consumable is a product that you can buy multiple times. Such as a life or coins in-game items. Entitlement An entitlement is access to a certain thing. For example, we use it for Premier Access. Subscription A recurring purchase. We use it for monthly and yearly subscriptions."},{"location":"features/paywall/set_up_sku/#entitlement-sku","title":"Entitlement SKU","text":"<p>Now click on the IAP type that you want to add and it will ask you for two things:</p> <ul> <li>Title: For Amazon you can choose your own naming here since it\u2019s only used in this dashboard. An example, when we\u2019ve added Jungle Book for the QA environment we named in: Jungle Book QA. It\u2019s the name listed in the title row of the table on the page with In-App Items.</li> <li>SKU: This one is important. Add the product key that should be supplied in the JIRA ticket</li> </ul> <p>You\u2019ll now see the IAP item page and we\u2019ll have to finish submitting all the other information.</p> <ul> <li>Display Title: Add friendly name here. This one will be shown on the receipt</li> <li>Description: Copy and paste the friendly name here</li> </ul>"},{"location":"features/paywall/set_up_sku/#subscription-sku","title":"Subscription SKU","text":"<p>There's two SKU's to input in for Subscriptions:</p> <p>Subscription SKU - What we call <code>Parent SKU's</code>. This is the first SKU that is asked of you when creating the subscription (see image below). For this, we append a .parent to the end of it. For example, if the SKU being asked to add to the Amazon store is <code>com.disney.yearly.disneyplus.amazon</code>, then we will input <code>com.disney.yearly.disneyplus.amazon.parent</code> here.</p> <p></p> <p>Term SKU - This is the SKU that is subscribed to. When making a subscription, we have to click \"Add New Term\". That brings up the screenshot below. This allows us to associate separate SKU's to a single parent SKU. The way we have it set up is on a 1-1 basis (meaning 1 term and 1 parent).</p> <p></p>"},{"location":"features/paywall/set_up_sku/#set-iap-pricing","title":"Set IAP pricing","text":"<p>Note: If you're adding a subscription, before you can add any pricing make sure to setup the term sku first as described in the section above.</p> <p>Now scroll down to the pricing part and you\u2019ll have to set the [no/yes] toggle to yes so that we can charge for this IAP item. For this you\u2019ll need to use the pricing table that is supplied in the JIRA ticket.</p> <p>Click on the button to add/edit the pricing.</p> <ul> <li>First set the US price from the table and calculate all other prices based on that. Before closing the dialog, let\u2019s now manually set the other prices that you can find in the table of your JIRA ticket.</li> <li>Go over the prices one by one and make sure most of them are matching. I.e. European prices for European countries, UK and Austrialian price will be separate and so will also most of the other countries. It may be that when you\u2019re adding this for QA testing purposes some countries are missing in the table, this is ok for now and something you can ignore.</li> <li>Save the prices</li> <li>Set the product tax code: to <code>A_EGOOD_VIDEOONDEMAND</code></li> </ul> <p>Now double check all the information and submit the IAP item when you\u2019re done</p>"},{"location":"features/paywall/set_up_sku/#update-test-json","title":"Update test JSON","text":"<p>We have a firebase project that contains a json with all the available SKU\u2019s that is used for the IAP Tester app. Now that we\u2019ve added a new SKU we need to update this JSON in order to test the new SKU with our local builds.</p> <ul> <li>Go to the In-App Items page in the Amazon developers console</li> <li>Click on Export Multiple IAPs and choose JSON</li> <li>Rename the file that you\u2019ve just downloaded from the Amazon console to: <code>amazon.sdktester.disney.json</code> or <code>amazon.sdktester.star.json</code> depending on the project that you\u2019re updating the SKU\u2019s for.</li> <li>Now go to the storage section of our Disney internal firebase project here</li> <li>Click on Upload file and select the json file that you downloaded and renamed earlier</li> <li>Refresh the page and <code>amazon.sdktester.json</code> should be updated (see Last modified date).</li> <li>Click on that file and in order to complete this part, you\u2019ll have to click on File location in the right pane and then click on Create new access token.</li> <li>The name of the file in the right pane should\u2019ve changed to a blue clickable link. Click on the Name and it\u2019ll open the json. Validate if the newly added SKU is in there.</li> </ul> <p>You should now be able to update the json of the IAP tester app and test out the new SKU.</p> <p>Find the helper app and more information here:</p> <ul> <li>Android project for the helper app: https://github.bamtech.co/arietschlin/Dmgz-Amazon-IAP-Helper/blob/main/README.md</li> <li>Node project that does the merging: https://github.bamtech.co/arietschlin/Dmgz-Amazon-Iap-Helper-Node/blob/main/README.md</li> </ul>"},{"location":"features/paywall/set_up_sku/#google","title":"Google","text":""},{"location":"features/paywall/set_up_sku/#create-in-app-product","title":"Create In-app product","text":"<ul> <li>Go to the Google Play Console</li> <li>Now go to <code>Products &gt; In-app products</code> in the left menu pane</li> <li>Then click on Create product</li> <li>You\u2019ll now navigate to a page to create an In-app product item.</li> <li>Product ID: This is the <code>product key</code> in your JIRA ticket. (Note, this is different than Amazon. Do not use the friendly name here but the product key often ending with <code>_{brand}{google}</code></li> <li>Name: Use the Friendly name here</li> <li>Description: Also use the friendly name here</li> </ul>"},{"location":"features/paywall/set_up_sku/#set-in-app-product-pricing","title":"Set In-app product pricing","text":"<p>Now below on the In-app product page you will set the pricing of the different countries and currencies based on the table that you can find in your JIRA ticket.</p> <p>Note: on QA there\u2019s often countries missing in the table of the ticket or some countries mentioned in the ticket aren\u2019t in the pricing table of the Google ticket. Don\u2019t worry about this, you can ignore that for now. Important is that you use the countries that match between the ticket and the google store pricing table.</p> <ul> <li>Click on Set price</li> <li>Use the US dollar here as Default price</li> <li>Now go over each country in the JIRA ticket and make sure the correct price is set with countries that match between the ticket and the dialog on the play store page.</li> <li>If you\u2019re done press Apply prices</li> <li>Double check all the information on the page</li> <li>Click on Save and after that confirm again to submit the new IAP product.</li> </ul>"},{"location":"features/paywall/set_up_sku/#add-sku-to-the-readme","title":"Add SKU to the README","text":"<p>We have two lists that have all the SKU's listed across Disney+ and Star+</p> <ul> <li>If you've added a subscription, add it to the list here</li> <li>If you've added a product such as an premier access title, add it to the list here</li> </ul>"},{"location":"features/paywall/sku_list/","title":"Subscription SKU's","text":"<p>This document outlines the SKU's that are used for subscriptions within this project (for in app products, see product sku list). This includes all applications supported (Disney+ and Star+)</p>"},{"location":"features/paywall/sku_list/#disney","title":"Disney+","text":"<ul> <li><code>com.disney.monthly.usdisneyplus2021.google</code></li> <li><code>com.disney.yearly.usdisneyplus2021.google</code><ul> <li>Term: Yearly/monthly SKU's</li> <li>Regions: US Only</li> <li>Platform: Google Only</li> <li>Description: These were created for Google only because of the way that Google wanted to do the price change. They told us to increase the price of the existing SKU's (<code>com.disney.(yearly|monthly).disneyplus(7dft).google</code>) a month early. In order to ensure that the new Price was not exposed to new users, we created these two SKU's.</li> <li>Prices (US Based):<ul> <li>Original: $6.99/$69.99</li> <li>03/26/21: Increased to $7.99/$79.99</li> </ul> </li> </ul> </li> <li><code>com.disney.monthly.disneyplus7dft.google</code></li> <li><code>com.disney.yearly.disneyplus7dft.google</code><ul> <li>Term: Yearly/monthly SKU's, with Free Trial</li> <li>Regions: All (some regions did not get this, but not sure which)</li> <li>Platform: Google/Amazon</li> <li>Description: These were the first SKU's created for Disney+ (along with the non-<code>7dft</code>and included a free trial.<ul> <li>The price was increased on February 23rd for US only.</li> </ul> </li> <li>Prices (US Based):<ul> <li>Original: $6.99/$69.99</li> <li>02/23/21: Increased to $7.99/$79.99</li> </ul> </li> </ul> </li> <li><code>com.disney.monthly.disneyplus.google</code></li> <li><code>com.disney.yearly.disneyplus.google</code><ul> <li>Term: Yearly/monthly SKU's</li> <li>Regions: All (some regions did not get this, but not sure which)</li> <li>Platform: Google/Amazon</li> <li>Description: These were the first SKU's created for Disney+ and included a free trial.<ul> <li>The price was increased on February 23rd for US only.</li> </ul> </li> <li>Prices (US Based):<ul> <li>Original: $6.99 / $69.99</li> <li>02/23/21: Increased to $7.99/$79.99</li> </ul> </li> </ul> </li> <li><code>com.disney.monthly.disneyplus2021.google</code></li> <li><code>com.disney.yearly.disneyplus2021.google</code><ul> <li>Term: Yearly/monthly SKU's</li> <li>Regions: Originally just Star/Welch countries. For Amazon, this was introduced to US on 03/26/21.</li> <li>Platform: Google/Amazon</li> <li>Description: These were the SKU's used with the intention of increasing the price to all users.</li> <li>Prices (US Based):<ul> <li>Original: $6.99 / $69.99</li> <li>02/23/21: Increased to $7.99/$79.99</li> </ul> </li> </ul> </li> <li><code>com.disney.monthly.dplusday21.google</code></li> <li><code>com.disney.monthly.dplusday21.amazon</code><ul> <li>Term: Monthly SKU</li> <li>Regions: All except APAC.</li> <li>Platform: Google/Amazon</li> <li>Description: These were SKU's used for the Disney+ Day offer in 2021. This was an offer that started at $1.99 for the first three months, then normal pricing afterwards. Some additional notes:<ul> <li>For Google, we are using the Introductory Pricing.<ul> <li>How to set up introductory pricing</li> <li>Developer Documentation</li> </ul> </li> <li>For Amazon, we set the prices at the introductory offer ($1.99), then performed a price increase after three months</li> </ul> </li> <li>Prices (Us Based):<ul> <li>Original: $7.99</li> <li>Introductory Price: $1.99</li> </ul> </li> </ul> </li> <li><code>com.disney.monthly.dplusday22.google</code></li> <li><code>com.disney.monthly.dplusday22.amazon</code><ul> <li>Term: Monthly SKU</li> <li>Regions: All except APAC.</li> <li>Platform: Google/Amazon</li> <li>Description: These were SKUs used for the Disney+ Day offer in 2022. The setup was identical to 2021.</li> <li>Prices (US Based):<ul> <li>Original: $7.99</li> <li>Introductory Price: $1.99</li> </ul> </li> </ul> </li> <li><code>com.disney.monthly.dpluswithads.google</code></li> <li><code>com.disney.monthly.dpluswithads.amazon</code><ul> <li>Term: Monthly SKU</li> <li>Regions: US.</li> <li>Platform: Google/Amazon</li> <li>Description: The Monthly SKUs for Disney+ with ads.</li> <li>Prices (US Based):<ul> <li>Original: $7.99</li> </ul> </li> </ul> </li> </ul>"},{"location":"features/paywall/sku_list/#star","title":"Star+","text":"<ul> <li><code>com.star.monthly.starplus.google</code></li> <li><code>com.star.yearly.starplus.google</code><ul> <li>Term: Yearly/monthly SKU's</li> <li>Regions: All Star+ based regions.</li> <li>Platform: Google/Amazon</li> <li>Description: These were the first SKU's created for Star+ and included a free trial.<ul> <li>The price was increased on February 23rd for US only.</li> </ul> </li> <li>Prices:<ul> <li>As of the time of this writing, pricing has not been finalized.</li> </ul> </li> </ul> </li> </ul>"},{"location":"features/paywall/sku_list/#pricing","title":"Pricing","text":"<p>Note: The above pricing information is US based at the moment. In the resources below is a link to a wiki page with every single region and their expected price. The prices are defined by the Offer Management team (or at least passed to us from them via a JIRA ticket). In general, both Amazon and Google will do an automatic conversion for you when you enter the base price. However, that rarely (if ever) matches the expected price from Offer Management. As a result, it is required to update each region individually on the Amazon Appstore and Google Play Store.</p>"},{"location":"features/paywall/sku_list/#resources","title":"Resources","text":"<ul> <li>Current Pricing and Platform Support</li> <li>Product Overview &amp; Requirements - A list of every region we support and their expected requirements (login only vs signup).</li> <li>Amazon's Countries and territories<ul> <li>Whereas Google supports individual countries, Amazon IAP support is divvy'd up by regions, called \"marketplaces\". This link shows the list of supported countries by marketplace.</li> </ul> </li> <li>Price change docs<ul> <li>February 23rd Price Change Wiki</li> </ul> </li> </ul>"},{"location":"features/paywall/testing/","title":"Testing Purchases","text":"<p>This page details how to go about testing purchases on our IAP platforms.</p>"},{"location":"features/paywall/testing/#testing-google-purchases","title":"Testing Google Purchases","text":"<p>In order to test Google purchases, the following criteria must be met:</p>"},{"location":"features/paywall/testing/#google-account-setup","title":"Google account setup","text":"<ul> <li>Your Google account that you are logged in to on your test device needs to be set up as a licensed tester.<ul> <li>Only a few members of the team have permission to add licensed testers. This is because it's an admin level permission and Google limits the number of accounts to 400 licensed testers company wide (not just DSS, but TWDC).</li> <li>Reach out to your team lead and supply them the desired Google account you would like to licensed as a tester.<ul> <li>Note: your <code>first.last@disneystreaming.com</code> is Gsuite enabled and is supported as a Google account.</li> </ul> </li> </ul> </li> <li>Next, you will need to be added as a \"tester\" for the desired app.<ul> <li>There are two groups of testers on the Play Console at the time of this writing: <code>Disney+ Internal</code> and <code>Star+ Internal</code>. The email will need to be added to one of these lists (or both).</li> <li>While logged in to that Google account that was added, opt in as a tester for the following links:<ul> <li>Disney+:<ul> <li>Alpha</li> <li>Internal</li> </ul> </li> <li>Star+:<ul> <li>Alpha</li> <li>Internal</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>At this stage, you should be able to make a test purchase. From here, when entering the application, you should be presented with a test purchase dialog from Google.</p>"},{"location":"features/paywall/testing/#store-listing-must-be-available","title":"Store listing must be available","text":"<p>First and foremost, an app with the same package name must be uploaded to the Play Store. For most instances, this will have already been set up as Disney+ has been released since 2019, and Star+ store listings were created in March, 2021. If additional apps are to be spawned from the codebase (like Star+), the process is as follows:</p> <ul> <li>Create the Store listing.</li> <li>Follow the steps for the bare minimum of a release. This includes:<ul> <li>Filling out the Main Store Listing.<ul> <li>This includes app icon, screenshots, description. For Star+, we simply re-used Disney+ assets. Those are to be replaced at a later date with actual Star+ assets.</li> </ul> </li> <li>Release an APK to the Internal Test Track. Be certain that this is not being released to production.</li> <li>Set up a list of testers.</li> </ul> </li> <li>SKU's must be uploaded to the store listing.<ul> <li>First, the SKU's must be created by the Offer Management team.</li> <li>Once SKU's are defined, upload them to the list of subscriptions.</li> <li>If the app is not available, it is important to not set a low price. This is because Google showcases a range of pricing information on the Play Store. For example, if one sets the price to $1.99 for monthly, and $10.99 for yearly, Google will display <code>$1.99 - $10.99</code>. Therefore, it's a good idea to set a middle ground, such as $15.99 and $29.99.</li> </ul> </li> <li>The new app must be set up as an accepted \"partner\" from Activation's perspective.<ul> <li>Reach out to someone on the Activation team to let them know a new store is being created. (<code>#activation</code> in slack).</li> <li>The Activation will need to utilize utilize the OAuth Client ID that is associated with the Google Play Developer account. This is the same Client ID that is used by Disney+, Star+ and ESPN+.</li> </ul> </li> </ul>"},{"location":"features/paywall/testing/#testing-amazon-purchases","title":"Testing Amazon Purchases","text":"<p>For Amazon, there are two ways to test purchases.</p>"},{"location":"features/paywall/testing/#sandbox-testing","title":"Sandbox Testing","text":"<p>Sandbox testing within amazon is an entirely local to your device method of testing. This does not interact with Amazon in any way.</p> <p>Warning</p> <p>Sandbox testing is only supported in the QA environment on Amazon.</p> <p>This is done via an Amazon-provided app called Amazon App Tester. The app tester uses a file on the device called <code>amazon.sdktester.json</code>.</p> <p>To help ensure that all dev and QA devices are up to date, we have an internal application called Amazon IAP Helper (found on Appcenter here). This application pulls down a file from a Firebase console with the necessary SKU's for all projects we support. See the README on the Amazon IAP Helper app for more details.</p>"},{"location":"features/paywall/testing/#live-app-testing-lat","title":"Live App Testing (LAT)","text":"<ul> <li> <p>\"Live App Testing\" is a mechanism provided by Amazon that actually interacts with Amazon's services</p> </li> <li> <p>This completely ignores the <code>amazon.sdktester.json</code> file and instead pulls from Amazon</p> </li> <li>This requires a \"LAT\" release to be done and one must be invited to the console</li> <li>Here are the links to deliver the newest LAT build to your Fire TV / Fire Tablet<ul> <li>Disney+</li> <li>Star+</li> </ul> </li> <li>If you have access to the console, you can reset LAT purchases here<ul> <li>Oftentimes QA members request this, or you might need it when testing LAT</li> <li>It resets for both QA and PROD</li> <li>Select <code>Reset In-app items</code><ul> <li><code>Reset Tester Entitlements</code> - This will reset premiere access</li> <li><code>Reset Tester Subscriptions</code> - This will reset a subscription to the app</li> </ul> </li> </ul> </li> <li>More info on setting up LAT</li> <li>For more information on LAT and how to do releases, see the LAT and Alpha releases docs.</li> </ul>"},{"location":"features/promo-labels/","title":"Promo Labels","text":"<p>Promo Labels are presented on Details pages for users to be informed of information on premier access or coming soon contents.</p> <p>Example</p> Coming soon to Disney+ New season airs tonight at 8pm"},{"location":"features/promo-labels/#coming-soon-promo-label","title":"Coming Soon Promo Label","text":"<ul> <li>When a movie/series is in coming soon state, most of the times, a Trailer button will be displayed to promote the title</li> <li>When rendering details page buttons, we look for a valid promolabel: if there is no playable and there is a promolabel and extra video (trailer or clip), we will display play trailer/extra clip button</li> <li>see methods: <code>getPromoPlayable</code>, <code>hasPromoPlayable</code> and <code>isMainButtonWatchlist</code></li> </ul>"},{"location":"features/promo-labels/#premier-access-promolabels-comingsoonearlyaccess-and-availableearlyaccess","title":"Premier Access Promolabels: ComingSoonEarlyAccess and AvailableEarlyAccess","text":""},{"location":"features/promo-labels/#how-purchase-data-is-loaded-on-details-screen","title":"How Purchase Data is Loaded on Details Screen","text":"<p>In the <code>DetailsPurchaseDelegate</code> we can find all the code related to EarlyAccess <code>PurchaseResult</code> parsing. There are two types of Early Access (Premier Access): ComingSoonEarlyAccess and AvailableEarlyAccess. For a certain content detail, purchase result is evaluated and returned as below:</p> <p></p> <p>With this information we use the <code>PurchaseResult</code> in our getHeaderList method from <code>DetailHeaderPresenter</code> to get the correct headers in the details page. We currently have two types of headers, PROMO_LABEL and PREMIER_ACCESS. The first one reflects coming soon content and the last one premier access content. There's quite some logic in that method to obtain the headers according to the priority of them, please check <code>DetailHeaderPresenter</code> to get more information.</p>"},{"location":"features/promo-labels/#promo-label-prioritization","title":"Promo Label Prioritization","text":"<p>Promo Label should have below priority List:</p> <ol> <li>Coming Soon - Any title that has a promoLabels.type == ComingSoon should take priority.</li> <li>IMAX - if a content is IMAX eligible</li> <li>shopDisney - If both Coming Soon and IMAX data do not exist and promoLabels.type == shop and shop tab is available then display shopDisney promo label.</li> </ol> <p>Resulting in: Coming Soon Promo labels &gt; IMAX promo labels &gt; shopDisney promo labels</p>"},{"location":"features/promo-labels/#feature-info","title":"Feature Info","text":""},{"location":"features/promo-labels/#availability","title":"Availability","text":"Availability  Disney+  Star+  Mobile  TV  Regions  All regions"},{"location":"features/promo-labels/#how-to-test","title":"How to test","text":"<ul> <li>Premier Access: Open Disney+ on mobile or TV using the QA environment</li> </ul> Testing Entitled Premier Access Entitled: Use jarvis visionware premier_access configuration and Toy Story movie. Entitled with bookmark: Use jarvis visionware premier_access configuration and Toy Story movie. Play the movie and after a minute go back. Testing Early Access with Price Available early access with price: Use jarvis visionware premier_access_not_purchased configuration and enable the jarvis override toggle \"Ignore SKU and Market Products\" within the In App Purchases and Paywall section. Make sure you use a device with play services and that you're logged in with your google account in the play store Open the Mulan movie. You should see an early access with price and purchase button. Coming soon early access with price: Use jarvis visionware premier_access_coming_soon_purchasable configuration and enable the jarvis override toggle \"Ignore SKU and Market Products\" within the In App Purchases and Paywall section. Make sure you use a device with play services and that you're logged in with your google account in the play store. Open the Mulan movie. You should see an early access with price and no purchase button. Testing Early Access Purchase not Available Coming soon early access purchase not available (without price): Use jarvis visionware premier_access configuration and Raya movie. You should see the early access banner without any price and no purchase button. Available early access purchase not available (without price): Use jarvis visionware premier_access_available_not_purchasable configuration. Open the Mulan movie. You should see the early access banner without any price and no purchase button. GAP Premier Access not Purchasable <p>Use jarvis visionware premier_access_not_purchasable configuration. Open the Mulan movie. You should see a message as if the movie was a coming soon and not premier access.  </p> <ul> <li>Coming Soon V2: Open Disney+ on Production environment.</li> </ul> Testing Coming Soon Coming Soon with Title: Use jarvis visionware coming_soon_v2 configuration and Turning Red movie. Coming soon with title and description: Use jarvis visionware coming_soon_v2 configuration and Agents of SHIELD movie."},{"location":"features/promo-labels/#relevant-classes","title":"Relevant classes","text":"<ul> <li><code>DetailsPurchaseDelegate.kt</code></li> <li><code>PurchaseResult.kt</code></li> <li><code>DetailPromoLabelPresenter.kt</code></li> <li><code>DetailHeaderPresenter.kt</code></li> </ul>"},{"location":"features/promo-labels/#additional-details-and-tickets","title":"Additional Details and Tickets","text":"<ul> <li>Coming Soon Content</li> <li>FED Solution Architecture</li> <li>FED Early Access</li> <li>Lucid chart source file</li> </ul>"},{"location":"features/promo-labels/#designs","title":"Designs","text":"<ul> <li>Coming Soon</li> <li>Premier Access</li> </ul>"},{"location":"features/search/","title":"Search","text":"<p>Search is where a user can search for content. When first landing on Search, there are some default tiles that can be seen. Product sometimes refers to this as Explore</p>"},{"location":"features/search/#suggestions","title":"Suggestions","text":"<ul> <li>Only exists on TV for Disney+</li> <li>After a user types enters a letter on Search, we display any suggestions returns from our suggestions API</li> <li>Relevant classes<ul> <li><code>KeyboardSearchSuggestionClickListener.kt</code></li> <li><code>KeyboardSuggestionAvailabilityListener.kt</code></li> <li><code>SearchSuggestionsViewModel.kt</code></li> <li><code>KeyboardResultsPresenter.kt</code></li> </ul> </li> </ul>"},{"location":"features/search/#recent-search","title":"Recent Search","text":"<ul> <li>Only exists on mobile</li> <li>After clicking into the search field to search, we display a dropdown of your most recent searches</li> <li>Relevant classes<ul> <li><code>RecentSearchesLogoutAction.kt</code></li> <li><code>RecentSearchItem.kt</code></li> <li><code>RecentSearchModels.kt</code></li> <li><code>RecentSearchRepository.kt</code></li> <li><code>RecentSearchViewModel.kt</code></li> <li><code>PersistentRecentSearches.kt</code></li> </ul> </li> </ul>"},{"location":"features/search/#categories","title":"Categories","text":"<ul> <li>Only exists on Star+</li> <li>Categories let a user filter the search results<ul> <li>Examples - All Results, Movies &amp; Series, Sports, etc.</li> </ul> </li> <li>Relevant classes<ul> <li><code>SearchCategoriesItem.kt</code></li> <li><code>SearchCategoryRepository.kt</code></li> <li><code>SearchCategoryViewModel.kt</code></li> </ul> </li> </ul>"},{"location":"features/search/#grid-keyboard","title":"Grid Keyboard","text":"<ul> <li>Only exists on TV devices</li> <li>Grid Keyboard is our custom keyboard implementation that supports many different languages and enables users to search on TV without a hardware keyboard</li> <li>It is in its own module and exposes a <code>gridKeyboardApi</code> module</li> <li>Relevant classes<ul> <li><code>GridKeyboardView.kt</code></li> <li><code>GridKeyboardViewPresenter.kt</code></li> <li><code>keyboard_config.json</code></li> </ul> </li> </ul>"},{"location":"features/search/#focus","title":"Focus","text":"<ul> <li>Handling focus on TV can be a bit tricky. For Search, this logic is handled inside of <code>SearchTvKeyDownHandler</code></li> <li>See <code>OnKeyDownHandler</code> to understand how we go about choosing the Fragment that handles custom focusing logic</li> <li>There are a few tricky animations that need to be coordinated with certain focusing rules. For example:<ul> <li>User searches. Scrolls down a bit. Types in another letter to search  scroll animation to top</li> <li>User searches. Scrolls down a bit. Deletes a letter  scroll animation to top</li> <li>User searches. We show suggestions  animate down a bit to show the suggestions</li> </ul> </li> <li>In accessibility mode the focusing is handled a bit different. See <code>SearchAccessibilityHelper</code> and our accessibility docs</li> <li>Relevant classes<ul> <li><code>SearchTvKeyDownHandler.kt</code></li> <li><code>SearchAccessibilityHelper.kt</code></li> <li><code>OnKeyDownHandler.kt</code></li> </ul> </li> </ul>"},{"location":"features/search/#examples","title":"Examples","text":"<ul> <li>Example 1<ul> <li>This shows opening the global nav menu when focusing <code>LEFT</code></li> <li>This should happen when you focus <code>LEFT</code> from:<ul> <li>Voice button</li> <li>Any grid keyboard character in the first column</li> <li>The space button in the grid keyboard</li> </ul> </li> </ul> </li> </ul> Example 1 <ul> <li> <p>Example 2</p> <ul> <li>This example shows scrolling down, then focusing <code>UP</code> from the grid keyboard</li> <li>Since this is Star+, notice the Categories, as well as a lack of suggestions</li> <li>When focusing <code>UP</code>, we do the scroll to top animation, and focus the voice recognition button</li> </ul> </li> </ul> <p> </p> Example 2 <ul> <li> <p>Example 3</p> <ul> <li>This shows changing focus from collections to the grid keyboard focusing <code>LEFT</code></li> <li>The delete key on the grid keyboard is always focused</li> <li>Additionally this shows a user attempting to focus <code>DOWN</code> on the grid keyboard (which does nothing)</li> </ul> </li> </ul> <p> </p> Example 3"},{"location":"features/search/#animations","title":"Animations","text":"<ul> <li>There is an entrance animation on TV that is handled inside of <code>TvNavItemAnimationHelper</code></li> <li>After landing on Search on TV, the animations are handled inside of <code>SearchTvTransitionHelperImpl</code>         - There are four states we transition between. Here is a quick overview; see <code>SearchTvTransitionHelperImpl</code> for more details             - <code>Default</code> - Represents the initial state, where no suggestions are showing and we are scrolled to the top. The first row can be focused in this state                 - <code>Step0</code> - This is the same state as Default except search suggestions are showing.                 - <code>Step1</code> - Represents the transition state where the second row of the search results has focus.                 - <code>Step2</code> - Represents the transition state where the focus is on any row besides the first or second rows.</li> <li>There is also a state holder class that assists in maintaining the animation state - <code>FragmentAnimationState</code></li> <li>Relevant classes<ul> <li><code>TvNavItemAnimationHelper.kt</code></li> <li><code>SearchTvTransitionHelperImpl.kt</code></li> <li><code>FragmentAnimationState.kt</code></li> </ul> </li> </ul>"},{"location":"features/search/#examples_1","title":"Examples","text":"<ul> <li>Example 1 - This shows us scrolling to the top when the user enters a new letter on the grid keyboard</li> </ul> Example 1 <ul> <li>Example 2<ul> <li>This shows a few scroll to top animations</li> <li>If a user scrolls down, then focuses <code>UP</code> from the grid keyboard, it will focus the suggestions that are above</li> <li>If a user deletes a character from the grid keyboard, it will scroll the user up</li> </ul> </li> </ul> Example 2"},{"location":"features/search/#speech-recognition","title":"Speech Recognition","text":"<ul> <li>Only exists on non-Amazon TV devices</li> <li>Implements Speech to text API (which is not available on Amazon devices)</li> <li>Handles permissions, displaying the recognized voice input from the user, animation while searching, and canceling</li> <li>Relevant classes<ul> <li><code>SpeechRecognizerHelper.kt</code></li> </ul> </li> </ul>"},{"location":"features/search/#feature-info","title":"Feature Info","text":""},{"location":"features/search/#availability","title":"Availability","text":"Availability  Disney+  Star+  Mobile  TV  Regions  All regions"},{"location":"features/search/#how-to-test","title":"How to test","text":"<ul> <li>Click the  icon in the global nav menu to land on Search</li> <li>Global nav is on the bottom for mobile, and on the left for TV</li> </ul>"},{"location":"features/search/#relevant-classes","title":"Relevant classes","text":"<ul> <li><code>SearchFragment.kt</code></li> <li><code>SearchViewModel.kt</code></li> <li><code>RxSearchViewWrapper.kt</code></li> <li><code>SearchResultsRepository.kt</code></li> <li><code>SearchRepository.kt</code></li> <li><code>SearchResultsViewModel.kt</code></li> <li><code>SearchTermViewModel.kt</code></li> </ul>"},{"location":"features/search/#product-tickets","title":"Product Tickets","text":"<ul> <li>Search Epic that should have all original requirements</li> <li>Recent Searches</li> <li>Search Functionality / scroll / selection</li> <li>Mobile Recent Search Animation</li> <li>Speech Recognition</li> <li>Grid Keyboard</li> <li>Categories<ul> <li>Mobile</li> <li>TV</li> </ul> </li> </ul>"},{"location":"features/search/#designs","title":"Designs","text":"<ul> <li>Mobile Search</li> <li>Tablet Explore</li> <li>TV Search</li> <li>TV Keyboard</li> <li>TV Search Input</li> </ul>"},{"location":"features/search/#help","title":"Help","text":"<ul> <li><code>#search-support</code> - reach out in this channel for questions about our search algorithm. Note: the team is Beijing based</li> </ul>"},{"location":"features/soft-forced-update/","title":"Soft and Forced App Updates","text":""},{"location":"features/soft-forced-update/#soft-updates","title":"Soft Updates","text":"<p>Soft app updates are dismissible messages to the user recommending them to update their app. We don't support native soft updates, these are instead done through Braze In-App messages.</p>"},{"location":"features/soft-forced-update/#forced-updates","title":"Forced Updates","text":"<p>Forced app updates are non dismissable messages to the user forcing them to update their app.</p>"},{"location":"features/soft-forced-update/#availability","title":"Availability","text":"Version Forced Update Available Additional info - 2.8.x \u2705 2.9.x - 2.13.x \u274c Forced Update dialog appears but does not have text. See ANDROID-5152, ANDROIDTV-2494, this Google Doc and this PR for context. 2.14.0+ \u2705"},{"location":"features/soft-forced-update/#description","title":"Description","text":"Dialog In-App update <p>Force updates can be enabled by setting the <code>minAppVersion</code> config flag to a version higher than the installed version of the app. Be aware that the versions for TV and mobile are different and thus should use a different <code>minAppVersion</code>.</p> <p>Example:</p> <pre><code>\"targetedOverrides\": [\n    {\n      \"targets\": [\n        [\"PLATFORM_MOBILE\"]\n      ],\n      \"minAppVersion\": 2111010\n    },\n    {\n      \"targets\": [\n        [\"PLATFORM_TV\"]\n      ],\n      \"minAppVersion\": 21110100\n    }\n]\n</code></pre> <p>Forced updates can be targeted to specific devices, countries or user states by using Targeted Config Overrides.</p>"},{"location":"features/soft-forced-update/#active-forced-updates","title":"Active Forced Updates","text":""},{"location":"features/soft-forced-update/#disney","title":"Disney+","text":"<p>For the exact devices, check the config files in Dmgz Android Appconfig and the [Partner Devices wiki] to lookup model # to device/operator names.</p> Version Exclusions 1.0.0 - 1.12.0 None 1.13.0 2 Bouygous Telecom Partner devices 1.13.1 - 1.16.0 None 1.17.0 All Partner Devices 2.1 Amazon TV, partner devices, entitled users, users located in HK/JP/KR/TW 2.2 - 2.15 US and territories (AS, GU,MH, MP, UM, PR, VI)"},{"location":"features/soft-forced-update/#star","title":"Star+","text":"<p>There has been no Forced Update for S+ yet.</p>"},{"location":"features/soft-forced-update/#in-app-updates","title":"In App Updates","text":"<p>From version 1.8.0+ we support Google In-app updates. This is only available on Google Mobile, Tablet and Chromebooks, so not on Google TV or Amazon.</p> <p>In-app updates can be disabled by setting the <code>disableInAppUpdate</code> to false or toggling the <code>Force App Updates -&gt; Disable Google In-App-Update</code> Jarvis toggle.</p> <p>See also the Wiki page on Android In App Updates.</p>"},{"location":"features/soft-forced-update/#testing","title":"Testing","text":"<ul> <li>In App Updates will only work when you have installed a signed version of the app. Unsigned versions cannot be updated through Google Play. You can get the signed APKs from the Google Play Console.</li> <li>When using the Jarvis <code>Forced App Updates -&gt; Force App Update screen</code>, a force update dialog will popup again after the update since the new version will still be lower than the min version set by the toggle. To do a proper test, set the <code>minAppVersion</code> through a config transform to a version higher than your currently installed version but lower than the version in the Play Store.</li> <li>Forced update dialog isn't shown on debug builds. Use the Jarvis toggle/config <code>Force App Updates -&gt; Allow Force Update Dialog on Debug Builds</code> to allow the dialog to show up on debug builds.</li> <li>If you want to bypass the forced update dialog you can use the Jarvis toggle/config flag <code>Force App Updates -&gt; Disable Force Update Dialog</code> to suppress the dialog.</li> </ul>"},{"location":"features/tv-channels/","title":"TV Channels","text":"<p>TV Channels are each row displayed on the home screen of the TV. Each row contains the channel's programs shown in cards, and when clicked, it deep-links to the app to view the program. Disney+ and Star+ provide content to be displayed on TV Channels from the Android TV. It can help users discover the content through recommendations on the home screen and quickly access or continue watching programs.</p> <p></p> Disney+ Channels <p></p> Star+ Channels"},{"location":"features/tv-channels/#the-default-channel","title":"The Default channel","text":"<p>Apps can offer any number of channels for the user to add to the TV home screen. The user usually has to select and approve each channel before it appears on the home screen. Every app has the option of creating one  default  channel. The default channel is special because it automatically appears on the home screen; the user does not have to enable it explicitly.</p>"},{"location":"features/tv-channels/#the-watch-next-channel","title":"The Watch Next channel","text":"<p>The Watch Next channel is the second row that appears in the home screen, after the apps row. It has the label Play Next. The system creates and maintains this channel. Apps can add programs to the Watch Next channel if it is programs that: the user marked as interesting, stopped watching in the middle, or that are related to the content the user is watching (like the next episode in a series or next season of a show).</p> <p>When inserting content into the Watch Next channel, we need to follow the Google guidelines to make sure it is eligible to be published. Some of the guidelines are:</p> <ul> <li>The user should have interacted with the content within your app.</li> <li>The user has \"started\" the program if they've watched more than 3% or 2 minutes, whichever timestamp is earlier.</li> <li>Do not add more than one episode for the same TV series. For example, do not add an unfinished episode and a new episode for the same TV show.</li> <li>Do not update all items in the Play Next row when any one item changes. Only update the item which the user has interacted with since the last update.</li> </ul>"},{"location":"features/tv-channels/#manually-add-or-remove-programs","title":"Manually add or remove programs","text":"<p>To manually add a program to the Play Next row, or remove a program from any tv channel, select the desired program, click and hold it with your remote control. A pop-up will ask you if you'd like to add it to Play Next or remove it.</p> <p>Deleted programs from Watch Next are saved in the app (shared preference), so they are not displayed again.</p>"},{"location":"features/tv-channels/#disney-and-star-channels","title":"Disney+ and Star+ Channels","text":""},{"location":"features/tv-channels/#available-channels","title":"Available Channels","text":"<p>Currently, the apps support three channels: <code>Recommended For You</code>, <code>Watchlist</code> (only Disney+ has it enabled), and <code>Watch Next</code>. The default channel is <code>Recommended For You</code> for both apps.</p> <p>The channels and programs are deleted if the Kids mode is enabled or if the user logout.</p>"},{"location":"features/tv-channels/#programs-synchronisation","title":"Programs Synchronisation","text":"<p>When a <code>WatchlistSet</code> or a <code>ContinueWatchingSet</code> is invalidated, synchronisation will happen to ensure the content on the tv channels is updated. The Watchlist channel gets its programs updated every time the user adds or removes content from the watchlist in the app. The Watch Next channel gets a program updated every time the user stops the playback at a certain point and leaves the content/app. This way, the latest progress for the program is displayed on the channel. When the user switches between profiles, all channels get updated programs with relevant content for the active profile.</p>"},{"location":"features/tv-channels/#feature-info","title":"Feature Info","text":""},{"location":"features/tv-channels/#availability","title":"Availability","text":"Availability  Disney+  Star+  Mobile  TV  Regions  All regions"},{"location":"features/tv-channels/#how-to-test","title":"How to test","text":"<p>A few toggles are available in Jarvis to help to test the App TV Channels. Under the category App Channels (TV), you can:</p> <ul> <li>Disable all App Channels</li> <li>Enable/Disable Recommendations Channel</li> <li>Enable/Disable Watchlist Channel</li> <li>Disable Play Next Channel</li> </ul> <p>Testing steps</p> <ul> <li>Open D+/S+ Tv app</li> <li>Log in</li> <li>Choose profile</li> <li>Go to home screen of the TV; Tv Channels are each row displayed on the screen</li> </ul>"},{"location":"features/tv-channels/#relevant-classes","title":"Relevant classes","text":"<ul> <li> <p><code>DefaultChannelProvider.kt</code> - Responsible for creating the default channel.</p> </li> <li> <p><code>WatchlistChannelProvider.kt</code> - Responsible for creating the watchlist channel.</p> </li> <li> <p><code>BaseProgramCandidateProvider.kt</code> - Provides a list of <code>ProgramCandidate</code> after fetching the collections by <code>CollectionIdentifier</code></p> </li> <li> <p><code>ChannelWorkerManager.kt</code> - Responsible for scheduling proper workers to populate or remove items from app channels.</p> </li> <li> <p><code>AppChannelsConfig.kt</code> - Remote config for the app channels feature.</p> </li> <li> <p><code>ChannelsLog.kt</code> - Loggings regarding the channels feature.</p> </li> </ul>"},{"location":"features/tv-channels/#official-documentation","title":"Official Documentation","text":"<ul> <li>Recommend content on the home screen</li> </ul>"},{"location":"features/vision-inspection-log/","title":"Vision Inspection Log","text":"<p>Several developers are using the Project Vision content inspection tool to quickly confirm what content is available in a Collection or Set. To check content on this tool requires a few steps to navigate to the correct collection/set/details page. To make this easy, we have added a logger that prints the URL to the tool in the logcat.</p> <p>The Vision log prefix is \"Project Vision URL\"</p> <p>Currently, it is enabled for the below paths and <code>LogInterceptorConfig.enabledPaths</code> config can be used to add more via remote config.</p> <pre><code> private val defaultEnabledPaths = setOf(\n        \"/svc/content/BecauseYouSet\",\n        \"/svc/content/Collection\",\n        \"/svc/content/CompleteStandardCollection\",\n        \"/svc/content/ContinueWatching\",\n        \"/svc/content/CuratedSet\",\n        \"/svc/content/DmcProgramBundle\",\n        \"/svc/content/DmcSeriesBundle\",\n        \"/svc/content/DmcVideoBundle\",\n        \"/svc/content/PersonalizedCollection\",\n        \"/svc/content/PersonalizedCuratedSet\",\n        \"/svc/content/RecommendationSet\",\n        \"/svc/content/TrendingSet\",\n        \"/svc/content/WatchlistSet\"\n    )\n</code></pre> Project Vision URL example for each enabled path <p>BecauseYouSet</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/BecauseYouSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/bd1bfb9a-bbf7-43a0-ac5e-3e3889d7224d/pageSize/15/page/1\n</code></pre> <p>Collection</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/Collection/PersonalizedCollection/version/5.1/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/contentClass/home/slug/home\n</code></pre> <p>ContinueWatching</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/ContinueWatching/Set/version/5.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/76aed686-1837-49bd-b4f5-5d2a27c0c8d4\n</code></pre> <p>CuratedSet</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/CuratedSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/085cc2a9-7a18-4746-9243-ae3708d502f4/pageSize/15/page/1\n</code></pre> <p>DmcProgramBundle</p> <p><pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://star.content.edge.bamgrid.com/svc/content/DmcProgramBundle/version/5.1/region/AR/audience/k-false,l-true/maturity/1850/language/en/encodedFamilyId/67haAq2Y9QUF\n</code></pre> DmcSeriesBundle</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/DmcSeriesBundle/version/5.1/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/encodedSeriesId/3xsQKWG00GL5\n</code></pre> <p>DmcVideoBundle</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/DmcVideoBundle/version/5.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/encodedFamilyId/5rnVhiRFkaqL\n</code></pre> <p>PersonalizedCuratedSet</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/PersonalizedCuratedSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/50d388c6-ce72-49ab-808f-e84ad9dad3f5/pageSize/15/page/1\n</code></pre> <p>RecommendationSet</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/RecommendationSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/6e365205-5805-c877-9e04-6443a40523f2/pageSize/15/page/1\n</code></pre> <p>TrendingSet</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/TrendingSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/25b87551-fd19-421a-be0f-b7f2eea978b3/pageSize/15/page/1\n</code></pre> <p>WatchlistSet</p> <pre><code>D/Vision: Project Vision URL: https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/WatchlistSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/463a4cb9-aa4a-4500-0e26-8f4dee160c12/pageSize/15/page/1\n</code></pre> How to see response data <p>You can check this in two ways -</p> <p>1) From the Project Vision URL select text after <code>url=</code> \u2192 Paste that in the browser. For eg.</p> <p>Project Vision URL:</p> <pre><code>https://project-vision.us-east-1.bamgrid.net/content-inspection?url=https://disney.content.edge.bamgrid.com/svc/content/BecauseYouSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/bd1bfb9a-bbf7-43a0-ac5e-3e3889d7224d/pageSize/15/page/1\n</code></pre> <p>Request URL:</p> <pre><code>https://disney.content.edge.bamgrid.com/svc/content/BecauseYouSet/version/6.0/region/US/audience/k-false,l-true/maturity/1499/language/en-GB/setId/bd1bfb9a-bbf7-43a0-ac5e-3e3889d7224d/pageSize/15/page/1\n</code></pre> <p>2) Go to Project Vision URL in the browser \u2192 Hover over/Select \"Admin Panel\" at the bottom right \u2192 Select \"Request URL\" </p>"},{"location":"features/vision-inspection-log/#feature-info","title":"Feature Info","text":""},{"location":"features/vision-inspection-log/#availability","title":"Availability","text":"Availability  Disney+  Star+  Mobile  TV  Regions  All regions"},{"location":"features/vision-inspection-log/#how-to-test","title":"How to test","text":"<p>When logging a personalized set request like <code>BecauseYouSet</code>, <code>WatchlistSet</code> or <code>PersonalizedCuratedSet</code>, the user needs to navigate to Vision Login page and select the same profile to see the correct output.</p> <ul> <li>Enable Vision log with</li> </ul> <pre><code>adb shell setprop log.tag.DmgzVision DEBUG\n</code></pre> <ul> <li>Navigate to any collection or details page(home, watchlist, movies, series, event, and details) and filter logs for \"Project Vision URL\", you should see vision links to the tool.</li> </ul>"},{"location":"features/vision-inspection-log/#relevant-classes","title":"Relevant classes","text":"<ul> <li><code>CollectionRequestLogInterceptor.kt</code> An implementation of the <code>SortableInterceptor</code> interface to intercept the actual URL and then combine to URL with the vision content inspection prefix. This is to print the URL to the Vision tool with the active collection or set</li> </ul>"},{"location":"how-to/library_updates/","title":"Libraries","text":""},{"location":"how-to/library_updates/#version-catalog","title":"Version Catalog","text":"<p>Which version of libraries is defined in our version catalog. This catalog is not directly consumed by the project, but it is published to Maven with the rest of the buildLogic and the main project consumes that published artifact.</p>"},{"location":"how-to/library_updates/#when-do-libraries-get-updated","title":"When do libraries get updated?","text":"<p>The Platform team pro-actively attempts to keep the following tools/libraries that are essential to all of the app up-to-date to the latest stable version:</p> <ul> <li>Gradle</li> <li>Android Gradle Plugin</li> <li>Kotlin</li> <li>androidx</li> </ul> <p>If you need something from a newer version of a library we have a Library Updates Epic with tickets for updates. You can create a ticket in that epic and either do the update yourself or ask the platform team if they can prioritize it.</p>"},{"location":"how-to/library_updates/#version-enforcement","title":"Version enforcement","text":"<p>Automatic version bumping and resolution can create a risk for false positives on unit tests like in the example below.</p> <p>For example, <code>androidx.fragment:fragment-ktx:1.2.3</code> depends on <code>androidx.core:core-ktx:1.2.0</code> and <code>androidx.activity:activity-ktx:1.2.3</code> depends on <code>androidx.core:core-ktx:1.1.0</code>. If a module requests both <code>fragment-ktx</code> and <code>activity-ktx</code> there would be no problem because Gradle automatically pulls in the highest requested version of <code>core-ktx</code>, however if the module <code>feature-a</code> only requests <code>activity-ktx</code>, it will pull in <code>core-ktx:1.1.0</code>. If module <code>feature-b</code> pulls in <code>fragment-ktx</code> and thus <code>core-ktx:1.2.0</code>, and the application module pulls in <code>feature-a</code> and <code>feature-b</code> that would result in the runtime version being <code>1.2.0</code>. So the code that's compiled and tested against 1.1.0 ends up running on 1.2.0. If there is a bug in 1.2.0 that was not present in 1.1.0 the unit test would miss that and you get a runtime failure.</p> <p>Considering the example above it is safer to ensure that the same library versions are used across the project. Additionally by making sure that all modules use the same version you don't end up with multiple different versions that need to be downloaded and indexed by Android Studio, thus improving build performance and IDE experience.</p> <p>resolutionStrategy.failOnVersionConflict() functionality helps us here. When that's enabled the scenario above would result in the following Gradle error.</p> <pre><code>&gt; Could not resolve all dependencies for configuration ':app:debugRuntimeClasspath'.\n   &gt; Conflict(s) found for the following module(s):\n       - androidx.core:core-ktx between versions 1.2.0 and 1.1.0\n     Run with:\n         --scan or\n         :app:dependencyInsight --configuration debugRuntimeClasspath --dependency androidx.core:core-ktx\n     to get more insight on how to solve the conflict.\n</code></pre> <p>The way to resolve this error is by explicitly declaring which version to use in the version catalog.</p> <p>The project has been set up to always enforce versions of libraries to by defined in the version catalog.</p> <ul> <li>If a transitive dependency pulls in a lower version it will automatically bump that up to the version defined</li> <li>If a transitive dependency pulls in a higher version the build will fail and the solution is to bump the version that's defined in the version catalog.</li> </ul>"},{"location":"how-to/library_updates/#how-to-update-libraries","title":"How to update libraries","text":"<p>The updating of libraries consists of a couple of steps. The easiest way to go about it is to follow the following steps</p> <ol> <li>Make sure you have a ticket for it.</li> <li>Locally enable buildLogic</li> <li>Bump the version of the library in libs.versions.toml.</li> <li>Make any changes needed for the library update</li> <li>Open a Pull Request and add the label <code>publish build logic</code>. This will trigger a Github Actions run to publish a version of the buildLogic</li> <li>Check the output of the Github Action for the version (it is being printed as part of the Gradle logs)</li> <li>Update the value for <code>dominguez.buildLogicVersion</code> gradle.properties</li> <li>Locally disable buildLogic.</li> <li>Run <code>./gradlew documentDependencies</code> to update the docs on which dependencies are used.</li> <li>Push all changes to the repository</li> </ol>"},{"location":"how-to/library_updates/#what-if-there-is-a-merge-conflict","title":"What if there is a merge conflict?","text":"<p>Since <code>buildLogic</code> versions include the commit you'll need to publish a new version after resolving a merge conflict (every push on a PR that includes the <code>publish build logic</code> label will publish a new version) and then update gradle.properties with the new version.</p>"},{"location":"how-to/test_sdk_errors/","title":"SDK errors","text":"<p>Some UI errors are thrown by the SDK. Testing these can be a bit hard, this documentation will go through the different error types and which tools to use to test these errors.</p> Error type Description requestTemporarilyBlocked error case is surfaced based on a <code>code: forbidden</code> 403 HTTP edge response temporarilyThrottled error case is surfaced based on a <code>code: throttled</code> 429 HTTP edge response requestBlocked error case is surfaced based on the HTTP response having HTTP error 403, does NOT have an <code>X-Request-Id</code> header, and has a Content-Type value of <code>text/html</code> (this is a WAF error response)"},{"location":"how-to/test_sdk_errors/#fraud-tool","title":"Fraud tool","text":"<p>For extensive documentation on where to find and how to use the Fraud tool see the following wiki page: Fraud Tool Wiki Instructions</p> <p>You'll later need this tool to configure a ban type to force above errors. For that you'll need your external IP address, the <code>Device ID</code> and know your <code>Region</code>. Below is briefly explained on how to obtain these properties.</p>"},{"location":"how-to/test_sdk_errors/#device-id","title":"Device ID","text":"<p>There are two ways to know what you deviceID is</p>"},{"location":"how-to/test_sdk_errors/#logcat","title":"Logcat","text":"<p>When you open the app in a logged-out state search for <code>LoggedOutSession</code>. This will show the contents of the <code>anonymous</code> call. Take the id that's in the device object, for example: <code>device=Device(id=d1960b99-a9b1-4f97-95c9-bb67fbbb7ae7)</code></p>"},{"location":"how-to/test_sdk_errors/#using-charles","title":"Using Charles","text":"<ul> <li>Connect charles with your test device</li> <li>Open the Disney+ (or other) app</li> <li>Find the network call with <code>operationName=anonymous</code> in the <code>/v1/public</code> respones</li> <li>In the json response under <code>data &gt; anonymous &gt; activeSession &gt; device &gt; id</code>. Use that UUID as your Device ID.</li> </ul> <p>Note: This ID will change every time you clear application data</p>"},{"location":"how-to/test_sdk_errors/#region","title":"Region","text":"<p>You can find the region in the <code>x-bamtech-region</code> response header of requests from <code>*.bamgrid.com</code> domains.  Use Charles (or search your logcat) to check what region you need to target in the Fraud tool.</p> <ul> <li>Connect charles with your test device</li> <li>Open the Disney+ (or other) app</li> <li>Open the response of a network call and select <code>headers</code> of the response in Charles</li> <li>The region can be found by looking at the following header: <code>x-bamtech-region</code></li> </ul> <p>Note: Even though you're in the Netherlands you'll still be targeting: <code>us-east-1</code> so you can't necessarily base it on your own location</p>"},{"location":"how-to/test_sdk_errors/#testing-sdk-errors","title":"Testing SDK errors","text":"<p>Let's go through above errors to show different cases on how to force these errors on the client using the Fraud tool and Charles.</p>"},{"location":"how-to/test_sdk_errors/#requesttemporarilyblocked-temporarilythrottled","title":"requestTemporarilyBlocked &amp; temporarilyThrottled","text":"<p>Testing these errors is fairly easy and straightforward. Select either <code>TEMPORARILY THROTTLED</code> or <code>TEMPORARILY BLOCKED</code> in the fraud tool and follow the instructions from the fraud tool wiki here</p> <p>Now open the app, go the the login email screen. Use a valid email and then press continue. You should now see one of both errors. Information on what message for what error is supposed to be shown can be found in this JIRA ticket: ANDROIDTV-194</p>"},{"location":"how-to/test_sdk_errors/#requestblocked","title":"requestBlocked","text":"<p>For this one you can use <code>BLOCKED EXCEPTION</code> or <code>TEMPORARILY BLOCKED</code>. They both have the same outcome in the app. However, to correctly imitate the response as it comes from the server as describe at the top of this page we have to go with <code>TEMPORARILY BLOCKED</code> and use the rewrite tool in Charles to make it work.</p> <p>Setup this ban type in the Fraud tool using the fraud tool wiki here here</p> <p>Now let's add some rewrite rules in Charles to make a temporarily blocked error a requestBlocked error.</p> <p>Connect charles with your test device and go to <code>Tools &gt; Rewrite...</code> Here's some great documentation on how to setup these rewrite rules: https://charlesdocsy.com/2020/05/11/rewrite-modify-the-request/</p> <p>What's important is that we remove the <code>x-request-id</code> header of the incoming response and modify the <code>content-type</code> header to <code>text/html</code></p> <p>I'll show an example of how the rewrite rules look in Charles after setting up. First you need to configure the call of which we want the response to be rewritten. See image below on the configuration, we do this for the <code>operationName=check</code> call</p> <p></p> <p>After that's being setup we also need to tell what we need to rewrite in the response. That will look for both rules like this:</p> <p></p> <p>Now open the app, go the the login email screen. Use a valid email and then press continue. You should see an error. Information on what message for what error is supposed to be shown can be found in this JIRA ticket: ANDROIDTV-194</p>"},{"location":"process/onboarding/process_overview/","title":"Onboarding Process","text":"<ul> <li>To onboard a new hire, use our New Hire Onboarding doc</li> <li>The Hiring Manager of the new employee will create a copy of this document and fill it out</li> </ul> Make a copy of the New Hire Onboarding doc <p>This document is the main doc. Please do not edit it. Create a copy and fill that copy out.</p>"},{"location":"process/release/feature_complete/","title":"Feature Complete","text":"<p>The FC date is the day we plan to finish the development of the features for the next release, create the release branch, and send a Feature Complete build to QA.</p> FC Tasks <p>Engineers from the Release team have to:</p> <ul> <li> <p>Create a <code>release/X.X</code> branch</p> </li> <li> <p>Bump <code>development</code> branch version</p> </li> </ul> <p>TPMs have to :</p> <ul> <li> <p>Ensure the feature code is merged and tickets are resolved</p> </li> <li> <p>Kick an FC build on the #ds-android-builds using the release branch</p> </li> <li> <p>Send an email to QA with the build and tickets resolved.</p> </li> </ul>"},{"location":"process/release/feature_complete/#create-a-release-branch","title":"Create a <code>release</code> branch","text":"<p>The release branch should be created on the same day as the FC Build. To create the <code>release</code> branch follow these steps:</p> <ol> <li> <p>Announce in #ds-android-devs that you are starting the process of creating a release branch and that all merging of PRs will be temporarily blocked. Ask everyone to verify if all PRs that need to go on this release have the correct <code>Milestone</code>.</p> Warning <p>Each team is responsible for adding the <code>Milestone</code> to the PRs when creating the PR; this helps identify which PR was merged in which app version easily.</p> Message template <p>The Release Team will cut the <code>release X.X</code> branch. Please make sure your Prs have the correct <code>Milestone</code>. We will block merging on the <code>development</code> branch now and unblock it soon.</p> </li> <li> <p>Block all merging of PRs in <code>Dmgz Setting</code> -&gt; <code>Branch</code> -&gt; <code>Edit development</code> -&gt; <code>Tick \"Restrict who can push to matching branches\"</code> -&gt; <code>Save changes</code> (all team leads should have the permission to do this).</p> </li> <li> <p>Locally create the branch <code>release/X.X</code> on the same commit as the current <code>HEAD</code> of the <code>development</code> branch. Push the <code>release/X.X</code> branch to origin.</p> </li> <li> <p>Go through all PRs that contain the <code>X.X Milestone</code> and change the base branch to the <code>release/X.X</code> branch. With this filter you can see the PRs that needs to be pointing to the <code>release/X.X</code> branch.</p> Warning <p>For PRs that should go into the release branch but do not contain the Milestone set, it will be the responsibility of the PR owner to update the branch later on.</p> </li> <li> <p>Unblock the merging of PRs into the <code>development</code> branch. (Undo step 2).</p> </li> <li> <p>Announce in #ds-android-devs that merging is now unblocked and PRs with the Feature Milestone have the release branch as the new base branch.</p> Message template <p>All PRs containing <code>X.X Milestone</code> now target the <code>X.X release</code> branch. The merge on the <code>development</code> branch is unblocked. </p> </li> </ol>"},{"location":"process/release/feature_complete/#bump-the-development-branch-version","title":"Bump the <code>development</code> branch version","text":"<p>After creating the new release branch, we need to bump the app version on the development branch. Steps are:</p> <ol> <li> <p>First deploy a new app config file for the new app version. See this PR as an example. (Use the New Version label).</p> Warning <p>The app config PR needs to be deployed before merging the bump version PR (the step below).</p> </li> <li> <p>Update the <code>dominguez.version.majorMinor</code> property in the Dmgz root <code>gradle.properties</code> file with <code>Y.X+1</code> and create a PR to the development branch. See this PR as an example.</p> </li> </ol>"},{"location":"process/release/process_overview/","title":"Release Train","text":"<p>Usually, we have one release per month, according to the Release Calendar. Those dates can be adjusted depending on the need to have a certain feature released on a specific date. The image below illustrates the four major steps of the release process:</p> <p></p> <ul> <li> <p>Feature Complete Tasks:</p> <ul> <li>Create a release branch and update PRs that have the release milestone</li> <li>Bump the development version and deploy a new app config version</li> <li>Kick the FC build</li> <li>Send an email to QA with the build and tickets included</li> </ul> </li> <li> <p>Release Candidate Tasks:</p> <ul> <li>Deploy app config default values</li> <li>Kick the RC build</li> <li>Send an email to QA with the build and tickets included</li> <li>Upload RC build to Google Alpha &amp; Amazon LAT (for both Star+ &amp; Disney+)</li> </ul> </li> <li> <p>Submission</p> <ul> <li>Confirm QA sign-off for the release</li> <li>Google submission with % rollout</li> <li>Amazon submission for approval with 5% rollout and Future Release Date</li> <li>Confirm Conviva sign-off after 20% rollout</li> <li>Update Google rollout % if metrics look good</li> <li>Remove Future Release Date (FRD) from Amazon and submit the release for 100%</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Create Sentry and Conviva dashboards</li> <li>Verify Sentry, Play Store and Conviva metrics every day before updating the rollout %</li> <li>Update the Android Release Process spreadsheet with release issues</li> <li>Create tickets for issues and assign to teams</li> </ul> </li> </ul>"},{"location":"process/release/process_overview/#release-team","title":"Release Team","text":"<p>For every release, we have a rotating release team; before the Feature Complete date, we choose a few people that will be part of the \"Release Team\" and will be responsible for doing the steps above. Besides that, the release team also needs to do the following:</p> <ul> <li> <p>Dictionary Pinning (Usually happens every Monday, see documentation with steps here)</p> </li> <li> <p>Monitoring #disneyplus-support-general and #starplus-support-general. Suppose an issue related to the release is reported. In that case, someone should acknowledge and contact the teams responsible for it to investigate or create a ticket and report the status back in the support thread.</p> </li> <li> <p>Ensure the Android Release Process is filled properly and organized. (Any ideas for improvements are welcome)</p> </li> </ul> Release Team members <p>The release team members's name should be added to a Release X tab in our Android Release Process spreadsheet</p> Bundling a new language <p>If the release includes support for new languages, add the new languages to the <code>dictionary_bundle_config.json</code> from the Dmgz codebase. Note that we usually create the RC build quite a bit before the language launch happens. This means that not all texts might have been translated at that point in time. We need to get approval from International Product to start bundling a new language.</p>"},{"location":"process/release/process_overview/#other-resources","title":"Other Resources","text":"<ul> <li>Prepare release parent ticket</li> <li>Our Release Calendar</li> <li>Android Release Show</li> <li>Release Strategy Approaches</li> </ul>"},{"location":"process/release/release_candidate/","title":"Release Candidate","text":"<p>The RC date is the day we create a release candidate build. Between FC and RC dates, PRs with bug fixes that have low risk can be merged into the release branch. Once the RC build is created, only blocker fixes should be merged in the release branch (after syncing with TPMs about having a new RC build to include the blocker fix).</p> RC Tasks <p>Engineers from the Release team have to:</p> <ul> <li>Update release app config files with default values and WeaponX experiments and deploy the config</li> </ul> <p>TPMs have to :</p> <ul> <li> <p>Kick an RC build on the #ds-android-builds using the release branch</p> </li> <li> <p>Send an email to QA with the build and tickets resolved.</p> </li> <li> <p>Upload RC build to Google Alpha &amp; Amazon LAT (for both Star+ &amp; Disney+)</p> </li> </ul>"},{"location":"process/release/release_candidate/#release-config-deployment","title":"Release Config Deployment","text":"<p>Before distributing release candidate builds, we must always ensure that the configuration we want to release has also been deployed via the app-config project. Please do:</p> <ol> <li> <p>Ensure the latest dictionary pin is done on the release app config file.</p> </li> <li> <p>Apply remote configs as default for version X. (Sentry configs, target overrides and experiments)</p> <ol> <li>Get the remote config of the previous version</li> <li>If any of the config flags becomes the default value within the new version, it should be enabled in the codebase and remove from the config for version X.</li> <li>If any of the config flags is not definitive, it should be transferred in the version X config.</li> <li>Apply WeaponX experiments for version X copying over from the previous version.</li> <li>Deploy the config</li> </ol> </li> </ol>"},{"location":"process/release/release_monitoring/","title":"Monitoring the Release","text":"<p>Coming Soon</p>"},{"location":"process/release/release_submission/","title":"Release Submission","text":"<p>Coming Soon</p>"},{"location":"resources/accessibility/","title":"Accessibility","text":"<p>High level overview of our accessibility setup with some important resources to assist in accessibility tasks</p>"},{"location":"resources/accessibility/#accessibility-on-emulators","title":"Accessibility on emulators","text":"<p>Fortunately we can test accessibility on emulators</p> <ol> <li>Create an emulator with the Google Play app on it (emulators that are at least API version 29 will have the Google Play app)</li> <li>In the Google Play app, search for talkback</li> <li>Download the Android Accessibility Suite</li> </ol>"},{"location":"resources/accessibility/#turning-tts-on-and-off","title":"Turning TTS on and off","text":"<p>Add the following adb alias commands to your bash profile to easily turn TTS on and off:</p> <pre><code>alias adbEnableTalkback='adb shell settings put secure enabled_accessibility_services com.google.android.marvin.talkback/com.google.android.marvin.talkback.TalkBackService'\nalias adbDisableTalkback='adb shell settings put secure enabled_accessibility_services com.android.talkback/com.google.android.marvin.talkback.TalkBackService'\n</code></pre> <ul> <li>Now you can run <code>adbEnableTalkback</code> to turn TTS on, and <code>adbDisableTalkback</code> to turn it off</li> </ul> <p>Warning</p> <ul> <li>If you run <code>adbEnableTalkback</code>, make sure to reload the entire app (or at least the screen you're on). This is because some accessibility functionality is initialized on screen startup</li> </ul>"},{"location":"resources/accessibility/#content-description","title":"Content Description","text":"<ul> <li>It is common to set <code>android:contentDescription=\"@null\"</code> when you are confident we should not be adding extra text to</li> <li>Do not set these for <code>TextView</code>s. See here</li> <li>This is common on <code>ImageView</code>s (like a background image, for example)</li> <li>When setting the content description in <code>.xml</code>, more often than not you will want to reference a string with our <code>a11y</code> prefix. All the resource ids are prefixed to make sure that they are unique, so the keys generated from the accessibility dictionary will have the <code>a11y_</code> prefix</li> <li>Example: <code>android:contentDescription=\"@string/a11y_image_app_logo\"</code></li> <li>When setting the content description programmatically, check our <code>AccessibilityExt.kt</code> for helpful extension functions</li> <li>Example: <code>binding.skipButton?.a11yKey = R.string.a11y_profilesetup_skip</code></li> <li>TODO: Delete this? - looks like we can replace all <code>contentDescription=\"@null\"</code> with <code>android:importantForAccessibility=\"no\"</code><ul> <li> <p>If your UI includes graphical elements that are used for decorative effect only, set their descriptions to \"@null\". If your app's minSdkVersion is 16 or higher, you can instead set these graphical elements' android:importantForAccessibility attributes to \"no\".</p> </li> <li>Source of quote</li> </ul> </li> </ul>"},{"location":"resources/accessibility/#important-for-accessibility","title":"Important For Accessibility","text":"<ul> <li>Mark something not important for accessibility if you're confident it is not needed. This is common for a view that's just a divider line, or maybe a <code>TextView</code> that should not be read out loud to the user</li> <li>Example: <code>android:importantForAccessibility=\"no\"</code></li> </ul>"},{"location":"resources/accessibility/#announce-for-accessibility","title":"Announce For Accessibility","text":"<ul> <li>Method used to request that the accessibility service announce the given text. This is commonly utilized when we need something to be announced when a user first lands on a screen, or after the user performs an action</li> </ul>"},{"location":"resources/accessibility/#focusinterceptlayout","title":"FocusInterceptLayout","text":"<p>On some devices, accessibility services (like Talkback) consume <code>KeyEvents</code>. This intercepts our custom focusing logic. It was confirmed here that it happens on a TV emulator with at least API version 29. We fixed it with the following solution:</p> <ul> <li>Custom views will implement <code>FocusInterceptLayout</code>. Use these custom views as the root container in <code>xml</code></li> <li>Create a helper class to implement the custom focusing logic for accessibility</li> <li>Set the <code>view.focusSearchInterceptor</code> to the implementation of <code>FocusSearchInterceptor</code>. This can be done inside of <code>onViewCreated</code>, and is commonly done inside of a <code>if (requireContext().accessibilityNavigationEnabled())</code> check</li> <li>Clean it up inside of <code>onDestroyView()</code> by setting the interceptor to <code>null</code></li> <li>Example:<ul> <li>Custom view - <code>FocusSearchInterceptConstraintLayout.kt</code></li> <li>Helper class - <code>SearchAccessibilityHelper.kt</code></li> <li>Set them together - See <code>onViewCreated(...)</code> inside of <code>SearchTvFragment.kt</code>:</li> </ul> </li> </ul> <pre><code>        override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        ...\n        if (requireContext().accessibilityNavigationEnabled()) {\n            searchAccessibilityHelper.initAccessibilityFocusSearchIntercept(searchRootView, binding)\n        }\n        ...\n</code></pre> <ul> <li>Clean up - See <code>onDestroyView()</code> inside of <code>SearchTvFragment.kt</code>:</li> </ul> <pre><code>        override fun onDestroyView() {\n        ...\n        if (requireContext().accessibilityNavigationEnabled()) {\n            searchRootView.focusSearchInterceptor = null\n        }\n        ...\n</code></pre>"},{"location":"resources/clone_repos/","title":"Clone Repos","text":"<ul> <li>Use SSH to clone our repos</li> <li>Create a new SSH key<ul> <li>Extra info here</li> </ul> </li> <li>To increase build performance, clone our repos in the <code>~/Workspace</code> directory<ul> <li>More info here</li> </ul> </li> <li>Our main repo - <code>git clone git@github.bamtech.co:Android/Dmgz.git</code></li> <li>Our configs repo - <code>git clone git@github.bamtech.co:Mobile/dmgz-android-appconfig.git</code></li> <li>Our documentation site repo - <code>git clone git@github.bamtech.co:Android/dmgz-docs.git</code></li> </ul>"},{"location":"resources/company_resources/","title":"Company Related Resources","text":"<ul> <li>Hoth - this is how you request hardware and software. Feel free to submit requests for monitors, keyboards, a mobile device, etc.</li> <li>View your PTO / Time Off<ul> <li>US Employees Link</li> <li>EU Employees Link</li> </ul> </li> <li>Company Holidays</li> <li>Rostr - internal tool to lookup other Disney employees</li> <li>Employee Referral Info<ul> <li>Direct link to submit referral</li> </ul> </li> <li>DSS Company Glossary of Acronyms</li> <li>Disney Total Rewards site (US Only) - totalrewards.disney.com - (this will not hyperlink correctly not sure why)</li> <li>Disney Streaming Branding Guidelines</li> </ul>"},{"location":"resources/dagger/","title":"Dagger Hilt","text":"<p>The Dominguez project uses Dagger Hilt for dependency injection. Some older versions the project still uses dagger-android.</p>"},{"location":"resources/dagger/#hilt","title":"Hilt","text":""},{"location":"resources/dagger/#best-practises","title":"Best Practises","text":"<p>As a baseline for Dagger usage the project assumes the best practises from the Keeping the Daggers Sharp Blog Post of Square. Below is a high-level overview of the best practices. Check out the blog post for more detail, reasoning and examples.</p> <ul> <li>Favor constructor injection over field injection.</li> <li>Favor constructor injection over <code>@Provides</code> methods in Dagger modules.</li> <li><code>@Provides</code> methods must always be static.</li> <li><code>@Binds</code> methods must always be abstract.</li> <li>Dagger Modules must always be <code>abstract</code></li> <li><code>@Binds</code> methods must never have a scope annotation.</li> <li>Prefer a combination of a constructor injected implementation with a <code>@Binds</code> method to bind it to an interface over a <code>@Provides</code> method that has the interface as the return type and creates the implementation in the method body.</li> </ul> <p>Additionally there are a few other best-practices that relate more to Hilt.</p>"},{"location":"resources/dagger/#no-business-logic","title":"No Business Logic","text":"<p>Dagger and Hilt are a tool to tie things together. Dagger Modules should therefore contain the bare minimal business logic. All they should do is</p> <ul> <li>Instruct the dagger compiler what implementation to use when a certain interface is requested</li> <li>Define a static factory method for creating instances of classes that can not be constructor injected because:<ul> <li>The class is not declared in our codebase</li> <li>The class requires some special mechanism to be conditionally created (like an <code>androidx.lifecycle.ViewModel</code>).</li> </ul> </li> </ul>"},{"location":"resources/dagger/#small-hilt-modules","title":"Small Hilt Modules","text":"<p>For Hilt modules, just like regular code, the principle of single responsibility applies. This does not mean that every Hilt Module should always be limited to a single <code>@Provides</code> or <code>@Binds</code> method, but for testing purposes it is helpful sometimes.</p> <p>Let's take remote config loading as an example.</p> <p>Let's assume there is an interface <code>AppConfigRepository</code> and an implementation <code>AppConfigRepositoryImpl</code>. The app config module also defines a <code>AppConfigLifecycleObserver</code> which is registered as a process lifecycle observer using <code>@Binds @IntoSet @ProcessLifecycleObserver</code> which ensures that the config is refreshed every time the user foregrounds the app.</p> <p>A Hilt module for this could look like this.</p> <pre><code>@Module\n@InstallIn(SingletonComponent.class)\npublic abstract class Config_AppModule {\n    @Binds\n    abstract AppConfigRepository appConfigRepository(AppConfigRepositoryImpl repository);\n\n    @Binds\n    @IntoSet\n    @ProcessLifecycleObserver\n    abstract LifecycleObserver lifecycleObserver(AppConfigLifecycleObserver observer);\n}\n</code></pre> <p>For an instrumented test you might want to replace the real <code>AppConfigRepositoryImpl</code> with a test instance, but keep the behavior of the lifecycle observer in place. In that case it is better to define two Hilt modules, one <code>AppConfig_AppModule</code> which sets up bindings that are not expected to be replaced in tests, and another <code>AppConfigRepository_AppModule</code> which would only define the binding of the <code>AppConfigRepository</code> and the Hilt test would just install that module.</p>"},{"location":"resources/dagger/#naming","title":"Naming","text":"<p>For the naming of Dagger modules a fixed suffix' are used to indicate the component that the module installs in.</p> <ul> <li>A module that has <code>@InstallIn(SingletonComponent.class)</code> must have a name ending with <code>_AppModule</code></li> <li>A module that has <code>@InstallIn(ActivityComponent.class)</code> must have a name ending with <code>_ActivityModule</code></li> <li>A module that has <code>@InstallIn(FragmentComponent.class)</code> must have a name ending with <code>_FragmentModule</code></li> <li>A module that has <code>@InstallIn(ViewComponent.class)</code> must have a name ending with <code>_ViewModule</code></li> </ul>"},{"location":"resources/dagger/#hiltviewmodel","title":"HiltViewModel","text":"<p>In this project we do not use <code>@HiltViewModel</code> because it is not possible to inject those in the places where we want to inject them and their usage guide breaks with some of the foundational principles of dependency injection.</p> <p>For example, the code below is a common pattern in this codebase.</p> <pre><code>@HiltViewModel\nclass SomeViewModel @Inject constructor() : ViewModel()\n\nclass SomePresenter @Inject constructor(viewModel: SomeViewModel)\n</code></pre> <p>This will fail compilation with the following error</p> <pre><code>Injection of an @HiltViewModel class is prohibited since it does not create a ViewModel instance correctly.\nAccess the ViewModel via the Android APIs (e.g. ViewModelProvider) instead.\nInjected ViewModel: SomeViewModel\n</code></pre> <p>This is because Hilt doesn't know what <code>ViewModelStoreOwner</code> to obtain the ViewModel from.</p> <p>Instead, to be able to inject a <code>HiltViewModel</code> into a Presenter you would need to do something like this</p> <pre><code>class SomePresenter @Inject constructor(viewModel: Fragment) {\n    val viewModel by fragment.viewModels&lt;SomeViewModel&gt;()\n}\n</code></pre> <p>This breaks dependency injection principles because the consumer becomes responsible for determining where a dependency comes from.</p> <p>Instead we stick to dependency principles by letting the provider define where the ViewModel comes from by declaring a <code>@Provides</code> method for each ViewModel.</p>"},{"location":"resources/dagger/#fragmentviewmodel-and-activityviewmodel","title":"<code>@FragmentViewModel</code> and <code>@ActivityViewModel</code>","text":"<p>To respond to the frustration of not having <code>@HiltViewModel</code> and in order to reduce the amount of boilerplate code resulting from wiring up all bits of our designated architecture, two annotations have been introduced, to mark a <code>ViewModel</code> either as <code>Fragment</code> scoped (<code>@FragmentViewModel</code>) or <code>Activity</code> scoped (<code>@ActivityViewModel</code>).</p> <p>These two work by creating a standalone module that declares a binding for the ViewModel in question. For example, for a <code>BasicViewModel</code> in <code>com.disney.disneyplus.sample.list</code>, doing:</p> <pre><code>@FragmentViewModel\nclass BasicViewModel(\n    private val repository: BasicRepository,\n) : AutoDisposeViewModel() {\n\n}\n</code></pre> <p>Will produce the following <code>BasicFragment_FragmentModule.java</code> in <code>build/generate/source/kapt/[debug/release]/com/disney/disneyplus/sample/list</code>:</p> <pre><code>@Module\n@InstallIn(FragmentComponent.class)\nabstract class BasicViewModel_FragmentModule {\n  @Provides\n  static BasicViewModel provideBasicViewModel(Fragment fragment,\n      @NotNull BasicRepository repository) {\n    return ViewModelUtils.getViewModel(\n        fragment,\n         com.disney.disneyplus.sample.list.BasicViewModel.class,\n         () -&gt; new com.disney.disneyplus.sample.list.BasicViewModel(repository)\n        );\n  }\n}\n</code></pre> <p>Relieving the developer of that work.</p>"},{"location":"resources/dagger/#the-parentclass-parameter","title":"The <code>parentClass</code> parameter","text":"<p>In certain occasions one might want their <code>ViewModel</code> to be bound in the dagger graph as a parent class or interface. This happens, for instance, if an interface for the <code>ViewModel</code> is declared in an <code>api</code> module and the class consuming the <code>ViewModel</code> does not know about its implementation. For instance:</p> <pre><code>@FragmentViewModel(parentClass = BaseViewModel::class)\nclass BasicViewModel(\n    private val repository: BasicRepository,\n) : AutoDisposeViewModel(), BaseViewModel {\n\n}\n</code></pre> <p>Obviously, the class defined as <code>parentClass</code> has to be an actual ancestor of the <code>ViewModel</code>, otherwise the generator will throw an exception.</p>"},{"location":"resources/dagger/#bundle-arguments","title":"Bundle Arguments","text":"<p>If the ViewModel is marked as <code>@FragmentViewModel</code> or <code>@ActivityViewModel</code>, the arguments for its creation or intent can be also automatically injected in its constructor, by marking those parameters with the annotation <code>@BundleArgument</code> and providing the key name to that argument.</p> <p>For instance, for a <code>Fragment</code> with a <code>String</code> argument like this:</p> <pre><code> companion object {\n\n        const val KEY_CHARACTER_ID = \"character_id\"\n\n        /**\n         * Creates an instance of [DetailFragment]\n         */\n        fun newInstance(characterId: String): DetailFragment {\n            return DetailFragment().apply {\n                arguments = Bundle().apply {\n                    putString(KEY_CHARACTER_ID, characterId)\n                }\n            }\n        }\n    }\n</code></pre> <p>the matching argument injection will look like:</p> <pre><code>@FragmentViewModel\nclass DetailViewModel(\n    @BundleArgument(name = KEY_CHARACTER_ID) private val id: String?,\n    private val repository: BasicRepository\n) : AutoDisposeViewModel() {\n\n}\n</code></pre> <p>Note that this annotation does not allow for default values, and that nullable types can still be nullable so they should always be declared as so in the constructor parameters, unless it's 100% certain they will never be null.</p> <p><code>@BundleArguments</code> are only available in <code>ViewModels</code> that are autoinjected. If there's a need to inject an argument into any other class, it is always possible to declare it explicitly in any Dagger module.</p>"},{"location":"resources/dagger/#viewmodelconstructor-annotation","title":"<code>@ViewModelConstructor</code> annotation","text":"<p>In the rare occasions in which a ViewModel would have more than one constructor, one and only one of them should be marked with the <code>@ViewModelConstructor</code> annotation to indicate the code generator which one it should be using to produce instances of the ViewModel.</p>"},{"location":"resources/dagger/#injecting-savedstatehandle","title":"Injecting <code>SavedStateHandle</code>","text":"<p>The same way that <code>@HiltViewModel</code> does, automatic injection of the <code>SavedStateHandle</code> is also provided with both <code>@FragmentViewModel</code> and <code>@ActivityViewModel</code>. Just adding a parameter of type <code>SavedStateHandle</code> is enough for the generator to infer the <code>SavedStateHandle</code> extraction.</p> <p>However, using a <code>SavedStateHandle</code> implies a fundamental shift in the way the ViewModels are perceived. As stated in the HiltViewModel section, our ViewModels are injected in places beyond the view lifecycle, and a <code>SavedStateHandle</code> is only available for retrieval after the view creation.</p> <p>Because Dagger will perform the injection on a Fragment in the <code>onAttach</code> event, which happens earlier than the <code>onCreate</code> (where the saved state handle is first available), injecting the <code>ViewModel</code> directly in the Fragment like so:</p> <p>Crashes if using <code>SavedStateHandle</code></p> <pre><code>@AndroidEntryPoint\nclass BasicFragment : Fragment(R.layout.fragment_sample) {\n\n    @Inject\n    lateinit var viewModel: BasicViewModel\n\n    @Inject\n    internal lateinit var presenterProvider: Provider&lt;BasicPresenter&gt;\n\n    private val presenter by viewScoped { presenterProvider.get() }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewLifecycleOwner.subscribeWhileStarted(viewModel.stateOnceAndStream) { presenter.bindState(it) }\n    }\n}\n</code></pre> <p>Would result in a crash as Dagger tries to create an instance of the <code>BasicViewModel</code>, for which it needs a <code>SavedStateHandle</code> that is not yet available.</p> <p>For this reason, we have made the <code>SavedStateHandle</code> injection opt-in, like so:</p> <pre><code>@FragmentViewModel(optInSavedSateViewModel = true)\nclass BasicViewModel(\n    private val repository: BasicRepository,\n    private val savedStateHandle: SavedStateHandle,\n) : AutoDisposeViewModel() {\n\n}\n</code></pre> <p>In opt-in scenarios, then, the <code>ViewModel</code> needs to be injected using <code>Lazy</code>. Although technically <code>Provider</code> will also work, it is not the semantically correct wrapper.</p> <p>Works when using <code>SavedStateHandle</code></p> <pre><code>@AndroidEntryPoint\nclass BasicFragment : Fragment(R.layout.fragment_sample) {\n\n    @Inject\n    lateinit var viewModel: dagger.Lazy&lt;BasicViewModel&gt;\n\n    @Inject\n    internal lateinit var presenterProvider: Provider&lt;BasicPresenter&gt;\n\n    private val presenter by viewScoped { presenterProvider.get() }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewLifecycleOwner.subscribeWhileStarted(viewModel.get().stateOnceAndStream) { presenter.bindState(it) }\n    }\n}\n</code></pre> <p>Note that for these opt-in scenarios the developer is responsible for handling when the <code>ViewModel</code> is created. This means if the <code>ViewModel</code> is injected in other classes, the developer must make sure its creation only happens after the View is available (by marking it <code>Lazy</code> and not accessing it prior to onCreate), and in the UI thread. In these cases, though, the recommendation is to limit the <code>ViewModel</code> usage to the <code>Fragment</code>/<code>Activity</code> and <code>Presenter</code>.</p>"},{"location":"resources/design/","title":"Design","text":"<ul> <li>This doc gives a high overview of how we handle Design in Dmgz</li> <li>Quick Zeplin link to our colors, TypeRamps, background, etc.</li> </ul>"},{"location":"resources/design/#design-engineering","title":"Design Engineering","text":"<ul> <li>We have a Design Engineering team - here is their documentation<ul> <li>Direct link to our Android Design Engineering</li> </ul> </li> <li>They work on a Design Library that we use in our code - here is the link to their repository</li> <li>Have any questions? Ask the person on your workstream that is on the Android Design Group<ul> <li>Team Bender - Guilherme Branco</li> <li>Team Edna - Louis Davin</li> <li>Team Mandalorian - Jon Kennedy</li> <li>Team Russell - Selcan Guner</li> <li>You could also reach out our Android Design Engineering Team directly: Sandra Dupre or Fulya Yongaci</li> </ul> </li> </ul>"},{"location":"resources/design/#android-design-library","title":"Android Design Library","text":"<ul> <li>The Android Design Library helps us maintain a Design System. It makes working with colors, fonts, etc. across multiple Brands (Disney+, Star+, Hulu) in a single code base easier and more consistent</li> <li>Android Design Library Repo</li> <li>Exampe PR on how to update the Design Library Version in the Dmgz codebase</li> <li>Below will guide you on how to use the Android Design Library correctly in Dmgz</li> </ul>"},{"location":"resources/design/#colors","title":"Colors","text":"<ul> <li>Only use colors that are defined in the Android Design Library<ul> <li>Zeplin link of our colors here</li> <li>If there is a color in your zeplin design that is not already defined, please reach out to someone on the Design Engineering team. Do not add a new color</li> </ul> </li> <li>When using colors, always use attributes, not a direct color. We have to do this because Dmgz builds the apps for multiple different brands</li> </ul> <p>Correct color usage with attributes</p> <pre><code>android:textcolor=\"?gray100\"\n...\n&lt;solid android:color=\"?primary\" /&gt;\n</code></pre>"},{"location":"resources/design/#gradients","title":"Gradients","text":"<ul> <li>Do not mix colors and attributes!</li> <li>What we mean is this - if you find an attribute value for <code>startColor</code> and <code>centerColor</code> but not for <code>endColor</code>, please do not add a new value for <code>endColor</code>. Reach out to Sandra and she can add the new value and publish it via our library</li> </ul>"},{"location":"resources/design/#typeramp","title":"TypeRamp","text":"<ul> <li>TypeRamp is how we style our text in app<ul> <li>Zeplin link to our TypeRamps here</li> </ul> </li> <li>Only use TypeRamp values that are defined in the Android Design Library. Please do not override the TypeRamp values. Do not add values for:<ul> <li>line spacing</li> <li>text size</li> </ul> </li> <li>If there is a TypeRamp in your zeplin design that is not already defined, please reach out to someone on the Design Engineering team. Do not add a TypeRamp</li> </ul> <p>Correct TypeRamp style usage</p> <pre><code>&lt;TextView\nandroid:id=\"@+id/confirmPasswordTitle\"\nstyle=\"@style/TypeRamp.Headline.H1\"\n...\n&lt;style name=\"Disney.TextView.FilterItemFocused\" parent=\"TypeRamp.Headline.H3.Heavy\"&gt;\n</code></pre> <p>Example of overriding the textSize - do not do this!</p> <pre><code>style=\"@style/Disney.TextView.Metadata\"\nandroid:textSize=\"7sp\" // do not do this!\n</code></pre> <p>Never use any text size under 10sp</p> <p>Never use any text size under 10sp. Google can remove our app if we use text below 10sp because it is not accessibly enough</p>"},{"location":"resources/design/#design-system","title":"Design System","text":"<ul> <li>We utilize a Design System, and the library that our Android Design Engineering works on helps us maintain it</li> <li>Quick Zeplin link to our colors, TypeRamps, background, etc.</li> </ul>"},{"location":"resources/git/","title":"Git","text":"<p>Install Git here and read about our Git setup below</p>"},{"location":"resources/git/#branching","title":"Branching","text":"<ul> <li>Active feature development for Disney+ happens on the <code>development</code> branch.</li> <li>For every release of the app a release branch will be created. e.g. <code>release/1.2</code></li> <li>Any patches for that major-minor combination will then happen on that branch. So <code>1.2.0</code>, <code>1.2.1</code> etc will all come from the release branch</li> <li>For Pull Request a branch naming convention is enforced where the branch name should have the format<ul> <li><code>your_initials/ticket-category-ticket-number-optional-description</code></li> <li>Example: <code>tc/ANDROID-5434-optional-description</code></li> <li>The ticket categories are the names of the jira tickets. We have four currently:<ul> <li>ANDROID - Ticket on mobile</li> <li>ANDROIDTV - Ticket on STB (Set Top Box), so Android TV / Fire TV</li> </ul> </li> <li>One of our <code>git hooks</code> ensures this naming convention is respected</li> </ul> </li> </ul>"},{"location":"resources/git/#commit-messages","title":"Commit messages","text":"<ul> <li>All commit messages should be prefixed by the ticket name of the branch</li> <li>You do not need to add the ticket prefix yourself. This is automatically done by the commit-msg git hook.</li> <li>Example - <code>ANDROID-1234: Add support for feature X</code> (but when committing, you can just write <code>Add support for feature x</code>).</li> </ul>"},{"location":"resources/git/#git-hooks","title":"Git hooks","text":"<ul> <li>To get early feedback on your code, we automatically install a few <code>git hooks</code> when you compile the <code>mobile</code> project</li> <li>A <code>git hook</code> is a script that executes before an event</li> <li>We run a few checks before allowing a <code>git commit</code> to go through</li> <li>One of the checks we run is a code analysis tool called Detekt. Detekt helps ensure that your code is neat and follows our format rules. A commit with formatting errors will fail. If you would like Detekt to autocorrect simple mistakes when committing then you can set <code>dominguez.detekt.autoCorrect</code> to true in the <code>gradle.properties</code> file.</li> <li> <p>If for whatever reason you randomly need to bypass the git hooks, use the <code>-n</code> flag to do so</p> <ul> <li>Avoid doing this if possible</li> <li>Example - <code>git commit -n -m \"Special commit that does not need the git hooks\"</code></li> </ul> </li> <li> <p>Sometimes the descriptions of why a <code>git hook</code> failed are not sufficient. Try running the commands separately to try and get a more descriptive error. Use these:</p> <ul> <li><code>./gradlew checkstyle</code></li> <li><code>./gradlew detekt</code></li> </ul> </li> <li> <p>Sometimes it is okay to bypass a warning by suppressing it. Here is an example of suppressing <code>TooManyFunctions</code> error:</p> <pre><code>...\n@Suppress(\"TooManyFunctions\")\nclass MovieDetailViewModel(\n...\n</code></pre> </li> </ul>"},{"location":"resources/git/#up-to-date-checks","title":"Up to date checks","text":"<ul> <li>Branch protection has been set up to make sure that the <code>developemt</code> branch will always succeed and your branch must always contain the latest changes from <code>development</code> to be able to merge</li> <li>If another PR merges before you that means you will first need to merge those changes back into your branch (and then CI will run again to verify everything still works) before you can merge into <code>development</code></li> </ul>"},{"location":"resources/git/#force-push-policy","title":"Force push policy","text":"<ul> <li>In some cases it is okay to force push one of your own branches</li> </ul>"},{"location":"resources/git/#merge-rebase-or-squash","title":"Merge, Rebase or Squash","text":"<ul> <li>When your PR is ready to merge (for now) it is up to the author to decide if you want to do a rebase, squash or merge-commit</li> </ul>"},{"location":"resources/git/#merging-release-into-development","title":"Merging Release into Development","text":"<ul> <li>Every day one workstream team is tasked with performing the daily task of merging <code>release/X.X</code> into <code>development</code></li> <li>This can be completed by anyone</li> </ul> <p>Danger</p> <p>Never merge <code>development</code> into a <code>release</code> branch</p> <p>Bug</p> <p>There is a bug in the branch protection system, if you create a PR to merge release/1.1.1 into development, clicking the update button wil merge all of the changes from development into release/1.1.1 which is really bad</p> <p>Warning</p> <ul> <li>Sometimes there is more than one release branch</li> <li>If this is the case, make sure to also merge the oldest release branch into the newer release branches</li> <li>For example, if we have branch <code>release/2.14</code> and <code>release/2.15</code>, <code>release/2.14</code> is older. If <code>release/2.14</code> has new commits that <code>release/2.15</code> does not have, we will want to merge <code>release/2.14</code> into <code>release/2.15</code> too</li> </ul>"},{"location":"resources/git/#how-to-perform-daily-merge","title":"How to perform daily merge","text":"<ul> <li>In the step below where you create a new branch, use the corresponding release ticket number in your branch name. Open this release parent ticket, find the release version and use that ticket number<ul> <li>Example:<ul> <li>Here is an example of Jochem merging <code>release/2.13</code> into <code>development</code></li> <li>His branch name uses jira ticket number ANDROID-4357 because Release 2.13 is jira ticket ANDROID-4357 inside of our parent release ticket</li> </ul> </li> </ul> </li> <li>Do the following to merge <code>release</code> into <code>development</code>:</li> </ul> <pre><code>git fetch --all\ngit checkout development\ngit reset --hard origin/development\ngit checkout -b xx/ANDROID-xxx-merge-release-change\ngit merge origin/release\n</code></pre>"},{"location":"resources/glossary/","title":"Glossary","text":"<ul> <li>Below is a glossary of acronyms our team uses and what those acronyms mean</li> <li>Here is a reference to a DSS Company wide Glossary of Acronyms as well</li> </ul>"},{"location":"resources/glossary/#android-glossary","title":"Android Glossary","text":"Term Definition 3P (3PP) 3rd Party (Partners) AAO All At Once - A series will release all episodes on the same day instead of week over week AAW Apple Android Web ADK Application Development Kit. The ADK is provided to partners that are contractually obligated to implement and integrate the Disney+, Star+ or ESPN+ application into their STB. Adyen One of the Payment Processors used by DS ALC A La Carte ALF App Launch Failure ALT App Launch Time AMS (MMDEV) Asset Management System AMS (Search) Application Metadata Services AOP Annual Operating Plan AOSP Android Open Source Project API A way to leverage a service, a handle for a service.  A way to expose a service to someone who is making calls from outside the service. APK Application Programming Kit. The APK allows a partner to pre-load the Disney+ or Star+ application onto their STB. ARC Analytic Reporting Console (internal cross functional reporting app) Avail Short for \"availability notice.\" The business rules and licenses that govern how an asset may be distributed to consumers. BAU Business as usual BBD Browser Based Device. A BBD is a device that is web-enabled once equipped with the appropriate connectivity (WiFi, 3G, 4G, 5G). Such devices include but are not limited to the following: desktop computers, mobile phones, tablets, smart TVs, and game consoles. BCM Broadcom (hardware/chipset provider and partner for ADK) BME Port Broadcom creating a middleware layer that connects Disney Apps to partner firmware CCE Content Catalog Engineering CDE Content Delivery Engineering Charles Charles is a web proxy that runs on your computer and allows you to record data that is sent and received between your web browser and the server (Charles Log). Using Charles makes it easy to diagnose and fix problems. CIS Consumer Identity Services. Onboards users into UNID/EPC/OneID. CMP Cookie Management Preference Connected Devices Devices that interact with DS properties (ie Roku, PlayStation, Legacy Apple TV, Chromecast, Sonos, Xbox, Windows, Panasonic, etc) Conviva Real-time monitoring of video-stream quality-of-service and provide video metrics for analysis and reporting. CP Critical Project CPT Critical Project Tracker CTaM Characters, Titles, and More. Identifies and organizes all WDC IP (owned &amp; distributed) and stores golden records, which are curated by data governors and stewards from across TWDC within CTaM. CTaM stores mapping of the CTaM IDs back to the IDs from the originating systems to provide a single location that links CTaM IDs to systems that originated IP. CXE Customer Experience Engineering. London-based engineering team responsible for the Optumus product. DCP Disney Consumer Payments - Tax services owned by Disney Delorean Header A tool used to see the state of the Disney+ app at different times. This is crucial for Media Delivery to ensure content will sunrise and sunset at the correct times. DEO Disney Edge Ops team. Provides technical operations support and monitoring for Disney Streaming apps and the Disney Edge CDN. Disney Bundle Monthly Bundle subscription includes access to Disney+, ESPN + and Hulu Subscription options include: -SASH: includes Ad-supported Hulu -NOAH: includes Ad-free Hulu Available in the United States only DSI Data Solutions Instrumentation (fka DGI) DSS-HLS HTML5 video playback engine, focused on HTML5 playback of HLS (HTTP Live Streaming) CMAF DRM video streams on Browser-Based Devices (BBDs). Dub Card Still text-based image file (usually white text on black background) listing credits for dubbing talent at end of content. DUST DUST specifies a set of common metric events that all platform SDKs should generate, as well as the service infrastructure required to upload and monitor them. DUST events are emitted via the SDK and sent via JSON over HTTP to the Telemetry Service. EAP Early Access Partners EBAS Exit Before App Start EBVS Exit Before Video Start ECP Enterprise Consumer Payments (TWDC payments team) Edge Service Edge service is the IAAS (Infrastructure as a Service) managed by API Services to help developers to expose and manage public APIs. Supported features include, but are not limited to, regional load balancing, contextual headers, canary deployments, circuit breakers/fallback support, and traffic filtering. Handles traffic for all DSS supported regions and products. EPC Enterprise Permissions Center (Single source for all WEDC email opt-ins/outs) FC Feature Complete FT Free Trial GA General Access/General Availability Glimpse Internal DSS solution for gathering historical clickstream data related to Content Performance Reporting, as well as User Journey Performance Monitoring and support for Marketing and Audience Segmentation efforts. HAR Capture HAR (HTTP Archive) is a file format used by several HTTP session tools to export the captured data. The format is basically a JSON object with a particular field distribution. Heimdall Heimdall is the Project name for all aspects of Quality of Service (QoS) application instrumentation to solve for QoE use cases. From event and metadata provision via platform SDK (through player integration), via API Services edge and streaming data platform, and ultimately to consumers of data including such products as Optumus, Bifrost &amp; Data Platform. Header(s) HTTP headers let the client and the server pass additional information with an HTTP request or response. An HTTP header consists of its case-insensitive name followed by a colon (:), then by its value. Custom headers are great for troubleshooting, informational purposes, and implementing particular logic on the server side (e.g. Delorean header). HiVE Formerly known as DSS-HLS team (HTML5 Video Engine). Horizontal Stacking Horizontal stacking allows for sequencing of paid subscriptions, promotions and gift cards so that they are consumed one at a time. IAP In-app purchase ICP International Consumer Payments IDP Service Identity Provider Service- an identityID should be tied to a single accountID upon account creation. IdP Service, owned by User Services team, stores email and password info for a given user. IRA Infosec Risk Assessment IPSE Identity, Preferences, Security &amp; Experience ISU Instant Sign Up ISP Internet Service Provider License Plate A login method where the user needs to use their mobile phone to log-in to their streaming service. Usually they will be asked to type in a \u2018/activate\u2019 url onto their mobile phone. LQA Localization QA LRQA (fka CDQA) Living Room QA team (FKA CDQA) M2A Monthly to Annual MARCOM Marketing Communication MedSA Media Solutions Architects (sub team of VPE). Responsible for coordinating solution implementation efforts across Media-focused Engineering teams, including front-end client platforms, backend systems/teams, QA, QE, and others. MEL Media Extension Library. They interact with the ad server and are responsible for fetching ad urls and broadcasting beacons. MeTS Media Tools and Services Team MFN most favored nations MLP Marketing Landing Page MMFS Media Metadata Feed Spec MSO Multiple system operator MVPD/Telco Distro partner NOAH No ads, Hulu bundle NTF New To Family, meaning user isn't already a D+, E+, or Hulu subscriber NVE Native Video Engine OAP Outside App Purchase Offer(s) Base subscriptions, Premier Access, Pay-per-view, Bundles OLAF One Legal Accountability Form - Intake form Disney uses for all public facing interactive products\u2013 mobile apps, websites, smart TV apps, smart toys, etc to make sure everything is cleared and hits market compliantly. Global corporate requirement. Applicable to the Legal service and the COPPA compliance tool (Salesforce). - A series of questions designed by the Privacy Group to inform them of product intent. Privacy uses this information to assign a Classification (General Audience, Family Friendly, or Kid-directed) which in turn has legal implications of what is required and what is not allowed. OLP Organic Landing Page OneID A Disney branded authentication service that extends across multiple websites and apps owned by The Walt Disney Company, such as ABC, ESPN, Marvel, etc. How users can sign up for ESPN, Marvel.com, StarWars.com, parks apps, Disney+ and more Optumus Front-end web based monitoring and visualisation product providing Quality of Experience (QoE) Data in relation to Disney+ and Star+ Applications. P13N Personalization Team PA Premier Access. Grants access to a given title for a one-time fee before the title is available to all users. PBS Playback Scenario PCON Parental Controls PDPI Personalization, Discovery, Profiles, Identity (value stream) PIE Partner Integration Engineering PII Personally Identifiable Information. Also known as SPI (Sensitive Personal Information).  Information that can be used on its own or with other information to identify, contact, or locate a single person, or to identify an individual in context PR Pull Request. The purpose of PR is to review the potential changes with collaborators and add follow-up commits before your changes are merged into the base or master branch. PSO Production Services Operations team QTE Quality, Targeting &amp; Experience Group RACI Responsible, Accountable, Consulted, Informed RC Release Candidate READ Used interchangeably with OLAF. R.E.A.D. is the intake form used for all our public facing interactive products\u2013 mobile apps, websites, smart TV apps, smart toys, etc to make sure everything is cleared and hits market compliantly. R.E.A.D. is a global corporate requirement. Applicable to the Legal service and the COPPA compliance tool (Salesforce). A series of questions designed by the Privacy Group to inform them of product intent.  Privacy uses this information to assign a Classification (General Audience, Family Friendly, or Kid-directed) which in turn has legal implications of what is required and what is not allowed. Release Embargo / Code Freeze A period of time where no code is pushed to production RoW Rest of World SALR Successful App Launch Rate SASH Standard Ad Supported Hulu SDE Services &amp; Data Engineering SDK Software development kit. Essentially a web view of DS UI. SEE Subscriber Environments &amp; Entitlements team Service Term used to denote a BAMTech backend application which manages a specific function of a product. This function could be consumer facing, such as thumbnail and metadata propagation, or invisible to the consumer, such as a handling credit card processing or validating user credentials when upon login. -Playlist Service (Media Framework) -Session Service (Auth. Service) -Location Service -Key Service -EPG Service (Electronic Programming Guide) SGAI Server Guided Asset Insertion. Skinny AMP An AMP that contains the bare minimum amount of data to be ingested.  These are used to unblock remote QC activity.  Without an AMP, media won't have media rights applied (Media rights = Avail + Media + AMP). SMAC Session and Media Access team SOC System On Chip SOT Source of Truth SSAI Server Side Asset Insertion. Stacking Subscription stacking is a feature that allows an existing active subscriber the ability to redeem, add or adjust their subscriptions allowing them the opportunity to take advantage of promotional offers. Standalone Offer where Disney+ is being sold on its own. Also referred to as \u201cA La Carte\u201d. DSS is typically paid retail rates for these subscriptions Sunrise Content tile is made available on the service SWID User ID (StarWave Identifier). Assigned when signing up through OneID. TAM Technical Account Manager TOS Technical Ops Service Trick Play Thumbnail seek when invoked, thumbnail images appear above the progress bar to help orient the user to video content. TVE Television Everywhere UNID Unknown Identifier. Anonymous user recognition/tracking. Identity mapping from unknown to known (US and territories only, all platforms) UWP Universal Windows Platform - a common app platform on every device that runs Windows 10, such as Xbox. Vertical Stacking Vertical stacking takes into account all the subscriptions that a user concurrently owns and uses it to apply a discount. This is specifically for any overlapping product offers in the form of a package, value offer, or bundle. VPE Video Platform Engineering VPF Video Playback Failure - Occurs when a fatal error causes a video playback to fail during playback session VSF Video Start Failures - The percentage of viewers who attempted to play a video but did not successfully get playback. VX Viewer Experience. (Synonymous with customer support). WPA Web Platform Architecture. Full-stack team responsible for the web platform (includes Node JS - BANE, all AWS infrastructure, build and deployment, workflows and tooling. WPNX Weapon X (internal testing/experimentation tool)"},{"location":"resources/offices/","title":"Offices","text":"<p>This doc houses information regarding our offices which can be useful if you visit them one day!</p> <ul> <li>New York Office</li> <li>Amsterdam Office - TODO</li> <li>Seattle Office - TODO</li> <li>San Francisco</li> </ul>"},{"location":"resources/project_code_guidelines/","title":"Project and Code Guidelines","text":"<p>The goal of this document is to outline some of the common rules and conventions we use as a team, within the Dmgz Android code base. This ensures we maintain consistent and high quality code within our project.</p>"},{"location":"resources/project_code_guidelines/#code-style","title":"Code Style","text":"<p>The code style and conventions used within the code base are based off of Kotlin's official and recommended style. There is a minor change to the style to prevent the use of wildcard imports, but the rest is untouched. Unless otherwise specified, the conventions outlined in the document above should be followed. See Setting Up Android Studio on how to import our project code style.</p>"},{"location":"resources/project_code_guidelines/#file-naming","title":"File Naming","text":""},{"location":"resources/project_code_guidelines/#class-files","title":"Class files","text":"<p>Class names are written in UpperCamelCase.</p> <p>For classes that extend an Android component, the name of the class should end with the name of the component; for example: <code>SignInActivity</code>, <code>SignInFragment</code>, <code>ImageUploaderService</code>, <code>ChangePasswordDialog</code> (or <code>ChangePasswordDialogFragment</code>).</p> <p>For classes that contain an acronym:</p> <ul> <li>If it is two letters, capitalize both (i.e. IOException).</li> <li>If it is three or more, use lowercase (i.e. IapProduct).</li> </ul>"},{"location":"resources/project_code_guidelines/#resources-files","title":"Resources files","text":"<p>Resources file names are written in lowercase_underscore.</p>"},{"location":"resources/project_code_guidelines/#drawable-files","title":"Drawable files","text":"<p>Naming conventions for drawables (these are not exhaustive, but other types will follow the same convention).</p> Asset Type Prefix Example Button <code>button_</code> <code>button_send.xml</code> Divider <code>divider_</code> <code>divider_horizontal.xml</code> Icon <code>ic_</code> <code>ic_star.xml</code> Selector <code>selector_</code> <code>selector_search_bar.xml</code>"},{"location":"resources/project_code_guidelines/#layout-files","title":"Layout files","text":"<p>Layout files should match the name of the Android components that they are intended for but moving the top level component name to the beginning. For example, if we are creating a layout for the <code>SignInActivity</code>, the name of the layout file should be <code>activity_sign_in.xml</code>.</p> Component Class Name Layout Name Activity <code>UserProfileActivity</code> <code>activity_user_profile.xml</code> Fragment <code>SignUpFragment</code> <code>fragment_sign_up.xml</code> Dialog <code>ChangePasswordDialog</code> <code>dialog_change_password.xml</code> Adapter item <code>PersonItem</code> <code>item_person.xml</code>"},{"location":"resources/project_code_guidelines/#layout-id-naming","title":"Layout ID Naming","text":"<p>View IDs should:</p> <ul> <li>Be prefixed with the class/feature (login, movieDetail, download, etc)</li> <li>Suffixed with the name of the element type (TextView, RecyclerView, Button, etc)</li> <li>Optionally, within the <code>.xml</code> an additional identifer can be used to distinguish between each view. (i.e. header/footer or email/password, etc)</li> <li>If the element type is a ViewGroup (Linear, Constraint, Frame, etc), <code>Layout</code> should be used as the suffix</li> </ul> Feature Identifier (within xml) Element type Name Login Email Button loginEmailButton Login Password Button loginPasswordButton Movie Detail Header ViewGroup movieDetailHeaderLayout Movie Detail Footer ViewGroup movieDetailFooterLayout"},{"location":"resources/project_code_guidelines/#code-guidelines","title":"Code Guidelines","text":""},{"location":"resources/project_code_guidelines/#fully-qualify-imports","title":"Fully qualify imports","text":"<p>Do this</p> <pre><code>import foo.Bar\n</code></pre> <p>Not this</p> <pre><code>import foo.*\n</code></pre> <p>If you see some wildcard imports still occuring you may need to check your \"Packages to use imports with '*'\" setting in Android Studio. CMD + Shift + A and then search for \"Packages to use imports with\".</p>"},{"location":"resources/project_code_guidelines/#android-component-method-ordering","title":"Android component method ordering","text":"<ul> <li>If your class is extending an Android component such as an Activity or a Fragment, order the override methods so that they match the component's lifecycle.</li> <li>This is particularly important for LifecycleObservers.</li> <li>These should be the top-most functions in the class (after constructors and <code>init</code>).</li> </ul> <p>Do this</p> <pre><code>class MainActivity : BaseActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n      ...\n    }\n\n    override fun onResume() {\n      ...\n    }\n\n    override fun onPause() {\n      ...\n    }\n\n    override fun onDestroy() {\n      ...\n    }\n\n    private fun someMethod() {\n      ...\n    }\n}\n</code></pre> <p>Not this</p> <pre><code>class MainActivity : BaseActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n      ...\n    }\n\n    override fun onResume() {\n      ...\n    }\n\n    private fun someMethod() {\n      ...\n    }\n\n    override fun onDestroy() {\n      ...\n    }\n\n    override fun onPause() {\n      ...\n    }\n}\n</code></pre>"},{"location":"resources/project_code_guidelines/#chains-styling-rxjava-flow-etc","title":"Chains styling (RxJava, Flow, etc)","text":"<p>Chains of operators require line-wrapping. Every operator must go on a new line and the line should be broken before the <code>.</code></p> <p>Do this</p> <pre><code>override fun entitlementCheck(groupId: String): Completable =\n    groupWatchApi.getContentId(groupId)\n        .flatMapSingle { loadPlayable(it) }\n        .filter { it is Movie }\n        .flatMapCompletable { playable -&gt; earlyAccessCheck.checkEntitlement(groupId, playable) }\n</code></pre> <p>Not this</p> <pre><code>override fun entitlementCheck(groupId: String): Completable =\n    groupWatchApi.getContentId(groupId).flatMapSingle { loadPlayable(it) }.filter { it is Movie }\n        .flatMapCompletable { playable -&gt; earlyAccessCheck.checkEntitlement(groupId, playable) }\n</code></pre>"},{"location":"resources/project_code_guidelines/#kotlins-scoping-functions-let-with-apply-run-also","title":"Kotlin's scoping functions (let, with, apply, run, also)","text":"<p>There is almost always an alternative to these functions that communicates intent better. Oftentimes, these result in less readable code and may make code reviews more difficult.</p> <p>The Dmgz project primarily makes use of <code>let</code> and <code>also</code>.</p>"},{"location":"resources/project_code_guidelines/#primary-usages-of-let","title":"Primary usages of let","text":"<ul> <li>copying a <code>var</code> reference into local scope</li> <li>null checking a reference</li> <li>performing a <code>map</code> operation on a single value in a chain</li> </ul>"},{"location":"resources/project_code_guidelines/#primary-usage-of-also","title":"Primary usage of also","text":"<ul> <li>Can be used for builders to create a local scope and nice grouping</li> </ul> <p>Use named receiver</p> <p>A named receiver (<code>animator</code> below) makes the code more clear <pre><code>val fadeOutAnimator = ObjectAnimator.ofFloat(...).also { animator -&gt;\n    animator.duration = DURATION10\n    animator.startDelay = DURATION40\n    animator.interpolator = CubicBezierInterpolator.EASE_IN\n}\n</code></pre></p>"},{"location":"resources/project_code_guidelines/#avoid-usage-of-apply-and-with","title":"Avoid usage of <code>apply</code> and <code>with</code>","text":"<p><code>apply</code> or a <code>with</code> can be very difficult to understand without an IDE, especially with longer blocks of code</p> <p>Do this</p> <pre><code>binding.titleAboutTextView.text = title\nbinding.titleAboutTextView.isGone = title.isEmpty()\nbinding.valueAboutTextView.text = value\nbinding.valueAboutTextView.isVisible = value.isNotEmpty()\n</code></pre> <p>Over this</p> <pre><code>with (binding) {\n    titleAboutTextView.text = title\n    titleAboutTextView.isGone = title.isEmpty()\n    valueAboutTextView.text = value\n    valueAboutTextView.isVisible = value.isNotEmpty()\n}\n</code></pre>"},{"location":"resources/project_code_guidelines/#when-vs-if","title":"When vs If","text":"<p>Prefer using <code>if</code> for binary conditions instead of <code>when</code>.</p> <p>Do this</p> <pre><code>if (x == null) ... else ...\n</code></pre> <p>Not this</p> <pre><code>when (x) {\n    null -&gt; // ...\n    else -&gt; // ...\n}\n</code></pre> <p>If there are three or more options prefer <code>when</code></p> <p>Do this</p> <pre><code>when (state) {\n    Loading -&gt; router.startSplash()\n    LoggedOut -&gt; determineLoggedOutAccountState()\n    LoggedIn -&gt; determineLoggedInAccountState()\n    NewUser -&gt; loadProfilesAndRoute { handleNewUser() }\n    else -&gt; ExampleLog.e(e) { $state is not handled properly }\n</code></pre> <p>Not this</p> <pre><code>if (state is Loading) {\n    router.startSplash()\n} else if (state is LoggedOut) {\n    determineLoggedOutAccountState()\n} else if (state is LoggedIn) {\n     determineLoggedInAccountState()\n} else if (state is Newuser) {\n    loadProfilesAndRoute { handleNewUser() }\n} else {\n    ExampleLog.e { $state is not handled properly }\n}\n</code></pre>"},{"location":"resources/project_code_guidelines/#use-destructuring-declarations-to-make-code-more-readable","title":"Use destructuring declarations to make code more readable","text":"<p>It is often common to have functions return tuples (Pair, Triple, etc) or sometimes <code>data</code> classes. Destructuring declarations should be used to improve readability and provide more context.</p> <p>Do this</p> <pre><code>private fun showIntroOverlayWhenNeeded(devicesAvailableStream: Flowable&lt;Boolean&gt;): Completable =\n    Flowables.combineLatest(devicesAvailableStream, overlayEnabledProcessor, allowedInThisSessionOnceAndStream())\n        .map { (isCastAvailable, isCastOverlayEnabled, isCastAllowedForSession) -&gt; \n            isCastAvailable &amp;&amp; isCastOverlayEnabled &amp;&amp; isCastAllowedForSession \n        }\n        .firstOrError()\n</code></pre> <p>Not this</p> <pre><code>private fun showIntroOverlayWhenNeeded(devicesAvailableStream: Flowable&lt;Boolean&gt;): Completable =\n    Flowables.combineLatest(devicesAvailableStream, overlayEnabledProcessor, allowedInThisSessionOnceAndStream())\n        .map { it.first &amp;&amp; it.second &amp;&amp; it.third }\n        .firstOrError()\n</code></pre>"},{"location":"resources/project_code_guidelines/#use-companion-object","title":"Use Companion Object","text":"<p>The project primarily uses companion objects to organize static class members and static functions. This allows for accessing members of a class by class name only (we dont have to explictly create an instance of the class).</p> <p>This is useful in many scenarios, but most commonly is used to create factories. A common pattern used throughout the project is their usage when creating a Fragment.</p>"},{"location":"resources/project_code_guidelines/#string-constants-naming-values","title":"String constants, naming, values","text":"<p>Many elements of the Android SDK such as <code>SharedPreferences</code>, <code>Bundle</code>, or <code>Intent</code> use a key-value pair approach.</p> <p>Define these keys in the associated companion object and prefix them as indicated</p> Element Field Name Prefix SharedPreferences <code>PREF_</code> Bundle <code>BUNDLE_</code> Fragment Arguments <code>ARG_</code> Intent Extra <code>EXTRA_</code> Intent Action <code>ACTION_</code> <pre><code>companion object {\n    const val ARG_DETAIL = \"detailArg\"\n\n    /**\n     * Create a new instance of the [DetailFragment]\n     */\n    fun newInstance(arguments: DetailPageArguments) =\n        DetailFragment().withArguments(DETAIL_ARG to arguments)\n}\n</code></pre>"},{"location":"resources/project_code_guidelines/#tests-style-rules","title":"Tests Style Rules","text":""},{"location":"resources/project_code_guidelines/#unit-test-naming","title":"Unit test naming","text":"<p>Test classes should match the name of the class the tests are targeting, followed by \"Test\". For example, if we create a test class that contains tests for the <code>LoginEmailFragment</code>, we should name it <code>LoginEmailFragmentTest</code>.</p>"},{"location":"resources/project_code_guidelines/#prefix-any-mock-objects-with-mock","title":"Prefix any Mock objects with \"mock\"","text":"<pre><code>private val mockLoginEmailAction: LoginEmailAction = mock()\nprivate val mockAccountValidationRouter: AccountValidationRouter = mock()\nprivate val mockGlobalIdRouter: GlobalIdRouter = mock()\nprivate val mockErrorRouter: ErrorRouter = mock()\nprivate val mockOtpRouter: OtpRouter = mock()\n\n// followed by the object under test\nprivate lateinit var loginEmailViewModel: LoginEmailViewModel\n</code></pre>"},{"location":"resources/project_code_guidelines/#use-mockitos-mockito-kotlin-mock-instead-of-mock","title":"Use Mockito's (mockito-kotlin) mock() instead of @Mock","text":"<p>Do this</p> <pre><code>private val mockRipcutImageLoader = mock&lt;RipcutImageLoader&gt;()\nprivate val mockChannelDrawableProvider = mock&lt;ChannelDrawableProvider&gt;()\nprivate val mockResources = mock&lt;Resources&gt;()\n</code></pre> <p>Not this</p> <pre><code>@Mock\nlateinit var mockRipcutImageLoader: RipcutImageLoader\n\n@Mock\nlateinit var mockChannelDrawableProvider: ChannelDrawableProvider\n\n@Mock\nlateinit var mockResources: Resources\n</code></pre>"},{"location":"resources/project_code_guidelines/#use-doreturnwhenever-syntax","title":"Use doReturn().whenever() syntax","text":"<p>Do this</p> <pre><code>doReturn(Observable.just(Success))\n    .whenever(mockLoginEmailAction).login(expectedInput)\n</code></pre> <p>Not this</p> <pre><code>whenever(mockLoginEmailAction.login(expectedInput))\n    .thenReturn(Observable.just(Success))\n</code></pre>"},{"location":"resources/project_code_guidelines/#use-arrangeactassert","title":"Use Arrange/Act/Assert","text":"<p>Format unit tests in the following manner:</p> <pre><code>@Test\nfun `name of unit test`() {\n\n    // Arrange\n    doReturn(FooData()).whenever(someMock).someMethod()\n\n    // Act\n    val actual = objectUnderTest.methodToTest()\n\n    // Assert\n    assertThat(actual).isEqualTo(expected)\n}\n</code></pre>"},{"location":"resources/rx_java/","title":"RxJava Operators By Example","text":"<p>This document contains a bunch of commonly used RxJava operators in this project with an explanation of what they do and, in some cases, what the Kotlin Flow equivalent would be</p>"},{"location":"resources/rx_java/#replay1refcount","title":"<code>replay(1).refCount()</code>","text":"<p>This operator combination is often used to create a shared state stream that:</p> <ul> <li>subscribes to the upstream once when the first downstream subscriber subscribes.</li> <li>keeps the upstream subscription active until the last downstream subscriber disposes.</li> <li>replays the last emitted value to any new subscribers if there was a subscriber already.</li> </ul>"},{"location":"resources/rx_java/#kotlin-flow","title":"Kotlin Flow","text":"<p>In Kotlin Flow the closest equivalent of <code>replay(1).refCount()</code> would be the stateIn operator when used with SharingStarted.WhileSubscribed. The main differences are:</p> <ul> <li><code>replay(1).refCount()</code> does not include <code>distinctUntilChanged()</code> behavior while <code>stateIn</code> does. If the upstream emits equivalent data twice <code>stateIn</code> will just swallow the second one and not emit it downstream while the RxJava variant would re-emit the same values.</li> <li><code>stateIn</code> returns a <code>StateFlow</code> which is guaranteed to also have a value (where <code>null</code> is a possible value as well).</li> <li><code>stateIn</code> also requires a coroutine scope that will guarantee the upstream subscription to be cancelled when that scope is cancelled while <code>replay(1).refCount()</code> could be more prone to memory leaks if the downstream does not dispose its subscription.</li> </ul>"},{"location":"resources/rx_java/#examples","title":"Examples","text":"<p>Below are a bunch of small example pieces of code that demonstrate what using the <code>replay(1).refCount()</code> operator combination means for a stream.</p> <p>All of these examples have this piece of code in common</p> <pre><code>val processor = PublishProcessor.create&lt;Int&gt;()\nval flowable = processor.startWith(5)\n</code></pre> <p>Where each subscriber receives a <code>5</code> to start and then any values that are passed in using <code>processor.onNext(Int)</code></p> <p>The variations below are:</p> <ul> <li>Returning observer without replay(1).refCount()</li> <li>Returning observer with replay(1).refCount()</li> <li>Returning observer with replay(1).refCount(1, SECONDS)</li> <li>Multiple observers without replay(1).refCount()</li> <li>Multiple observers with replay(1).refCount()</li> </ul> <p>Returning observer scenarios are cases where one observer starts observing, then disposes and then a second observer starts observing. A common use case for this is a configuration change.</p> <p>The Multiple observer scenarios are cases where there are two observers to the same stream instance. A common usecase for this is sharing state between multiple screens.</p>"},{"location":"resources/rx_java/#returning-observer-without-replay1refcount","title":"Returning observer without <code>replay(1).refCount()</code>","text":"<pre><code>val processor = PublishProcessor.create&lt;Int&gt;()\nval flowable = processor.startWith(5)\n\nval disposable = flowable.subscribe { println(\"First observer received $it\") }\n\n// Output:\n// First observer received 5\n\nprocessor.onNext(7)\n\n// Output:\n// First observer received 7\n\ndisposable.dispose()\nflowable.subscribe { println(\"Second observer received $it\") }\n\n// Output:\n// Second observer received 5\n\nprocessor.onNext(10)\n// Output:\n// Second observer received 10\n</code></pre>"},{"location":"resources/rx_java/#returning-observer-with-replay1refcount","title":"Returning observer with <code>replay(1).refCount()</code>","text":"<p>With a returning observer there is actually no difference from the variant without <code>replay(1).refCount()</code> because the reference counter for number of subscribers is set to 0 and the replay cache cleared directly when the first subscriber disposes and thus the second subscriber causes a new upstream subscription which will get the value from <code>startWith</code>. As you'll see below the result here is different when you use pass in a timeout.</p> <pre><code>val processor = PublishProcessor.create&lt;Int&gt;()\nval flowable = processor.startWith(5).replay(1).refCount()\n\nval disposable = flowable.subscribe { println(\"First observer received $it\") }\n\n// Output:\n// First observer received 5\n\nprocessor.onNext(7)\n\n// Output:\n// First observer received 7\n\ndisposable.dispose()\nflowable.subscribe { println(\"Second observer received $it\") }\n\n// Output:\n// Second observer received 5\n\nprocessor.onNext(10)\n// Output:\n// Second observer received 10\n</code></pre>"},{"location":"resources/rx_java/#returning-observer-with-replay1refcount1-seconds","title":"Returning observer with <code>replay(1).refCount(1, SECONDS)</code>","text":"<p>In this example the upstream subscription and replay-cache get kept around for a second after the moment that the stream has no more subscribers. Since it gets a new subscriber directly after that, that new subscriber gets the cached value and not the value passed to <code>startWith</code>.</p> <pre><code>val processor = PublishProcessor.create&lt;Int&gt;()\nval flowable = processor.startWith(5).replay(1).refCount(1, TimeUnit.SECONDS)\n\nval disposable = flowable.subscribe { println(\"First observer received $it\") }\n\n// Output:\n// First observer received 5\n\nprocessor.onNext(7)\n\n// Output:\n// First observer received 7\n\ndisposable.dispose()\nflowable.subscribe { println(\"Second observer received $it\") }\n\n// Output:\n// Second observer received 7\n\nprocessor.onNext(10)\n\n// Output:\n// Second observer received 10\n</code></pre>"},{"location":"resources/rx_java/#multiple-observers-without-replay1refcount","title":"Multiple observers without <code>replay(1).refCount()</code>","text":"<pre><code>val processor = PublishProcessor.create&lt;Int&gt;()\nval flowable = processor.startWith(5)\n\nflowable.subscribe { println(\"First observer received $it\") }\n\n// Output:\n// First observer received 5\n\nprocessor.onNext(7)\n\n// Output:\n// First observer received 7\n\nflowable.subscribe { println(\"Second observer received $it\") }\n\n// Output\n// Second observer received 5\n\nprocessor.onNext(10)\n\n// Output\n// First observer received 10\n// Second observer received 10\n</code></pre>"},{"location":"resources/rx_java/#multiple-observers-with-replay1refcount","title":"Multiple observers with <code>replay(1).refCount()</code>","text":"<pre><code>val processor = PublishProcessor.create&lt;Int&gt;()\nval flowable = processor.startWith(5).replay(1).refCount()\n\nflowable.subscribe { println(\"First observer received $it\") }\n\n// Output:\n// First observer received 5\n\nprocessor.onNext(7)\n\n// Output:\n// First observer received 7\n\nflowable.subscribe { println(\"Second observer received $it\") }\n\n// Output:\n// Second observer received 7\n\nprocessor.onNext(10)\n// Output:\n// First observer received 10\n// Second observer received 10\n</code></pre>"},{"location":"resources/slack_tips/","title":"Slack Tips","text":"<p>This doc provides valuable information regarding slack usage</p>"},{"location":"resources/slack_tips/#etiquette","title":"Etiquette","text":"<ul> <li>All slack messages are saved forever. This is a legal requirement for the company<ul> <li>Because of this, it can be useful to search slack for old messages or threads</li> </ul> </li> <li>Slack messages can only be edited for a very short period of time after sending the message. Edit it quick if you need to!</li> <li>Please be careful with using <code>@here</code> or <code>@channel</code> in a big channel. If used inappropriately, you may be swarmed with the <code>:slackpolice:</code> emoji</li> <li>If you have several messages to send regarding a specific topic, it is common to use a <code>:thread:</code> emoji and then add your additional messages in the thread. This  just helps keep channels clean / organized</li> <li>Here is a small guide on how to format text if you've never used slack before</li> </ul>"},{"location":"resources/slack_tips/#helpful-slack-channels","title":"Helpful Slack Channels","text":"<p>You may need to ask a question in another channel. The following will help you decide where to ask your question:</p> Channel Description #ds-android-devs our team's main android devs channel #activation support for activation services #dplus-bamsdk-support support for the BAM SDK #dsi-glimpse-support support for glimpse (analytics) #dss-general add :slackpolice: emoji to others that use @here #fed-content-api support for content served to our apps #fed-voltron support / technical help for the FED Solutions architecture team #orchestration-service-workgroup support for the orchestration API #dplus-design-mobile support for mobile devices with the design team #dplus-design-cd support for connected devices (TV) with the design team #offer-management-support support for the Offer Management team (formerly paywall services) #disneyplus-support-general general channel to call out Disney+ issues #starplus-support-general general channel to call out Star+ issues #platform_deployments announcements for platform deployments"},{"location":"resources/slack_tips/#potential-slack-channels-of-interest","title":"Potential Slack Channels of Interest","text":"<ul> <li>Diversity &amp; Inclusion<ul> <li><code>#dss-diversity</code></li> <li><code>#dss-pride</code>, <code>#dss-aapi</code>, <code>#dss-hola-network</code>, <code>#dss-bd-streamers</code></li> <li><code>#dss-women</code> is a closed channel for all non-male identifying employees, any woman on the team can invite a new hire who identifies with this group</li> </ul> </li> <li>Employee Q&amp;A<ul> <li><code>#disney-benefits</code> for benefits discussion</li> <li><code>#disney-perks-tips</code> for Disney parks &amp; perks questions</li> </ul> </li> <li>Miscellaneous<ul> <li><code>#baby-yoda</code>, <code>#dogs-happy-face</code>, <code>#cats-happy-face</code>, <code>#star-wars</code>, <code>#music</code>, etc</li> </ul> </li> </ul>"},{"location":"resources/android_studio/android_studio/","title":"Android Studio","text":"<p>This doc goes over setting up Android Studio (AS) and other AS relevant items</p>"},{"location":"resources/android_studio/android_studio/#setting-up-android-studio","title":"Setting Up Android Studio","text":"<ul> <li>Install AS here</li> <li>Import our <code>Project.xml</code> file into AS<ul> <li>Open up the project in AS</li> <li>Click <code>Android Studio</code> \u2192 <code>Preferences</code> \u2192 <code>Code Style</code> \u2192 Select the Gear Icon \u2192 <code>Import Scheme...</code></li> <li>Select our <code>Project.xml</code> file. It can be found at <code>Dmgz/config/codeStyles/Project.xml</code>:</li> </ul> </li> </ul> <ul> <li>Run the following command in the terminal of AS:</li> </ul> <pre><code>make setup_env\n</code></pre> <ul> <li>This will install our <code>git hooks</code></li> <li>You can look at our <code>makefile</code> located at <code>Dmgz/makefile</code> to discover other useful commands you can use. For example, running <code>make all_tests</code> runs all of our unit tests locally</li> </ul>"},{"location":"resources/android_studio/android_studio/#plugins","title":"Plugins","text":"<ul> <li>Here is a list of plugins that some developers find useful on the project<ul> <li>PlantUML - enables the rendering of <code>*.puml</code> files</li> <li>JS GraphQL - to show autocomplete on graph queries. Note that you need to run a Gradle command to set up the configuration per module where graph implementation is enabled</li> <li>ADB IDEA - Shortcuts for some common ADB functions like clearing app data, restarting, uninstalling, etc.</li> <li>Markdown - Edit and view markdown in the IDE</li> <li>Rainbow Brackets - Colorizes brackets in the code</li> </ul> </li> </ul>"},{"location":"resources/android_studio/android_studio/#tips","title":"Tips","text":""},{"location":"resources/android_studio/android_studio/#change-android-studio-terminal","title":"Change Android Studio terminal","text":"<ul> <li>You can change the default terminal inside of AS to one with a lot more functionality, such as Oh-My-Zsh or Warp</li> <li>After installing a new terminal, change it in AS by going to: <code>Preferences</code> \u2192 <code>Tools</code> \u2192 <code>Terminal</code> and then choosing the appropriate shell path<ul> <li>In the case of Oh-My-Zsh the path is <code>/bin/zsh</code></li> </ul> </li> </ul>"},{"location":"resources/android_studio/android_studio/#filter-the-logcat-to-only-show-disney-or-star-log-messages","title":"Filter the logcat to only show Disney+ or Star+ log messages","text":"<ul> <li>Open the logcat, and in the dropdown in the top right choose Edit Filter Configurations, and then in the package name section, enter the package name <code>com.disney.disneyplus</code> or <code>com.disney.starplus</code></li> </ul>"},{"location":"resources/android_studio/android_studio/#change-the-colors-of-the-log-messages","title":"Change the colors of the log messages","text":"<ul> <li>The messages in the logcat can be color coded to make it easier to differentiate between the types of log messages (debug, info, warn, error, etc.)</li> <li>To set custom colors for the log messages, go to <code>Preferences</code> \u2192 <code>Editor</code> \u2192 <code>Color Scheme</code> \u2192 <code>Android Logcat</code>, and for each value you want to change, uncheck the Inherit Colors option, and add in hex values for your custom color</li> <li>An example color scheme which sets the errors to a bright red, the warnings to a reddish-purple, the info to a yellow, and the debug to the green is:<ul> <li>Debug: <code>3D9D2A</code></li> <li>Error: <code>EA222F</code></li> <li>Info: <code>EAB822</code></li> <li>Warning: <code>BB4767</code></li> </ul> </li> </ul>"},{"location":"resources/android_studio/android_studio/#have-app-configs-and-dmgz-docs-repo-checked-out-in-android-studio","title":"Have <code>app-configs</code> and <code>dmgz-docs</code> repo checked out in Android Studio","text":"<p>Git allows excluding files locally by adding to <code>.git/info/exclude</code> in the root of a git repository. This makes it easy to clone them inside of the project so that you can search and edit them without leaving your IDE. Android Studio will also recognize them as separate Git repositories so you can commit/push/pull just like you would for the main repository.</p> <p>An example that you could do is this.</p> <pre><code>echo \"/app-configs\" &gt;&gt; .git/info/exclude\ngit clone git@github.bamtech.co:Mobile/dmgz-android-appconfig.git app-configs\necho \"/dmgz-docs\" &gt;&gt; .git/info/exclude\ngit clone git@github.bamtech.co:Android/dmgz-docs.git dmgz-docs\n</code></pre> <p>The same can also be useful for just generic local files. For example, if you add <code>/local</code> to <code>.git/info/exclude</code> you can drop all kinds of files in there that are editable within your IDE without worrying about them getting checked into source control.</p>"},{"location":"resources/create_test_accounts/create_test_accounts/","title":"Creating Disney+, Star+ and Hulu Test Accounts","text":"<p>This doc will walk you through creating your test accounts for both Disney+ and Star+</p>"},{"location":"resources/create_test_accounts/create_test_accounts/#creating-disney-accounts","title":"Creating Disney+ Accounts","text":"<ol> <li>Install the Disney+ app - <code>make installDisney</code></li> <li>Select the signup option to create an account with your <code>@disneystreaming.com</code> email account</li> <li>When you get to the Paywall to purchase a subscription, swipe the app away</li> <li>In any slack chat (you can slack chat yourself if you want), type <code>/kentitlement</code> which will open a window. This opens up a window to use our Slack Bot called Kronos. Kronos helps us manage, view and update account state. Read more about later here Kronos</li> <li>Fill in the window as follows, making sure that you have the <code>_BASE</code>, <code>_REGION_FREE</code> and <code>_FLEX_DATE</code> entitlements selected. Select the <code>DISNEY</code> variants of those entitlements</li> <li>Now open the app again and you should be able to browse and play content</li> <li>When you have Jarvis installed, you can switch to the QA environment there and follow the same steps to create an account in the QA environment</li> </ol>"},{"location":"resources/create_test_accounts/create_test_accounts/#creating-star-accounts","title":"Creating Star+ Accounts","text":"<ol> <li>You may not be in a region that Star+ supports, so use the Account Maker Tool</li> <li>We need to create an account for our PROD environment and also for our QA environment. Use the PROD environment Account Maker tool here and the QA environment Account Maker tool here. If you do not have access to the Account Maker Tool, request access here</li> <li>Choose the Partner at the top</li> <li>For Email \u279c put in your <code>@disneystreaming.com</code> email address</li> <li>For Password \u279c enter a password</li> <li>Before selecting a subscription, choose the Expiration as 1 YEAR</li> <li>For Subscription \u279c select Star Plus Monthly - MX - Web</li> <li>For Entitlements \u279c select Region Free and Flex Date</li> <li>For Registration country \u279c select your desired country (the country you're in might not be supported, that's ok just pick one)</li> <li>Click Create at the bottom</li> <li>Install the Star+ app - <code>make installStar</code></li> <li>Try logging into the account you just made. To swap between PROD / QA environments use Jarvis</li> <li>The Expiration value for these accounts should automatically be updated every year in August. Source here</li> </ol>"},{"location":"resources/create_test_accounts/create_test_accounts/#creating-hulu-accounts","title":"Creating Hulu Accounts","text":"<p>Warning</p> <p>You cannot use an email for your Hulu account that is already associated with a Disney+ account (so you will not be able to use your <code>@disneystreaming.com</code> email address for your Hulu account). This is because of the way these codes are generated on the backend alongside the backend's Account unification efforts</p> <ol> <li>Click on this Hoth link</li> <li>Request a VIP account</li> <li>Open this link here and enter the code</li> <li>Reason for requesting access \u279c need account for Prod testing to build Kyber (new Hulu)</li> </ol>"},{"location":"resources/create_test_accounts/create_test_accounts/#account-maker-tool","title":"Account Maker Tool","text":"<ul> <li>At some point you may need to utilize the Account Maker Tool<ul> <li>If you do not have access to it, request access here</li> </ul> </li> <li>It can be useful to create or update accounts<ul> <li>PROD environment Account Maker tool</li> <li>QA environment Account Maker tool</li> </ul> </li> <li>Official Account Maker Tool documentation</li> <li>Have issues or questions? Reach out to a teammate or ask a question in the slack channel <code>#tech-ops-solutions-eng</code></li> </ul>"},{"location":"resources/java_setup/java_setup/","title":"Java Setup","text":""},{"location":"resources/java_setup/java_setup/#download-jdk","title":"Download JDK","text":""},{"location":"resources/java_setup/java_setup/#apple-silicon-chips","title":"Apple Silicon Chips","text":"<ul> <li>Machines with Apple Silicon chips have an AArch64/ARM64 processor. In order for you to run java programs efficiently with a AArch64/ARM64 processor you'll want to download a JDK that natively supports that architecture. There are a few options for vendors but Azul is an easy go to. You can download Java 11 from Azul here and choose <code>Java 11 (LTS)</code></li> </ul>"},{"location":"resources/java_setup/java_setup/#intel-chips","title":"Intel Chips","text":"<ul> <li>For machines without Apple Silicon Chips, Download Java 11 from here and choose <code>Temurin 11 (LTS)</code></li> </ul>"},{"location":"resources/java_setup/java_setup/#set-your-java_home","title":"Set your JAVA_HOME","text":"<ul> <li>There are multiple ways of performing the next step. This is just one way of doing it</li> <li>Once Java 11 is installed you'll want to set your <code>JAVA_HOME</code> environment variable</li> <li>Depending on the terminal shell you are using (bash, zsh, etc) you'll want to open up the shell script and edit it</li> <li>In the terminal type and run <code>open .bashrc</code><ul> <li>If no file is found then create it by typing <code>touch .bashrc</code></li> <li>This should open up a the script for editing</li> </ul> </li> <li>Scroll to the bottom of the file and paste the following (depending on chip):</li> </ul> <pre><code>  # Java 11 Intel Chip\n  export JAVA_HOME=$(/usr/libexec/java_home -v11)\n\n  # Java 11 Apple Silicon Chip\n  export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home\n</code></pre>"},{"location":"resources/java_setup/java_setup/#update-jdk-used-by-android-studio","title":"Update JDK used by Android Studio","text":"<ul> <li>To change the JDK used to build the project, open up Android Studio<ul> <li><code>Preferences</code> -&gt; <code>Build, Execution, Deployment</code> -&gt; <code>Build Tools</code> -&gt; <code>Gradle</code> -&gt; Under <code>Gradle JDK</code> there is a JDK location dropdown</li> <li>Change this to the same JDK set as the <code>JAVA_HOME</code></li> </ul> </li> </ul>"},{"location":"resources/on_call/on_call/","title":"On Call","text":"<p>This document is a comprehensive resource for developers that are on call</p>"},{"location":"resources/on_call/on_call/#goals","title":"Goals","text":"<ul> <li>All team members share responsibility and ownership of the product</li> <li>Team members who are not on call can disconnect outside of work hours<ul> <li>This setup establishes a mechanism for people to be brought in as needed, removing the need for checking in on slack or email</li> </ul> </li> <li>Response plans are documented.<ul> <li>We always know who is on call and how issues will be handled</li> <li>Incidents are being handled in a reliable, documented way. Less on a case-by-case basis</li> <li>No more last-minute asking for a contact sheet</li> </ul> </li> </ul>"},{"location":"resources/on_call/on_call/#responsibilities","title":"Responsibilities","text":"<ul> <li>On-call to support the Android (Google) and Fire (Amazon) apps for both Disney+ and Star+.</li> <li>Slack handle - @disney-plus-android-on-call<ul> <li>This handle is tied to the person/people on call, plus Aaron Rietschlin, Semir Murselovic and Erik Dekker for visibility and backup.</li> <li>Regular on-call shifts - the person on call is not expected to be actively watching the channels, however they are expected to respond to PagerDuty alerts and ideally to Slack notifications. It\u2019s expected that Slack notifications are enabled on phone/desktop, but it\u2019s understood that a ping on Slack isn\u2019t always seen within a couple of minutes.</li> <li>For eyes-on-glass shifts - it\u2019s expected that the person on call responds to Slack notifications. Support channel(s) should be periodically checked.</li> </ul> </li> </ul>"},{"location":"resources/on_call/on_call/#priorities","title":"Priorities","text":"<ul> <li>First priority is to respond to production issues as they are reported.<ul> <li>A Slack thread is opened in #disneyplus-support-general or #starplus-support-general</li> <li>If the issue seems to be related to Android and/or Fire, the Android on-call handle will be used to get the attention of the on-call engineer.</li> <li>If the severity of the issue is high (1 or 2) and nobody responds in Slack, a PagerDuty alert is triggered (phone/text/app alarm).</li> <li>The on-call engineer, or anyone else from the Android team that happens to see the thread should respond immediately, acknowledging that the team is engaged. See the Playbook below for how to proceed.</li> </ul> </li> <li>Second priority is to respond to issues in QA that are blocking other teams.</li> <li>It can happen that on-call engineers are asked to do configuration changes; for example dictionary updates. Work with at least one other team member to make the change and get it deployed.</li> <li>On-call engineers should prioritize alerts over stories assigned to them for the sprint. Don\u2019t forget to communicate with the TPM if this happens.</li> </ul>"},{"location":"resources/on_call/on_call/#slack-channels","title":"Slack Channels","text":"Slack Channel Types of Alarms and Errors #disneyplus-support-general Updates, questions and issues related to Disney+ are reported and discussed here (in Slack threads). #starplus-support-general Updates, questions and issues related to Star+ are reported and discussed here (in Slack threads). #qe-dplus &amp; #qe-starplus QE shift summaries and discussion #ds-android-qa Updates, questions and issues are discussed here when in Feature Complete, Release Candidate and development state from QA. #ds-android-devs Internal Android dev channel to discuss incident details with other team members if needed. Use @here to get the attention of team members in case help is needed with investigating, testing, reviewing config deployments, etc."},{"location":"resources/on_call/on_call/#playbook","title":"Playbook","text":"<ul> <li>See AAW playbook for general info</li> </ul>"},{"location":"resources/on_call/on_call/#how-to-respond-to-a-question-in-slack","title":"How to respond to a question in Slack","text":"<ul> <li>Acknowledge. You should immediately reply in the thread that you\u2019ve seen the message and that you will investigate on behalf of the Android team.</li> <li>Verify the report is actionable or request more information</li> <li>Identify areas for investigation</li> <li>Ask secondary or other team\u2019s oncall if needed, for example SDK support. PSO (the folks managing the incidents) know other teams\u2019 on-call handles and/or PagerDuty distro\u2019s if needed.</li> <li>Regularly communicate progress, even if there is no progress.</li> <li>Continue to be helpful even if it turns out the issue is not (just) an Android client issue</li> </ul>"},{"location":"resources/on_call/on_call/#how-to-do-a-preliminary-investigation","title":"How to do a preliminary investigation","text":"<ul> <li>Collect any available logs from the reporter</li> <li>Attempt to reproduce</li> <li>Identify the cause</li> <li>Add this information to an existing JIRA or create a JIRA</li> <li>Communicate the JIRA link/ticket number in the support thread</li> <li>Tell your team what you are doing by posting in the #dplus-android-devs channel, link to the support thread(s) and other relevant information</li> <li>For Sev 4 incidents, the INC will now be transitioned to JIRA, meaning that it\u2019s no longer being actively tracked by the PSO team. It is expected that the development team picks up the ticket and brings it to production to address the issue.</li> <li>Keep the JIRA ticket up to date with recent and accurate information. Remember that this ticket will be used as a source of truth by other teams tracking the incident.</li> </ul>"},{"location":"resources/on_call/on_call/#helpful-questions-to-ask-yourself-or-others-when-investigating","title":"Helpful questions to ask yourself (or others) when investigating","text":"<ul> <li>Is the issue only occurring on Android/Fire? What about Apple, Web, Connected Devices?</li> <li>Do we support this device?<ul> <li>We support Android version 5.0 and higher.</li> <li>On Android, we only support Certified Google devices. You can find certified devices in the Play Store Device Catalog.</li> <li>On Android, we only support devices that pass Google\u2019s SafetyNet check. This means that rooted and unlocked devices, as well as devices with beta firmware, are not supported.<ul> <li>There are various apps available on the Play Store that can check the SafetyNet status of a device</li> </ul> </li> </ul> </li> <li>Is the issue really an issue or is a feature working as designed? Look for relevant JIRA tickets.</li> <li>Is there an issue with signup or IAP? Check if the country is a \u201cLogin Only\u201d country or not. Signup and IAP can also be suppressed on a per-device basis. This is typically done for partner devices. See this wiki page. Has the issue been introduced recently (in a recent app update, for example) or has the issue existed for a longer time.</li> <li>How many users run into this issue in production?</li> <li>Is the issue recoverable by the user?</li> <li>Who can I ask for help? Who knows more about this part of the app/service?</li> </ul>"},{"location":"resources/on_call/on_call/#asking-for-help","title":"Asking for help","text":"<ul> <li>Find the relevant subteam and pull in their on-call engineer</li> <li>Escalate if applicable (see below)</li> <li>Ask for help in the dev channel</li> </ul>"},{"location":"resources/on_call/on_call/#how-to-proceed-when-the-issue-has-been-identified","title":"How to proceed when the issue has been identified","text":"<ul> <li>It\u2019s never the expectation that the on-call engineer fixes a client bug and proceeds with a release. If an issue can only be addressed by an app update, it needs to be escalated to the various Android team leads and director (Aaron Rietschlin).</li> <li>If the issue can only be fixed by an app update, it\u2019s helpful but not required that the on-call engineer works on a fix and puts up a PR. Use common sense to determine which subteam or engineer should work on a fix.</li> <li>If the issue can be fixed or a workaround is possible with a config change, work with at least one team lead to make the change and do the deployment. Communicate about this fix and (timing of) deployment.</li> <li>If you know how users can work around the issue, post the detailed steps in the support chat. Customer support can then use this information when people call in.</li> <li>If you come up with a workaround/solution that requires action from another team, communicate in the thread. PSO can help identify and pull in other teams.</li> </ul>"},{"location":"resources/on_call/on_call/#when-and-how-to-escalate","title":"When and how to escalate","text":"<ul> <li>Rely on the Sev level.</li> <li>Sev 4 and above - can be ack\u2019d, ticketed and left for the next business day if needed.</li> <li>Sev 3 - should have a fix identified and a mitigation deployed ASAP. The implementation and deployment schedule of a proper fix can be determined with stakeholders the next business day.</li> <li>Sev 1,2 - all hands on deck. A fix should be identified, a mitigation deployed ASAP. Implementation and deployment schedule of a proper fix should also be determined with stakeholders ASAP.</li> <li>Escalation phone numbers:<ul> <li>Aaron Rietschlin: +1 419-310-1521</li> </ul> </li> </ul>"},{"location":"resources/on_call/on_call/#accounts-needed-and-how-to-get-them","title":"Accounts needed and how to get them","text":"<ul> <li>PagerDuty - reach out to your TPM if you don\u2019t have an account yet. You will need to install the mobile app and set it up in order to respond to PD incidents.</li> <li>Sentry - reach out to Remco Mokveld, Aaron Rietschlin or Nate Lefler to get invited</li> <li>Kibana (DUST) - Open on VPN</li> <li>Conviva (optional) - SNOW request, or reach out to your TPM</li> <li>Play Store - for crashes and IAP data (leads only)</li> </ul>"},{"location":"resources/on_call/on_call/#eyes-on-glass","title":"Eyes-on-glass","text":"<ul> <li>Eyes-on-glass (EOG) means actively being online and monitoring the channels, dashboards, etc.</li> <li>EOG is not usually required.</li> <li>During important launches or other milestones, it can happen that EOG shifts are required. This will be made explicit in the schedule.</li> <li>For EOG shifts, it\u2019s required to do a proper \u201chandoff\u201d to the next person on shift (if any).<ul> <li>Setup a call or discuss with this person on Slack how things went.</li> <li>Share notes, links to Slack threads, etc.</li> <li>Loop the next person into ongoing conversations.</li> </ul> </li> </ul>"},{"location":"resources/on_call/on_call/#who-goes-on-call","title":"Who goes on call","text":"<ul> <li>All Senior Engineers and Team Leads - P3+</li> <li>Additional engineers will be determined by each subteam.</li> </ul>"},{"location":"resources/on_call/on_call/#on-call-schedules","title":"On-call schedules","text":"<ul> <li>Star+ Launch</li> <li>Welch</li> <li>LATAM Launch</li> <li>Tini Concert Coverage May 28 2022</li> </ul>"},{"location":"resources/pto/pto/","title":"PTO","text":"<ul> <li>This doc shows how to enter PTO</li> <li>Please check our <code>PTO Calendar Android</code> to make sure not too many people on your workstream have already requested off</li> </ul>"},{"location":"resources/pto/pto/#1-add-event-to-pto-calendar-android","title":"1. Add event to <code>PTO Calendar Android</code>","text":"<ul> <li>In Outlook, create a new event in the <code>PTO Calendar Android</code> calendar. If you don't see this calendar reach out to your TPM to get you added.</li> <li>For the event name, enter <code>Your Name - OOO</code></li> <li>There is no need to add any invitees to the event.</li> <li>If your PTO is only during a few hours of your day, add it as a normal event, if it is at least 1 full day, add it as a full-day event.</li> <li>Set <code>REMINDER</code> (bell icon) to <code>NONE</code></li> <li>Click <code>SEND</code>/<code>SAVE</code> depending on your Outlook version</li> </ul> <p>Here's an image highlighting the important sections in the new Outlook:</p> <p></p> <p>And in the old outlook it looks like this</p> <p></p>"},{"location":"resources/pto/pto/#2-add-event-to-personal-calendar","title":"2. Add Event to personal Calendar","text":"<ul> <li>Create an event in Outlook and invite yourself with the title <code>Your Name - PTO</code></li> <li>Make sure the status of the event is Busy</li> <li>This will block off your calendar while you are OOO. This is useful if someone is going to invite you to a meeting, they will see your calendar is blocked off then, and that meeting time does not work</li> </ul>"},{"location":"resources/pto/pto/#3-enter-pto-the-official-way","title":"3. Enter PTO the official way","text":"<ul> <li>EU Employees Link<ul> <li>Login to ADP here</li> <li>Navigate to <code>Registration</code>, <code>Verlof</code></li> <li>Fill out the form, click <code>Submit</code></li> <li>The request will be routed to your manager for approval (or to Aaron Rietschlin if your manager is in the US)</li> </ul> </li> </ul> <p>Tip</p> <p>You can swap between Dutch and English at the top right</p> <ul> <li>US Employees Link<ul> <li>Click <code>Create</code> in the bottom right corner</li> <li>Under <code>Att./Absence type</code>, look at the suggestions to decide which to pick. Once you've decided, type in only the number. So for Vacation (0100), just type in <code>0100</code></li> <li>Click on the days you want to enter. They should highlight to blue</li> <li>Under <code>Hours</code>, enter 8 hours (no matter how many days you selected)</li> <li>Click <code>Submit</code></li> </ul> </li> </ul> <p>Tip</p> <p>Use <code>Floating Holidays</code> before <code>Vacation (0100)</code> since <code>Floating Holidays</code> do not roll over to next year</p>"},{"location":"resources/pto/pto/#4-set-your-slack-status","title":"4. Set your Slack status","text":"<ul> <li>Set your Slack status to something like Vacationing - back on x/x during the time that you are on PTO so that anyone who wants to reach out will see that you are OOO</li> </ul>"},{"location":"resources/pto/pto/#pto-company-holiday-links","title":"PTO / Company Holiday Links","text":"<ul> <li>View your PTO / Time off<ul> <li>US Employees Link</li> <li>EU Employees Link</li> </ul> </li> <li>Company Holidays</li> </ul>"},{"location":"resources/pull_requests/pull_requests/","title":"Pull Requests","text":"<p>This doc will go over our best practices for submitting / maintaining pull requests (PR) on our team</p>"},{"location":"resources/pull_requests/pull_requests/#creating-a-pull-request","title":"Creating a Pull Request","text":""},{"location":"resources/pull_requests/pull_requests/#template","title":"Template","text":"<ul> <li>To make PRs as informative as possible, a template has been set up to help you out</li> <li>To keep the PR short, please remove all parts of the template that are not relevant for your PR</li> </ul>"},{"location":"resources/pull_requests/pull_requests/#point-to-the-correct-branch","title":"Point to the correct branch","text":"<ul> <li>Make sure you're pointing to the right branch. More often than not, that will be <code>development</code></li> <li>After we cut an RC (<code>Release Candidate</code>), you might branch off of that RC branch and point your PR to the RC<ul> <li>When working on a <code>Jira</code> ticket, the <code>Fixed Version</code> in the <code>Jira</code> will tell you if you should point your fix to <code>development</code>, or an RC</li> <li>If our RC branch / version is <code>release/1.13</code>, and the <code>Fixed Version</code> in the <code>Jira</code> you're working on is <code>1.13</code>, then point to <code>release/1.13</code> instead of <code>development</code></li> </ul> </li> </ul>"},{"location":"resources/pull_requests/pull_requests/#summary","title":"Summary","text":"<p>Write a summary, potentially giving context to the fix you're proposing and / or explaining the bug</p>"},{"location":"resources/pull_requests/pull_requests/#pr-title","title":"PR Title","text":"<ul> <li>PR titles follow the following pattern: <code>TICKET-EXTENSION-TICKET-NUMBER: SHORT DESCRIPTION</code></li> </ul> <p>Example</p> <ul> <li>DMGZAND-7627: Fix keyboard network error</li> </ul>"},{"location":"resources/pull_requests/pull_requests/#reviewers","title":"Reviewers","text":"<ul> <li>Add reviewers to your PR</li> <li>Make sure to add your sub-team to all of your PRs</li> <li>If you are on <code>Team Edna</code>, for example, just type <code>Team Edna</code> and add them as a reviewer</li> <li>You can also add individual, specific developers, or even <code>Dmgz Leads</code></li> </ul> <p>Tip</p> <ul> <li>When you are reviewing a PR, after you approve or write comments, GitHub forgets that your sub-team was a reviewer on that PR. Make sure to re-add your sub-team as a reviewer after you review a PR</li> <li>When submitting a PR, add the sub-team that normally works on that feature to loop them in (if it isn't your own sub-team). Here are the sub-teams and the features they are responsible for to reference</li> </ul>"},{"location":"resources/pull_requests/pull_requests/#labels","title":"Labels","text":"<ul> <li>Make use of Labels to indicate what your PR is about</li> <li>Labels are also very useful to later find back PR related to a specific topic</li> <li>If a label does not exist for the feature you are working on, feel free to create a new one here</li> <li>Common labels to be aware of<ul> <li><code>WIP</code> - I'm still working on this PR</li> <li><code>do not merge!</code> - Do not merge this PR</li> <li><code>automerge</code> - This will automatically merge your PR. We will discuss this more later</li> <li><code>Don't review</code> - Do not review this PR</li> <li><code>help wanted</code> - HELP</li> <li><code>review-by-commit</code> - Add this label when you think it would be beneficial for a reviewer to review your PR by each commit</li> </ul> </li> </ul>"},{"location":"resources/pull_requests/pull_requests/#testing-notes","title":"Testing Notes","text":"<ul> <li>Please write thorough testing notes</li> <li>When writing thorough testing notes, it helps other developers review your PR that might not be familiar with the feature you and your sub-team are coding</li> <li>The easiest way to write thorough testing notes is to assume the person reviewing your PR has zero knowledge of what your code fixes or does</li> </ul> <p>Example</p> <ul> <li>PR with thorough testing notes</li> </ul> <ul> <li>Please add before / after screenshots and / or a short GIF</li> <li>If another developer cannot test your PR without needing to change some code locally, please provide a patch for them to apply<ul> <li>To create a patch in Android Studio:<ul> <li>Make the local changes in Android Studio you want to have be in your patch</li> <li>Go to <code>VCS</code>, <code>Create Patch From Local Changes...</code></li> </ul> </li> <li>To apply someone else's patch in Android Studio:<ul> <li>Copy paste the patch code into a file on your desktop with the file type <code>.patch</code></li> <li>In Android Studio click <code>VCS</code>, <code>Apply Patch...</code></li> <li>Find and select your <code>.patch</code> file on your desktop</li> </ul> </li> </ul> </li> </ul> <p>Tips</p> <ul> <li>KAP is an easy tool you can use to screen capture and export as GIFs for PRs</li> <li>You can use <code>Logcat</code>, <code>Screen Record</code> inside of <code>Android Studio</code>, and then use KAP to convert it to a GIF</li> </ul>"},{"location":"resources/pull_requests/pull_requests/#milestones","title":"Milestones","text":"<ul> <li>Always tag your PR with a milestone</li> <li>This will almost always be the next release version of the app (<code>1.3.0</code>, for example), unless you're working on a ticket that will be merged into a RC (<code>Release Candidate</code>)</li> </ul>"},{"location":"resources/pull_requests/pull_requests/#keep-it-small","title":"Keep it small","text":"<ul> <li>Nobody likes to review huge PRs</li> <li>We aim at keeping the size of a PR below 500 lines of code changed to improve the review process and give the reviewers an opportunity the grasp what the changes entail</li> </ul> <p>Tips</p> <ul> <li>If you are working on a new feature, first put up a PR with the skeleton fragment/viewmodel/presenter/router code that does not actually do anything and then post followup PRs with the actual implementation</li> <li>Utilize interfaces to put up intermediate work without having everything implemented yet</li> <li>If you really can not get a PR smaller than 500 changes, try to make clear separate commits in the PR so that reviewers can review in bite-size chunks. In this case add the <code>review-by-commit</code> labelfor PRs</li> </ul>"},{"location":"resources/pull_requests/pull_requests/#reviewing-code","title":"Reviewing code","text":"<p>Each PR requires two approvals before getting merged</p>"},{"location":"resources/pull_requests/pull_requests/#tips-for-reviewing-code","title":"Tips for reviewing code","text":"<ul> <li>Feel free to ask questions on pull requests</li> </ul> <p>Tips</p> <ul> <li>We attach <code>.apk</code> files to PRs. It is faster to download the <code>.apk</code> and install that to test a PR. You also won't have to stash your changes and switch branches!</li> <li>Here is a quick way to see all PRs that you and your sub-team are assigned to review. Bookmark if you want!</li> </ul> <ul> <li>Common items to keep your eye out for when reviewing a PR:<ul> <li>Design<ul> <li>Using a <code>@color/</code> instead of a theme color <code>?themeColorGrey</code> - we utilize themes for D+ and S+</li> <li>Using <code>textAppearance=</code> instead of <code>style=</code></li> </ul> </li> <li>Architecture<ul> <li>Someone forgetting to use <code>.replay(1)</code> and <code>.connectInViewModelScope()</code> on a <code>ViewModel</code> state stream. See here for details<ul> <li><code>.autoDisposable</code> on streams - see more here. Sometimes we manually dispose of streams, but that is rare. Prefer <code>.autoDisposable</code></li> </ul> </li> </ul> </li> <li>Lack of Unit Tests - although we do not always unit test everything, we want to try and unit test as much as we can. Especially important business logic</li> <li>Complex Code - good code is maintainable, readable code. If something seems too complex, point it out and maybe give a suggestion on how to simplify code</li> <li>Proper Documentation - either at the top of a class, a corresponding <code>README.md</code> in the module, or even a new entry inside of <code>/Dmgz/docs/</code></li> <li>CJK Friendly Code<ul> <li>such as <code>marginStart</code> instead of <code>marginLeft</code></li> </ul> </li> <li>Accessibility Friendly Code<ul> <li>such as <code>android:importantForAccessibility=\"no\"</code></li> </ul> </li> <li>App Agnostic Code<ul> <li>Ideally we should avoid all hardcoding for <code>Disney+</code>, <code>Star+</code>, or any other future app we may deploy (since the app is now two apps and one code base)</li> </ul> </li> </ul> </li> </ul>"},{"location":"resources/pull_requests/pull_requests/#addressing-feedback","title":"Addressing feedback","text":"<p>When someone reviewed your pull request and you addressed their feedback you can request for their review again by clicking on the refresh icon next to their name. This will let your pull request show-up in their feed again</p> <p></p>"},{"location":"resources/pull_requests/pull_requests/#merging","title":"Merging","text":"<ul> <li>Oftentimes other people will merge your PRs, or they will automatically be merged. In general, though, you are in charge of merging your own PRs</li> <li>When a PR is ready to be merged, we add the label <code>automerge</code><ul> <li>We do not add the <code>automerge</code> label unless at least two people have approved of the PR</li> <li>The <code>automerge</code> feature automatically merges PRs into their base branch</li> <li>It works like a queue -- it will automatically merge the oldest PR that has the <code>automerge</code> label added to it, and then move on to the next oldest PR that has the <code>automerge</code> label on it</li> <li>This is all 'triggered' by a PR being merged</li> <li>Because of this 'trigger', there sometimes is a special state we can get into, and it's important to monitor GitHub to make sure your PR is not in this state</li> <li>The state I'm referring to above is where your PR is the oldest PR on GitHub and it needs to be merged. This is problematic because the <code>automerge</code> queue will not be triggered until one PR is merged, and so your PR is the oldest, so we need to get that PR merged manually to keep the merging process moving forward</li> <li>If your PR is in this state, please manually click the <code>Update Branch</code> button until your PR is up to date and ready to merge. Then manually press the <code>Merge</code> button to get your PR merged</li> <li>Please do not click the <code>Update Branch</code> button manually unless your PR is in the above listed state. This is because you will be manually \"jumping\" the CI queue when you press <code>Update Branch</code>. No cutting lines :)</li> <li>TLDR: When your PR has two approvals, add the <code>automerge</code> label to it. If that PR is the oldest PR with the <code>automerge</code> label, you need to merge it manually</li> </ul> </li> </ul> <p>Tip</p> <ul> <li>Here is a quick way to see all PRs with the <code>automerge</code> label. Bookmark if you want!</li> </ul> <ul> <li>If your PR should not be merged for whatever reason, please put the label <code>do not merge!</code> on your PR</li> </ul>"},{"location":"resources/pull_requests/pull_requests/#checks","title":"Checks","text":"<ul> <li> <p>On CI we run the following code analysis tools on each PR:</p> <ul> <li>Android Lint - For Android specific static code analysis</li> <li>Checkstyle - For style conventions in Java files</li> <li>Detekt - For style conventions in Kotlin files</li> <li>Danger - is a script that runs on CI to automate PR reviews. It will report issues that have been configured in PreBuildDangerfile and Dangerfile</li> <li>Module Dependency Graphs: when a new module -&gt; module dependency is added, the documentation SVGs need to be updated<ul> <li>Run <code>./gradlew generateModuleDependencies</code> (<code>./gradlew gMD</code> also works) to generate new diagrams and include those in your PR</li> </ul> </li> <li>Template compliance - To avoid placeholders text to pollute the PR. This is a Dangerfile check. When you have removed the placeholder text</li> <li>Comment with <code>whammy</code> on the PR to trigger the check again</li> </ul> </li> <li> <p>We use the kotlin official styleguide for code formatting with the following adjustments:</p> <ul> <li>Wildcard imports: With the exception of <code>kotlinx</code> imports we never allow wildcard imports</li> </ul> </li> <li> <p>Besides static code analysis we run all tests on every PR, build the APKs and compile all instrumented tests</p> <ul> <li>CI will fail whenever any of these checks fail</li> </ul> </li> </ul>"},{"location":"resources/pull_requests/pull_requests/#generate-module-dependencies-error","title":"Generate Module Dependencies Error","text":"<ul> <li>You may see an error on a pull request you recently submitted that looks like this:</li> </ul> <pre><code>/tmp/android/docs/gradleModules/mobile.puml is out of date.\nNew dependencies: [':features:ctvActivation depends on :features:analytticsApi'].\nRemove dependencies: []\nPlease run './gradlew generatetModuleDependencies' to update\n</code></pre> <p>This means the CI detected some module dependency changes on your PR, and our <code>.puml</code> files are now out of date. To fix this, do the following:     - Update your PR with the latest version of <code>development</code> (or whatever the base branch is that you're trying to merge your PR into. This is so you do not have to perform these steps multiple times)     - On the command line, run the following command:</p> <p><code>./gradlew generateModuleDependencies</code>  (or <code>./gradlew gMD</code> for short)</p> <ul> <li>That command will automatically update the <code>.puml</code> files to reflect the module dependency changes you made on your pull request. Commit the changes after running that command, and push the update to your branch. The error will be gone</li> </ul>"},{"location":"resources/ripcut/ripcut/","title":"RipCut","text":"<ul> <li>RipCut is our near real-time image processing service that reduces costs and overhead</li> <li>We use a combination of RipCut and Glide to load our images - see <code>RipcutGlideImageLoader.kt</code> for implementation details</li> <li>RipCut helps us add badging (Disney+ Original) and scrims dynamically - more details here</li> <li>We have a handful of RipCut related configurations - see <code>RipcutConfig.kt</code></li> <li>More details about the RipCut API here</li> <li>Link to RipCut configs / references</li> </ul>"},{"location":"sub-teams/team_bender/","title":"Team Bender","text":""},{"location":"sub-teams/team_bender/#responsibilities","title":"Responsibilities","text":"<p>Team Bender is primarily responsible for Partner / B2B2C. Here is a list of our exact responsibilities and corresponding documentation</p> <ul> <li>AOSP support</li> <li>Partner hardware support</li> <li>Partner integrations</li> <li>Instrumentation Test Suite<ul> <li>R2D2 Framework</li> </ul> </li> </ul>"},{"location":"sub-teams/team_edna/","title":"Team Edna","text":""},{"location":"sub-teams/team_edna/#responsibilities","title":"Responsibilities","text":"<p>Team Edna is primarily responsible for Content Discovery. Here is a list of our exact responsibilities and corresponding documentation</p> <ul> <li>Badging</li> <li>Browse / Search</li> <li>Collections</li> <li>Container Styles &amp; ItemViewType</li> <li>Deeplinks</li> <li>Detail pages</li> <li>Focus Navigation</li> <li>IMAX (on detail pages)</li> <li>Kids Mode</li> <li>Lite Mode</li> <li>Promo Labels</li> <li>TV Channels</li> <li>Vision Inspection Log</li> <li>Watchlist</li> <li>Live Guide</li> <li>App Overlays</li> </ul>"},{"location":"sub-teams/team_edna/#relevant-docs","title":"Relevant Docs","text":"<ul> <li>Team Edna Onboarding Slides</li> <li>Design Docs</li> </ul>"},{"location":"sub-teams/team_mandalorian/","title":"Team Mandalorian","text":""},{"location":"sub-teams/team_mandalorian/#responsibilities","title":"Responsibilities","text":"<p>Team Mandalorian (often called Team Mando) is primarily responsible for Onboarding. Here is a list of our exact responsibilities and corresponding documentation</p> <ul> <li>Welcome screen</li> <li>Paywall</li> <li>IAP (In App Purchase; Google &amp; Amazon)</li> <li>Subscription management</li> <li>Sign Up</li> <li>Login</li> <li>Account</li> <li>Legal screen</li> <li>Profiles</li> <li>PCON</li> </ul>"},{"location":"sub-teams/team_mandalorian/#onboarding-checklist","title":"Onboarding Checklist","text":"<p>Welcome to Team Mandalorian! If you are a new team member, be sure to go through the following checklist.</p> <ul> <li>Review the Team Mandalorian Onboarding Presentation if you have not already.</li> <li>Read the README of the features Team Mando:<ul> <li>Paywall README</li> <li>Profiles</li> </ul> </li> <li>Ensure you are set up as a tester for Google and Amazon. This page goes in to further details.</li> <li>Install the Amazon IAP Helper App. This app is used to ensure that the Amazon Application is able to perform IAP purchases in the sandbox environment.</li> <li>Ensure you are added to the Team Mandalorian Github Group.</li> </ul>"},{"location":"sub-teams/team_mandalorian/#resources","title":"Resources","text":"<p>Below is a list of links and resources that are relevant to Team Mandalorian.</p> <ul> <li>Team Mandalorian Onboarding Presentation</li> <li>Amazon<ul> <li>Amazon IAP Helper App</li> <li>Amazon IAP Helper Documentation</li> <li>Amazon LAT Instructions</li> <li>Disney+ LAT Landing Page</li> <li>Star+ LAT Landing Page</li> </ul> </li> <li>Account Maker - An internal site that allows for the creation of test accounts.<ul> <li>PROD Account Maker</li> <li>QA Account Maker</li> </ul> </li> <li>Slack Channels<ul> <li>#ds-android-mando-devs - A developer focused team chat.</li> <li>#ds-android-mando-tpms - A chat for the team with our TPM's.</li> <li>#offer-management-support - A channel we frequently interact with due to the Paywall.</li> <li>#activation - A channel we frequently interact with due to Activation services.</li> </ul> </li> <li>Other Repositories - Reach out to your team lead to receive access to these repositories.<ul> <li>Disney Streaming IAP Library</li> <li>Android IAP Base Library</li> <li>Amazon IAP Helper App Repo</li> <li>Amazon IAP Node App</li> </ul> </li> <li>Videos<ul> <li>Amazon and Google IAP testing. Passcode: B9y+8Ljy</li> <li>Bamnet-IAP library</li> <li>Dictionary keys/String resources</li> <li>Remote appconfigs and feature flags</li> </ul> </li> <li>Setting up Temporary Access</li> <li>Paywall &amp; IAP Flow Diagrams</li> <li>Growth Life Wiki</li> </ul>"},{"location":"sub-teams/team_russell/","title":"Team Russell","text":""},{"location":"sub-teams/team_russell/#responsibilities","title":"Responsibilities","text":"<p>Team Russell is primarily responsible for Video Experience. Here is a list of our exact responsibilities and corresponding documentation</p> <ul> <li>BTMP Integration</li> <li>Player UI</li> <li>Up next</li> <li>Live &amp; linear</li> <li>GroupWatch</li> <li>Downloads</li> <li>Chromecast</li> <li>PCON / Age verification (R21 flow)</li> <li>IMAX</li> </ul>"},{"location":"sub-teams/team_tesseract/","title":"Team Tesseract","text":""},{"location":"sub-teams/team_tesseract/#responsibilities","title":"Responsibilities","text":"<p>Team Tesseract is primarily responsible for Platform related items. Here is a list of our exact responsibilities and corresponding documentation</p> <ul> <li>Glimpse (Analytics)</li> <li>Push (Braze)</li> <li>Architecture guidelines<ul> <li>UI Architecture Overview</li> <li>Screens</li> <li>Lifetimes</li> <li>Lifecycle Callbacks</li> </ul> </li> <li>Cross-functional code</li> <li>Remote config</li> <li>Dictionaries</li> <li>Multi-app tooling</li> <li>Dev tasks</li> <li>Library integrations</li> <li>Build logic and project structure</li> <li>Jarvis</li> </ul>"},{"location":"tools/kronos/","title":"Kronos","text":"<ul> <li>Kronos is an incredibly useful Slack Bot that helps viewing and managing account state</li> <li>To get started, send the Kronos Slack Bot a message with the word <code>help</code></li> <li>Kronos documentation here</li> <li>List of Kronos features / descriptions here</li> </ul>"},{"location":"tools/additional/additional/","title":"Additional tools and links","text":"<p>What follows is a list of general services that aren't strictly related to Android but can help with debugging, data providing, analytics...</p> <p>Please note that some of these services require a permission request through Service Now/Hoth in order to be available to you.</p>"},{"location":"tools/additional/additional/#account-services-overview","title":"Account services overview","text":"<p>List of useful services for Account APIs to easuly perform account modifications.</p>"},{"location":"tools/additional/additional/#artifactory","title":"Artifactory","text":"<p>Bamtech's own maven repository.</p>"},{"location":"tools/additional/additional/#conviva-touchstone","title":"Conviva Touchstone","text":"<p>Video analytics and error reporting.</p>"},{"location":"tools/additional/additional/#conviva-pulse","title":"Conviva Pulse","text":"<p>Live Conviva sessions</p>"},{"location":"tools/additional/additional/#chromecast-test-harness","title":"Chromecast Test Harness","text":""},{"location":"tools/additional/additional/#prod-qa","title":"PROD | QA","text":"<p>Complete standalone testing solution for Chromecast Receiver</p>"},{"location":"tools/additional/additional/#config-overrides","title":"Config Overrides","text":""},{"location":"tools/additional/additional/#prod-qa_1","title":"PROD | QA","text":"<p>Overrides configuration on user accounts.</p>"},{"location":"tools/additional/additional/#kibana","title":"Kibana","text":"<p>Browsable SDK/Dust logs.</p>"},{"location":"tools/additional/additional/#orchestration-api-explorer","title":"Orchestration Api Explorer","text":"<p>GraphQL query builder and explorer</p>"},{"location":"tools/additional/additional/#profile-lookup","title":"Profile Lookup","text":""},{"location":"tools/additional/additional/#prod-qa_2","title":"PROD | QA","text":"<p>Info on user profiles</p>"},{"location":"tools/additional/additional/#project-vision","title":"Project Vision","text":"<p>Ad-Hoc testing endpoints and Content Explorer.</p>"},{"location":"tools/additional/additional/#sentry","title":"Sentry","text":"<p>Crash reporting for our apps.</p>"},{"location":"tools/additional/additional/#staging-web","title":"Staging web","text":"<p>Preliminary development versions for web, useful for debugging.</p>"},{"location":"tools/additional/additional/#subtitle-test-harness","title":"Subtitle Test Harness","text":"<p>Test caption settings live.</p>"},{"location":"tools/additional/additional/#token-tool","title":"Token Tool","text":"<p>Allows validation and generation of access token to the platform.</p>"},{"location":"tools/additional/additional/#weaponx","title":"WeaponX","text":"<p>Creation and Analysis on WeaponX experiments.</p>"},{"location":"tools/benchmark/build_performance_benchmark/","title":"Benchmarking Build Performances","text":"<p>We use Gradle Profiler to benchmark the build performance of Dmgz. There are several scenarios in /gradle/profiler/ that can be run.</p> <p>When making changes to buildLogic it is always important to validate that making those changes does not have a negative impact on the overall build performance (unless that negative impact weighs up against the positive impact that the changes make).</p>"},{"location":"tools/benchmark/build_performance_benchmark/#running-locally","title":"Running locally","text":"<p>You can use the commands in the makefile to run the benchmarks locally.</p>"},{"location":"tools/benchmark/build_performance_benchmark/#running-on-gh-actions","title":"Running on GH actions","text":"<p>The most common benchmark, comparing different scenarios on the current branch vs <code>development</code>, can be run through GH actions by adding the <code>benchmark</code> label to a PR. After adding the label, a benchmark job is started. When that job is finished, the results of the benchmark are uploaded as artifacts for the job. You can retrigger a build by removing and readding the label.</p> <p></p>"},{"location":"tools/charles_proxy/charles_proxy/","title":"Charles Proxy","text":"<p>We are using Charles Proxy to intercept and debug network requests. This documentation will focus on how to setup and utilize Charles</p>"},{"location":"tools/charles_proxy/charles_proxy/#set-up","title":"Set Up","text":""},{"location":"tools/charles_proxy/charles_proxy/#1-download-charles","title":"1. Download Charles","text":"<ul> <li>Download Charles from the Self Service application pre-installed on your laptop (includes the license for Charles)</li> </ul> <p>Warning</p> <p>Sometimes Throttling is enabled by default after installing. Double check the Throttling section below</p>"},{"location":"tools/charles_proxy/charles_proxy/#2-obtain-local-ip-address","title":"2. Obtain local IP address","text":"<ul> <li>Make sure your test device / emulator is on the same WiFi network as your laptop</li> <li>Copy your local IP address from Charles:<ul> <li>Charles toolbar \u2192 Help \u2192 Local IP Address \u2192 Click on the number and copy it</li> </ul> </li> </ul>"},{"location":"tools/charles_proxy/charles_proxy/#3-redirect-network-traffic-to-charles","title":"3. Redirect network traffic to Charles","text":"<ul> <li>There are two ways to do this. One way is manually, and the other is with an alias. We highly recommend setting up the alias, as it is much faster once you have it set up</li> </ul>"},{"location":"tools/charles_proxy/charles_proxy/#redirect-traffic-manually","title":"Redirect traffic manually","text":"<ol> <li>Settings \u2192 Network &amp; internet \u2192 WiFi</li> <li>Click the gear icon for the wifi network you're connected to</li> <li>Click the  pencil icon to edit</li> <li>Open Advanced option dropdown</li> <li>Set Proxy to Manual</li> <li>Set Proxy hostname to your local IP address from step 2</li> <li>Set Proxy port to 8888</li> </ol> <p>Warning</p> <ul> <li>When using an emulator, do not set up your Charles with the emulator GUI controls. Do it through the network settings on the actual emulator. Using the GUI controls prevents some SSL proxying</li> <li>If you close Charles on your MacBook the network requests on your device stop working. You'll have to disable the proxy again in the network settings on your device otherwise requests will try to go through Charles but it is closed</li> </ul>"},{"location":"tools/charles_proxy/charles_proxy/#redirect-traffic-with-alias","title":"Redirect traffic with alias","text":""},{"location":"tools/charles_proxy/charles_proxy/#setting-up-the-alias","title":"Setting up the alias","text":"<ul> <li>Copy the function and alias below and paste it into your shell environment</li> </ul> <pre><code>function android-proxy-enable() {\n  adb shell settings put global http_proxy $1:8888\n}\n\nalias android-proxy-disable=\"adb shell settings put global http_proxy :0\"\n</code></pre>"},{"location":"tools/charles_proxy/charles_proxy/#using-the-alias","title":"Using the alias","text":"<ul> <li>To enable Charles, open the terminal and use our newly added command with your IP address you copied from step 2. Here is an example if your IP address was <code>192.168.1.15</code></li> </ul> <pre><code>android-proxy-enable 192.168.1.15\n</code></pre> <ul> <li>To disable charles, open the terminal and use our newly added alias:</li> </ul> <pre><code>android-proxy-disable\n</code></pre>"},{"location":"tools/charles_proxy/charles_proxy/#4-install-certificate","title":"4. Install Certificate","text":"<p>There are two ways to do this. The first way is for devices / emulators running an older version of Android such as 5 / 5.1</p>"},{"location":"tools/charles_proxy/charles_proxy/#a-install-certificate-for-older-device","title":"a. Install Certificate for older device","text":"<ul> <li>Charles toolbar \u2192 Help \u2192 SSL Proxying \u2192 Install Charles Root Certificate on a mobile device or go directly to chls.pro/ssl in the browser on your mobile device</li> <li>If you get no feedback from the device that the certificate is installed or on later versions of Android it is not allowed to directly install a certificate from the browser, do the following:<ul> <li>Go to the settings of your phone \u2192 Security \u2192 Encryption &amp; credentials \u2192 Install a certificate</li> <li>Choose CA certificate</li> <li>Choose the certificate that was downloaded in the background</li> </ul> </li> <li>If your device doesn't download the certificate:<ul> <li>Charles toolbar \u2192 Help \u2192 SSL Proxying \u2192 Save Charles Root Certificate...</li> <li>Save this certificate on your device and use that in the previous step</li> </ul> </li> <li>This adds the certificates to the list of Users certificates that are allowed for debug builds as configured in our <code>dplus_network_config.xml</code> file</li> </ul>"},{"location":"tools/charles_proxy/charles_proxy/#b-install-certificate-for-newer-devices","title":"b. Install Certificate for newer devices","text":"<ul> <li>Download the <code>.p12</code> file here</li> <li>Charles toolbar \u2192 Proxy \u2192 SSL Proxying Settings...</li> <li>Go to Root Certificate</li> <li>Create a secure store if there isn't one with a password of your choosing</li> <li>After you created a secure store, click on Import P12 and select the <code>.p12</code> file you downloaded</li> <li>To use the <code>.p12</code> you need a password. Request this from your team lead</li> <li>You should now be able to see the contents of all traffic to BamTech and Disney</li> </ul>"},{"location":"tools/charles_proxy/charles_proxy/#5-focused-hosts","title":"5. Focused hosts","text":"<ul> <li>You can filter irrelevant network requests by only focusing on requests from relevant hosts</li> <li>When opening the Structure tab on the top left of Charles, this will show all the relevant requests on top and all other less relevant requests hidden in Other Hosts</li> <li>To import relevant focused focuses<ul> <li>Download our <code>Focused Hosts.xml</code> file</li> <li>Charles toolbar \u2192 Tools \u2192 Import/Export Settings...</li> <li>Select the downloaded file</li> </ul> </li> </ul> <p>Info</p> <p>More info about Focused Hosts on the official website here</p>"},{"location":"tools/charles_proxy/charles_proxy/#6-exclude-video-files","title":"6. Exclude video files","text":"<ul> <li>In most cases, video files are not helpful and they have a big impact on the size of <code>.chls</code> files</li> <li>To exclude video files in your <code>.chls</code> files, do the following<ul> <li>Download our <code>Exclude.xml</code> file</li> <li>Charles toolbar \u2192 Tools \u2192 Import/Export Settings...</li> <li>Select the downloaded file</li> </ul> </li> </ul>"},{"location":"tools/charles_proxy/charles_proxy/#extra-info","title":"Extra Info","text":""},{"location":"tools/charles_proxy/charles_proxy/#map-local","title":"Map Local","text":"<p>Map local allows you to intercept a network request and change the values that are returned</p> <p>Warning</p> <p>Do not forget to remove a Map Local after you're done using it. It is very easy to forget you set one up, and it will mess with your other tasks / testing. More info about map local here</p> <ul> <li>A perfect example is if an API response is not ready yet, you can:<ul> <li>Copy paste the response you want to be returned in a <code>.json</code> file on your desktop</li> <li>In Charles, right click the request you want to change. Select Map Local</li> <li>Under Map To, select Choose and select the local <code>.json</code> file you saved. Hit OK</li> </ul> </li> <li>Another great example is overriding configs<ul> <li>Assuming you have a clone of the config repo in <code>/Users/username/Workspace/dmgz-android-appconfig</code></li> <li>You can set the following Map Local which will replace the path of all requests to <code>http://appconfigs.disney-plus.net/dmgz/prod/</code> with whatever is available in <code>/Users/username/Workspace/dmgz-android-appconfig/outputs</code></li> <li>This helps test a config change locally without having / before adjusting them in the repo</li> </ul> </li> </ul> <p></p>"},{"location":"tools/charles_proxy/charles_proxy/#exporting-a-map-local","title":"Exporting a Map Local","text":"<p>Exporting a map local is a great way to make testing a lot easier for others. To do this, follow these steps:</p> <ul> <li>Setup your map local in Charles normally (right click a request in Charles \u2192 select Map Local..., choose local file to map to)<ul> <li>It is important that the local file you are mapping to is on your Desktop (tester will have it on their Desktop too later)</li> </ul> </li> <li>In Charles click Tools \u2192 Map Local \u2192 choose your Desktop \u2192 select Export</li> <li>This exports a <code>.xml</code> file that another tester can import so that they do not have to find the exact network request in Charles and set it up manually</li> <li>Add this <code>.xml</code> file and your local mapped file to your PR for the tester</li> <li>In your testing notes, inform the tester to put the <code>.xml</code> file and the <code>.json</code> file on their Desktop</li> <li>Next inform your tester to import the <code>.xml</code> file you provided in their Charles: Tools \u2192 Map Local \u2192 Import \u2192 select the <code>.xml</code> file</li> <li>Next inform your tester to double click the Map Local they just imported and to change the value under Local path from your user name to their laptop's user name (if you had all files on your Desktop and the tester put all files on their desktop, this is the only value in the Local Path that they need to change)<ul> <li>Example:<ul> <li>your Local path \u2192 <code>/Users/darth.vader/Desktop/imported_map_local.xml</code></li> <li>tester's Local path after editing \u2192 <code>/Users/anakin.skywalker/Desktop/imported_map_local.xml</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"tools/charles_proxy/charles_proxy/#throttling","title":"Throttling","text":"<ul> <li>You can throttle your network with Charles which can be useful when simulating a user with a poor connection</li> <li>You can click the little turtle icon at the top to turn throttling on / off quickly. Throttling is off when the turtle is grey</li> <li>You can adjust the strength of the throttling by going to:<ul> <li>Charles toolbar \u2192 Proxy \u2192 Throttle Settings... \u2192 change the Throttle Preset value</li> </ul> </li> </ul> Enabled  Enabled  Disabled <p>Warning</p> <p>Do not forget to remove throttling after you're done using it. It is very easy to forget you enabled it, and it will mess with your other tasks / testing</p>"},{"location":"tools/charles_proxy/charles_proxy/#ssl-proxying-locations","title":"SSL Proxying locations","text":"<p>Instead of having to allowlist every sub-domain for SSL proxying, we will add a few manually. Follow these steps:</p> <ul> <li>Charles toolbar \u2192 Proxy \u2192 SSL Proxying Settings \u2192 SSL Proxying tab</li> <li>Add the following:<ul> <li><code>*.disney-plus.com</code></li> <li><code>*.bamgrid.com</code></li> <li><code>disney.my.sentry.io</code></li> <li><code>qa-ripcut-delivery.disney-plus.net</code></li> <li><code>prod-ripcut-delivery.disney-plus.net</code></li> <li><code>appconfigs.disney-plus.net</code></li> </ul> </li> </ul>"},{"location":"tools/cypher/cypher/","title":"Cypher","text":"<ul> <li>Cypher is a tool that helps us lookup dictionary keys and compare dictionary versions</li> <li>To use Cypher, request read access on Hoth here</li> <li>Link to Cypher</li> </ul>"},{"location":"tools/jarvis/jarvis/","title":"Jarvis","text":"<p>Jarvis is a standalone app that lives inside of the Dmgz codebase. It allows us to easily override config values, switch environments, time travel, and more!</p>"},{"location":"tools/jarvis/jarvis/#install-jarvis","title":"Install Jarvis","text":"<ul> <li>There are several ways to install Jarvis<ul> <li>You can download the latest version of Jarvis here</li> <li>In Android Studio Select <code>apps.Jarvis</code> from the configurations at the top right and press the green run button</li> <li>Build Jarvis from the command line with <code>./gradlew :apps:jarvis:installDevDebug</code> within Dmgz</li> </ul> </li> </ul>"},{"location":"tools/jarvis/jarvis/#features","title":"Features","text":""},{"location":"tools/jarvis/jarvis/#config-overrides","title":"Config Overrides","text":"<ul> <li>We can override remote config values by turning on a config toggle in Jarvis</li> <li>If Jarvis is installed on a device, when Disney+ starts, it will fetch the configs through Jarvis. Jarvis pulls down the remote config, applies required transformations, and then provides the config to the app<ul> <li>The list of transforms / toggles shown in Jarvis are pulled and can be viewed from here</li> </ul> </li> <li>We can add a config transformation to Jarvis locally, or add a new remote config transformation (for all Jarvis users to utilize). It is common to add a config locally, test it, then add it remotely when needed</li> </ul>"},{"location":"tools/jarvis/jarvis/#adding-a-local-config-transformation","title":"Adding a local config transformation","text":"<ul> <li>Create a file in the root folder of the Dmgz project called <code>local_config_transforms.json</code>. This file is <code>.gitignore</code>ed</li> <li>Add the transformation in <code>.json</code> format to your <code>local_config_transforms.json</code> file. Here is an example for our Collection Content Debug Layer config flag:</li> </ul> <pre><code>    [\n       {\n         \"name\": \"Collections\",\n         \"transforms\": [\n           {\n             \"name\": \"Collection Content Debug Layer\",\n             \"uniqueKey\": \"enableContentDebugLayer\",\n             \"transformMap\": {\n               \"collections\": {\n                 \"enableContentDebugLayer\": true\n               }\n             }\n           }\n         ]\n       }\n     ]\n</code></pre> Note <ul> <li>The boolean config value we added above, <code>\"enableContentDebugLayer\": true</code>, means that if we flip on this config toggle in Jarvis, that value will now be <code>true</code>. That means the default value in app is <code>false</code></li> <li>In this <code>.json</code> we are declaring a transformation of <code>Boolean</code> type set within the collections config group. You can follow this structure to add your own values</li> <li><code>uniqueKey</code> - if two toggles have the same <code>uniqueKey</code>, only one of them can remain active at a time. Enabling one would then automatically disable any other toggles with the same key. Similar to a radio group as opposed to a checkbox group</li> <li>By putting our transformation within the <code>transforms</code> array under the item named \"Collections\", we are merely indicating that our transformation should be included under the \"Collections\" section in the app. This is different than the <code>collections</code> object within <code>transformMap</code> which declares the full path to the config item as it is accessed within the app (in this case, <code>collections.enableContentDebugLayer</code>)   </li> </ul> <ul> <li> <p>Run a <code>make</code> command depending on which app you are using to broadcast your new local config transformation to Jarvis:</p> <ul> <li><code>make install_local_transforms_groups_disney</code> - for Disney+</li> <li><code>make install_local_transforms_groups_star</code> - for Star+</li> </ul> </li> <li> <p>Verify it worked by opening Jarvis and looking for the word (Local) in blue</p> </li> </ul> <p></p> <ul> <li>Turn on your newly added local config in Jarvis</li> <li>Swipe up in Jarvis view the ACTIVE CONFIG OVERRIDES &amp; CONFIG JSON</li> </ul> <p></p> <ul> <li>Now that you confirmed your local config is active in Jarvis, you are ready to restart the Disney+ / Star+ app to reload the config. To be safe, clear app data. Read more about config caching in <code>ConfigLoaderImpl.kt</code></li> </ul> <p>Tip</p> <p>If you run the command <code>make print_local_active_config_transforms</code> it will print out an <code>adb</code> command you can copy and paste in a Pull Request for other developers to use to test your local transformation you just setup. This is useful because you may not have set up the transformation remotely yet</p>"},{"location":"tools/jarvis/jarvis/#deleting-a-local-config-transformation","title":"Deleting a local config transformation","text":"<ul> <li>Both of these will delete the <code>.json</code> file from the connected device<ul> <li><code>make remove_local_collection_config</code> - uninstall the collection config</li> <li><code>make remove_local_app_config</code> - uninstall the app config</li> </ul> </li> </ul>"},{"location":"tools/jarvis/jarvis/#adding-a-jarvis-config-transformation","title":"Adding a Jarvis Config Transformation","text":"<ul> <li>Clone our app config repo <code>dmgz-android-appconfig</code></li> <li>Checkout the <code>qa</code> branch. Create a new branch off of the <code>qa</code> branch</li> <li>Add your <code>.json</code> config values from step one to <code>/outputs/transformations/all.json</code>, preferably in alphabetical order by section name</li> <li>Commit your change, push up, and create a Pull Request<ul> <li>Here is the Pull Request from our example</li> </ul> </li> <li>Once merged, you're done!</li> </ul>"},{"location":"tools/jarvis/jarvis/#consuming-a-remote-config-transformation-in-dmgz","title":"Consuming a remote config transformation in Dmgz","text":"<ul> <li>We now need to create this transformation in the correct class within Dmgz so that we can check this config value in the code</li> <li>Using our Collection Content Debug Layer config example from step 1, we can add the required code to the corresponding config class inside of Dmgz: <code>CollectionsAppConfigImpl.kt</code></li> </ul> <pre><code>   @get:ConfigDoc(\n        path = \"collections.enableContentDebugLayer\",\n        description = \"\"\"\n            Enables a debug layer that displays useful info about the content being presented in the shelves\n        \"\"\"\n    )\n    override val enableContentDebugLayer: Boolean\n        get() = map.value(\"collections\", \"enableContentDebugLayer\") ?: false\n</code></pre> <ul> <li>Our <code>path</code> value is <code>collections.enableContentDebugLayer</code>. That is because in step 1, we declared the <code>transformMap</code> to include <code>\"collections\"</code> and then <code>\"enableContentDebugLayer\"</code></li> <li>You can see how the <code>get()</code> method attempts to get a remote config value (or a Jarvis value if it is installed on your test device). If that value is not there, we default to <code>false</code></li> <li>Here is the Pull Request for our example</li> </ul>"},{"location":"tools/jarvis/jarvis/#delorean","title":"Delorean","text":"<ul> <li>Inside of Jarvis, you can select Delorean to travel to a certain time or place</li> <li>This is particularly useful for testing specific scenarios that are not yet released</li> </ul>"},{"location":"tools/jarvis/jarvis/#environment-switcher","title":"Environment Switcher","text":"<ul> <li>Inside of Jarvis you can select ENVIRONMENT SWITCHER to change app environments</li> <li>Select the environment you want, scroll down, then select SWITCH ENVIRONMENT</li> </ul>"},{"location":"tools/jarvis/jarvis/#vision-config-source","title":"Vision Config Source","text":"<ul> <li>Under the Environment Switcher, you can also adjust Vision Config settings</li> <li>Vision allows us to host specific content that can be consumed by the app<ul> <li>Using Project Vision on Android</li> <li>Project Vision Documentation</li> <li>Project Vision home page</li> </ul> </li> </ul>"},{"location":"tools/jarvis/jarvis/#bundled-jarvis-variant","title":"Bundled Jarvis Variant","text":"<ul> <li>The bundled Jarvis variant has no UI and is used to bundle a config at compile time for Disney+</li> <li>This is used for 3rd party testers to test the app with a specific config</li> <li>This variant bundles a config at compile time. It does not provide any UI and is primarily meant to let 3rd party testers test the app with a specific config</li> <li>As a developer you can define what config would be loaded when the <code>.apk</code> is installed and that config will then always be loaded instead of the remote config until the app is removed</li> <li>To bundle a config you need to add <code>${configId}.json</code> in the <code>/src/bundled/assets/</code> directory<ul> <li>For Disney+ right now that would be either <code>dplus-app.json</code> or <code>dplus-collections.json</code>, so:<ul> <li><code>/src/bundled/assets/dplus-app.json</code></li> <li><code>/src/bundled/assets/dplus-collections.json</code></li> <li>These files have both been git ignored to make it easy to make changes locally</li> </ul> </li> </ul> </li> </ul>"},{"location":"tools/jedi_academy/jedi_academy/","title":"Jedi Academy","text":"<ul> <li>Jedi Academy is our onboarding project that new hires can use to learn some of the concepts inside of Dmgz on a smaller scale</li> <li>Link to Jedi Academy Repo</li> </ul>"},{"location":"tools/jedi_trials/jedi_trials/","title":"Jedi Trials","text":"<ul> <li>Jedi Trials is our hiring project that candidates use during an interview</li> <li>Link to Jedi Trials Repo</li> </ul>"},{"location":"tools/overlays/debug_mode/","title":"Debug Mode","text":"<p>There are 2 debug layers implemented that allow developers (or even QA team) to see any additional debug information on asset or container level. The debug overlays could be enabled via Jarvis.</p> <p>Enable Container Debug Layer</p> <p>On Jarvis, toggle <code>Collections \u2192 Enable Container Debug Layer</code> for enabling the debug overlay on container level.</p> Container Debug Layer Enabled <p></p> <p>Enable Content Debug Layer</p> <p>On Jarvis, toggle <code>Collections \u2192 Collection Content Debug Layer</code> for the debug layer on asset level (Note: this is currently implemented for the EditorialPanelItem only).</p> Content Debug Layer Enabled <p></p>"},{"location":"tools/overlays/remote_overlay/","title":"Remote Overlay","text":"<p>This is a functionality to see the key pressed events in order to facilitate video recording of bugs on TV and facilitate showing the relevant interactions.</p> <p>Enable Remote Control Overlay</p> <p>This functionality can be found in Jarvis, enabling the toggle on <code>Overlays/ Show Remote Control Overlay on TV</code>.</p> Remote Control Layer Enabled <p></p> <p>Once that is ON, the user can see an overlay showing all the key pressed, there are icons showing the major navigation keys, but when another key is pressed It will be shown on a label. This can be more useful whenever there are bugs on TV and a video can clarify the repro steps but we would like to know all the key inputs that happened on that user\u2019s journey, So while this can be useful for developers this can also be useful for the QA teams.</p>"},{"location":"tools/productivity/productivity/","title":"Productivity Tools","text":""},{"location":"tools/productivity/productivity/#cli-commands","title":"CLI commands","text":"<p>Contained in this document are some useful aliases that can make various tasks, such working with Charles Proxy or Android Emulators/Devices, using commandline.</p> <p>A lot of these commands were written with ZSH in mind (the default shell for macOS as of Catalina), but they should mostly work for shell alternatives such as BASH, Fish, SH, etc.</p> <p>We encourage you to review the commands contained in this document as they can help improve your workflow. For example, building the app from the CLI is faster due to not having to switch between build variants that forces AS to index/build everything.</p>"},{"location":"tools/productivity/productivity/#installing-aliases","title":"Installing Aliases","text":"<p>For your convenience, the following aliases, function, and commands have been added (and version controlled) in the zsh-alias-disney.sh file.</p> <p>To install <code>zsh-alias-disney.sh</code> in Zsh, download the file to the same location as your <code>.zshrc</code> file (usually in your home or <code>~</code> directory) and edit your <code>.zshrc</code> to include the following:</p> <pre><code>source ~/zsh-alias-disney.sh \n</code></pre> <p>(Alternatively, feel free to download the file to the directory of your choosing and then just reference the path directly in the source command)</p> <p>Once added, either restart your terminal or utilize the following command:</p> <pre><code>source ~/.zshrc\n</code></pre>"},{"location":"tools/productivity/productivity/#aliasesfunctions-zsh-alias-disneysh","title":"Aliases/Functions (zsh-alias-disney.sh)","text":"Alias/Function Description gw shortcut for <code>./gradlew</code> adbText <code>example@sample.com</code> Adds text to adb connected device adbUrl Launch URL via intent adbEnableLayoutBounds/adbDisableLayoutBounds Enable/Disable Layout Bounds adbEnableTalkback/adbDisableTalkback Enable/Disable Talkback openLocale opens language selector screen App Commands restartDisney, restartHulu, restartJarvis, restartStar Restarts app(s) clearDisney, clearHulu, clearJarvis, clearStar Clears local data for specified app(s) Jarvis Commands installJarvis Installs Jarvis onto device disneyQA/starQA Set app environment to QA through CLI instead of Jarvis disneyProd/starProd Set app environment to Prod through CLI instead of Jarvis Charles/Network Commands android-proxy-enable/android-proxy-disable Enable or disable proxy settings on a device through ADB iplocal obtain your computer's local IP address ipexternal obtain your external IP address (via What's my IP)"},{"location":"tools/zoom/zoom/","title":"Zoom","text":"<p>We use Zoom for meetings - here are a handful of tips</p>"},{"location":"tools/zoom/zoom/#automatically-mute-when-joining-a-meeting","title":"Automatically mute when joining a meeting","text":"<ul> <li>Zoom \u2192 Preferences \u2192 Audio \u2192 scroll down \u2192 Check the box Mute my mic when joining a meeting</li> </ul>"},{"location":"tools/zoom/zoom/#blur-image-backgorund","title":"Blur / Image Backgorund","text":"<ul> <li>Zoom \u2192 Preferences \u2192 Background &amp; Effects \u2192 select Blur or another fun background image</li> </ul>"},{"location":"tools/zoom/zoom/#turn-on-outlook-zoom-plugin","title":"Turn on Outlook Zoom plugin","text":"<ul> <li>This is incredibly useful when creating Zoom meetings</li> <li>In Outlook, click New Event</li> <li>In the top right of this New Event there should be an option to add the Zoom plugin</li> <li>Once added, you can click this Zoom plugin and it will automagically add a Zoom meeting to the body of your event</li> </ul>"},{"location":"tools/zoom/zoom/#turn-off-zoom-ding-when-someone-joins-leaves-meeting","title":"Turn off Zoom ding when someone joins / leaves meeting","text":"<ul> <li>Zoom \u2192 Preferences \u2192 General \u2192 scroll down \u2192 select View More Settings \u2192 Web settings open, select In Meeting (Basic) \u2192 Uncheck the box Sound notification when someone joins or leaves</li> </ul>"},{"location":"tools/zoom/zoom/#remove-window-resize-on-screen-share","title":"Remove Window resize on screen share","text":"<ul> <li>When someone else shares their screen in a meeting, Zoom automatically goes full screen. This turns that off</li> <li>Zoom \u2192 Preferences \u2192 Share Screen \u2192 under Window size when screen sharing: select Maintain current size</li> </ul>"}]}